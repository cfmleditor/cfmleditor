{
	"name":"arraySort",
	"type":"function",
	"syntax":"arraySort(array, sortType [, sortOrder [, localeSensitive ]])\nor\narraySort(array, callback)",
	"member":"someArray.sort(sortType [, sortOrder, localeSensitive ])",
	"returns":"boolean",
	"related":["structSort","listSort","querySort"],
	"description":"Sorts array elements.",
	"params": [
		{"name":"array","description":"Name of an array","required":true,"default":"","type":"array","values":[]},
		{"name":"sortType","description":"numeric: sorts numbers\n text: sorts text alphabetically, taking case into account\n (also known as case-sensitive). All letters of one case\n precede the first letter of the other case:\n - aabzABZ, if sort_order = \"asc\" (ascending sort)\n - ZBAzbaa, if sort_order = \"desc\" (descending sort)\n\n textnocase: sorts text alphabetically, without regard to\n case (also known as case-insensitive). A letter in varying\n cases precedes the next letter:\n - aAaBbBzzZ, in an ascending sort; preserves original\n intra-letter order\n - ZzzBbBaAa, in a descending sort; reverses original\n intra-letter order","required":true,"default":"","type":"string","values":["numeric","text","textnocase"]},
		{"name":"sortOrder","description":"asc: ascending sort order. Default.\n - aabzABZ or aAaBbBzzZ, depending on value of sort_type,\n for letters\n - from smaller to larger, for numbers\n\n desc: descending sort order.\n - ZBAzbaa or ZzzBbBaAa, depending on value of sort_type,\n for letters\n - from larger to smaller, for numbers","required":false,"default":"asc","type":"string","values":["asc","desc"]},
		{"name":"callback","description":"CF10+ A function that uses two elements of an array. `function(element1, element2)`. Returns whether the first is less than (-1), equal to (0) or greater than (1) the second one (like the compare functions).","required":false,"default":"","type":"function","values":[]},
		{"name":"localeSensitive","description":"CF10+ Specify if you wish to do a locale sensitive sorting.","required":false,"default":"false","type":"boolean","values":[]}
	],
	"engines": {
		"coldfusion": {"minimum_version":"", "notes":"CF2018+ Member function returns the sorted array.", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-a-b/arraysort.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"https://docs.lucee.org/reference/functions/arraysort.html"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/arraysort"}
	},
	"links": [],
	"examples": [
		{
			"title": "Simple example for arraySort function",
			"description": "Uses the arraySort() function to get the sorted array and which sorted by type numeric",
			"code": "someArray = [10,20,-99,46,50];\narraySort(someArray, \"numeric\", \"desc\");\nwriteOutput( serializeJSON(someArray) );",
			"result": "[50,46,20,10,-99]"
		},
		{
			"title": "Simple example with member function",
			"description": "CF11+ Lucee4.5+",
			"code": "someArray = [\"COLDFUSION\",\"coldfusion\",\"adobe\",\"LucEE\",\"RAILO\"];\nsomeArray.sort(\"text\",\"desc\");\nwriteOutput( serializeJSON(someArray) );",
			"result": "[\"coldfusion\",\"adobe\",\"RAILO\",\"LucEE\",\"COLDFUSION\"]"
		},
		{
			"title": "Simple example with callback function",
			"description": "Uses the callback function",
			"code": "someArray = [\n    {name=\"testemployee\", age=\"32\"},\n    {name=\"employeetest\", age=\"36\"}\n];\narraySort(\n    someArray,\n    function (e1, e2){\n        return compare(e1.name, e2.name);\n    }\n);\nwriteOutput( serializeJSON(someArray) );",
			"result": "[{\"NAME\":\"employeetest\",\"AGE\":\"36\"},{\"NAME\":\"testemployee\",\"AGE\":\"32\"}] "
		},
		{
			"title": "Script member syntax: sort array of structs by multiple keys",
			"description": "Takes an array of structs and sorts by multiple different keys, similar to the way a query allows.",
			"code": "arrayOfStructs = [\n\t{\n\t\t\"userId\": 1,\n\t\t\"firstName\": \"John\",\n\t\t\"lastName\": \"Doe\",\n\t\t\"departmentName\": \"Sales\",\n\t\t\"active\": 1\n\t},\n\t{\n\t\t\"userId\": 2,\n\t\t\"firstName\": \"Jane\",\n\t\t\"lastName\": \"Smith\",\n\t\t\"departmentName\": \"Marketing\",\n\t\t\"active\": 1\n\t},\n\t{\n\t\t\"userId\": 3,\n\t\t\"firstName\": \"Alice\",\n\t\t\"lastName\": \"Johnson\",\n\t\t\"departmentName\": \"Sales\",\n\t\t\"active\": 0\n\t},\n\t{\n\t\t\"userId\": 4,\n\t\t\"firstName\": \"Bob\",\n\t\t\"lastName\": \"Brown\",\n\t\t\"departmentName\": \"Sales\",\n\t\t\"active\": 1\n\t},\n\t{\n\t\t\"userId\": 5,\n\t\t\"firstName\": \"Charlie\",\n\t\t\"lastName\": \"Davis\",\n\t\t\"departmentName\": \"Marketing\",\n\t\t\"active\": 0\n\t}\n];\narrayOfStructs.sort((user1,user2) => {\n\tif (user1.active != user2.active) {\n\t\treturn user2.active - user1.active;\n\t}\n\tif (user1.departmentName == user2.departmentName || user1.active == 0) {\n\t\tif (user1.lastName == user2.lastName) {\n\t\t\treturn user1.firstName.compare(user2.firstName);\n\t\t}\n\t\treturn user1.lastName.compare(user2.lastName);\n\t}\n\treturn user1.departmentName.compare(user2.departmentName);\n});\nwriteDump(arrayOfStructs);",
			"result": "Sorts by active employees, then by their last name and finally by their first name",
			"runnable": true
		}
	]
}
