{"syntax":" listReduce(list, function(result, item [,index, list]) [,initialValue, delimiter, includeEmptyFields])",
"description":"Iterates over each item of the list and calls the closure to work on the item. This function will reduce the list to a single value and will return the value.",
"engines":{
		"coldfusion":{"minimum_version":"11","docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-l/listreduce.html","notes":""},
		"lucee":{"minimum_version":"4.5","docs":"https://docs.lucee.org/reference/functions/listreduce.html","notes":""}
	},
	"name":"listReduce",
	"links":[{
		"title":"Map, Reduce and other Higher Order Functions",
		"description":"A Primer for map, reduce, filter, and Higher Order Functions in general.",
		"url":"http://ryanguill.com/functional/higher-order-functions/2016/05/18/higher-order-functions.html"
	},
	{
		"title": "ColdFusion 11: .map() and .reduce()",
		"description": "A look at the new .map() and .reduce() methods that each of array, struct and lists all have",
		"url":"http://blog.adamcameron.me/2014/02/coldfusion-11-map-and-reduce.html"
	}],
	"params":[
		{"values":[],"default":"","description":"Input list","name":"list","type":"string","required":true},
		{"values":[],"default":"","description":"Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nitem: value\r\nindex : current index for the iteration\r\nlist : reference of the original list","name":"function","type":"any","required":true},
		{"values":[],"default":"","description":"Initial value which will be used for the reduce operation. The type is any.","name":"intialValue","type":"any","required":false},
		{"values":[],"default":"comma","description":"The list delimiter.","name":"delimiter","type":"string","required":false},
		{"values":[],"default":"false","description":"Include empty values.","name":"includeEmptyFields","type":"boolean","required":false}
	],
	"returns":"any",
	"examples":[{
			"title": "Script Syntax",
			"description": "",
			"code": "numbers = \"1,2,3,4,5,6,7,8,9,10\"; \r\n sum = listReduce(numbers, function(previousValue, value) \r\n { \r\n return previousValue + value; \r\n },  0); \r\n writeOutput(\"The sum of the digits #numbers# is #sum#<br>\"); \r\n"
		}],
	"type":"function",
	"related":["ArrayMap","ArrayReduce"]
}
