"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@esbuild-plugins/node-globals-polyfill/process.js
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e2) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e2) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
function noop() {
}
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
function uptime() {
  var currentTime = /* @__PURE__ */ new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
var cachedSetTimeout, cachedClearTimeout, queue, draining, currentQueue, queueIndex, title, platform, browser, env, argv, version, versions, release, config, on, addListener, once, off, removeListener, removeAllListeners, emit, performance, performanceNow, startTime, process, defines;
var init_process = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/process.js"() {
    cachedSetTimeout = defaultSetTimout;
    cachedClearTimeout = defaultClearTimeout;
    if (typeof globalThis.setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    }
    if (typeof globalThis.clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    }
    queue = [];
    draining = false;
    queueIndex = -1;
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    title = "browser";
    platform = "browser";
    browser = true;
    env = {};
    argv = [];
    version = "";
    versions = {};
    release = {};
    config = {};
    on = noop;
    addListener = noop;
    once = noop;
    off = noop;
    removeListener = noop;
    removeAllListeners = noop;
    emit = noop;
    performance = globalThis.performance || {};
    performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
      return (/* @__PURE__ */ new Date()).getTime();
    };
    startTime = /* @__PURE__ */ new Date();
    process = {
      nextTick,
      title,
      browser,
      env,
      argv,
      version,
      versions,
      on,
      addListener,
      once,
      off,
      removeListener,
      removeAllListeners,
      emit,
      binding,
      cwd,
      chdir,
      umask,
      hrtime,
      platform,
      release,
      config,
      uptime
    };
    defines = {};
    Object.keys(defines).forEach((key) => {
      const segs = key.split(".");
      let target = process;
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i];
        if (i === segs.length - 1) {
          target[seg] = defines[key];
        } else {
          target = target[seg] || (target[seg] = {});
        }
      }
    });
  }
});

// node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js
function init() {
  inited = true;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
}
function base64toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
  arr = new Arr(len * 3 / 4 - placeHolders);
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 255;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 255;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function base64fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = "";
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(
      encodeChunk(
        uint8,
        i,
        i + maxChunkLength > len2 ? len2 : i + maxChunkLength
      )
    );
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 63];
    output += "==";
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 63];
    output += lookup[tmp << 2 & 63];
    output += "=";
  }
  parts.push(output);
  return parts.join("");
}
function kMaxLength() {
  return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError("Invalid typed array length");
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = new Uint8Array(length);
    that.__proto__ = Buffer2.prototype;
  } else {
    if (that === null) {
      that = new Buffer2(length);
    }
    that.length = length;
  }
  return that;
}
function Buffer2(arg, encodingOrOffset, length) {
  if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
    return new Buffer2(arg, encodingOrOffset, length);
  }
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
function from(that, value, encodingOrOffset, length) {
  if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === "string") {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}
function assertSize(size) {
  if (typeof size !== "number") {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill2, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill2 !== void 0) {
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
  }
  return createBuffer(that, size);
}
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer2.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}
function fromString(that, string, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer2.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength;
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError("'length' is out of bounds");
  }
  if (byteOffset === void 0 && length === void 0) {
    array = new Uint8Array(array);
  } else if (length === void 0) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = array;
    that.__proto__ = Buffer2.prototype;
  } else {
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
      if (typeof obj.length !== "number" || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError(
    "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
  );
}
function checked(length) {
  if (length >= kMaxLength()) {
    throw new RangeError(
      "Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes"
    );
  }
  return length | 0;
}
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== "string") {
    string = "" + string;
  }
  var len = string.length;
  if (len === 0) return 0;
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "ascii":
      case "latin1":
      case "binary":
        return len;
      case "utf8":
      case "utf-8":
      case void 0:
        return utf8ToBytes(string).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return len * 2;
      case "hex":
        return len >>> 1;
      case "base64":
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length;
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
function slowToString(encoding, start, end) {
  var loweredCase = false;
  if (start === void 0 || start < 0) {
    start = 0;
  }
  if (start > this.length) {
    return "";
  }
  if (end === void 0 || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return "";
  }
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return "";
  }
  if (!encoding) encoding = "utf8";
  while (true) {
    switch (encoding) {
      case "hex":
        return hexSlice(this, start, end);
      case "utf8":
      case "utf-8":
        return utf8Slice(this, start, end);
      case "ascii":
        return asciiSlice(this, start, end);
      case "latin1":
      case "binary":
        return latin1Slice(this, start, end);
      case "base64":
        return base64Slice(this, start, end);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase)
          throw new TypeError("Unknown encoding: " + encoding);
        encoding = (encoding + "").toLowerCase();
        loweredCase = true;
    }
  }
}
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  if (buffer.length === 0) return -1;
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1;
  }
  if (typeof val === "string") {
    val = Buffer2.from(val, encoding);
  }
  if (internalIsBuffer(val)) {
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === "number") {
    val = val & 255;
    if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(
          buffer,
          val,
          byteOffset
        );
      } else {
        return Uint8Array.prototype.lastIndexOf.call(
          buffer,
          val,
          byteOffset
        );
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== void 0) {
    encoding = String(encoding).toLowerCase();
    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i2) {
    if (indexSize === 1) {
      return buf[i2];
    } else {
      return buf.readUInt16BE(i2 * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength)
          return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength)
      byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }
  return -1;
}
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(
    utf8ToBytes(string, buf.length - offset),
    buf,
    offset,
    length
  );
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(
    utf16leToBytes(string, buf.length - offset),
    buf,
    offset,
    length
  );
}
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64fromByteArray(buf);
  } else {
    return base64fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 128) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 192) === 128) {
            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
            if (tempCodePoint > 127) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      codePoint = 65533;
      bytesPerSequence = 1;
    } else if (codePoint > 65535) {
      codePoint -= 65536;
      res.push(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  var res = "";
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 127);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = "";
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = "";
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0)
    throw new RangeError("offset is not uint");
  if (offset + ext > length)
    throw new RangeError("Trying to access beyond buffer length");
}
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min)
    throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 65535 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 4294967295 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
  }
}
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError("Index out of range");
  if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(
      buf,
      value,
      offset,
      4,
      34028234663852886e22,
      -34028234663852886e22
    );
  }
  ieee754write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(
      buf,
      value,
      offset,
      8,
      17976931348623157e292,
      -17976931348623157e292
    );
  }
  ieee754write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
function base64clean(str) {
  str = stringtrim(str).replace(INVALID_BASE64_RE, "");
  if (str.length < 2) return "";
  while (str.length % 4 !== 0) {
    str = str + "=";
  }
  return str;
}
function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
  if (n < 16) return "0" + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          continue;
        } else if (i + 1 === length) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1) bytes.push(239, 191, 189);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1) bytes.push(239, 191, 189);
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0) break;
      bytes.push(
        codePoint >> 12 | 224,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0) break;
      bytes.push(
        codePoint >> 18 | 240,
        codePoint >> 12 & 63 | 128,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    byteArray.push(str.charCodeAt(i) & 255);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return base64toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val;
}
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
function ieee754read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function ieee754write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer[offset + i - d] |= s * 128;
}
var lookup, revLookup, Arr, inited, MAX_ARGUMENTS_LENGTH, INVALID_BASE64_RE;
var init_Buffer = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js"() {
    init_process();
    init_buffer();
    lookup = [];
    revLookup = [];
    Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    inited = false;
    Buffer2.TYPED_ARRAY_SUPPORT = globalThis.TYPED_ARRAY_SUPPORT !== void 0 ? globalThis.TYPED_ARRAY_SUPPORT : true;
    Buffer2.poolSize = 8192;
    Buffer2._augment = function(arr) {
      arr.__proto__ = Buffer2.prototype;
      return arr;
    };
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };
    Buffer2.kMaxLength = kMaxLength();
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
      }
    }
    Buffer2.alloc = function(size, fill2, encoding) {
      return alloc(null, size, fill2, encoding);
    };
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.isBuffer = isBuffer;
    Buffer2.compare = function compare(a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a === b) return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length = this.length | 0;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.equals = function equals(b) {
      if (!internalIsBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
            return asciiWrite(this, string, offset, length);
          case "latin1":
          case "binary":
            return latin1Write(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    MAX_ARGUMENTS_LENGTH = 4096;
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754read(this, offset, false, 52, 8);
    };
    Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (!Buffer2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i;
      if (this === target && start < targetStart && targetStart < end) {
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
  }
});

// node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js
var init_buffer = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js"() {
    init_Buffer();
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _ in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/has-tostringtag/shams.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var hasSymbols = require_shams();
    module2.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  "node_modules/es-object-atoms/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Object;
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = SyntaxError;
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = TypeError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = URIError;
  }
});

// node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  "node_modules/math-intrinsics/abs.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Math.abs;
  }
});

// node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  "node_modules/math-intrinsics/floor.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Math.floor;
  }
});

// node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  "node_modules/math-intrinsics/max.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Math.max;
  }
});

// node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  "node_modules/math-intrinsics/min.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Math.min;
  }
});

// node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  "node_modules/math-intrinsics/pow.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Math.pow;
  }
});

// node_modules/math-intrinsics/round.js
var require_round = __commonJS({
  "node_modules/math-intrinsics/round.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Math.round;
  }
});

// node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS({
  "node_modules/math-intrinsics/isNaN.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Number.isNaN || function isNaN2(a) {
      return a !== a;
    };
  }
});

// node_modules/math-intrinsics/sign.js
var require_sign = __commonJS({
  "node_modules/math-intrinsics/sign.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var $isNaN = require_isNaN();
    module2.exports = function sign(number) {
      if ($isNaN(number) || number === 0) {
        return number;
      }
      return number < 0 ? -1 : 1;
    };
  }
});

// node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "node_modules/gopd/gOPD.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Object.getOwnPropertyDescriptor;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS({
  "node_modules/get-proto/Reflect.getPrototypeOf.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  }
});

// node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS({
  "node_modules/get-proto/Object.getPrototypeOf.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var $Object = require_es_object_atoms();
    module2.exports = $Object.getPrototypeOf || null;
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "node_modules/call-bind-apply-helpers/functionCall.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Function.prototype.call;
  }
});

// node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "node_modules/call-bind-apply-helpers/functionApply.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = Function.prototype.apply;
  }
});

// node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "node_modules/call-bind-apply-helpers/reflectApply.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "node_modules/call-bind-apply-helpers/actualApply.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module2.exports = $reflectApply || bind.call($call, $apply);
  }
});

// node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "node_modules/call-bind-apply-helpers/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module2.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    };
  }
});

// node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "node_modules/dunder-proto/get.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e) {
      if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
        throw e;
      }
    }
    var desc = !!hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module2.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
  }
});

// node_modules/get-proto/index.js
var require_get_proto = __commonJS({
  "node_modules/get-proto/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var reflectGetProto = require_Reflect_getPrototypeOf();
    var originalGetProto = require_Object_getPrototypeOf();
    var getDunderProto = require_get();
    module2.exports = reflectGetProto ? function getProto(O) {
      return reflectGetProto(O);
    } : originalGetProto ? function getProto(O) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new TypeError("getProto: not an object");
      }
      return originalGetProto(O);
    } : getDunderProto ? function getProto(O) {
      return getDunderProto(O);
    } : null;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var round = require_round();
    var sign = require_sign();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = require_get_proto();
    var $ObjectGPO = require_Object_getPrototypeOf();
    var $ReflectGPO = require_Reflect_getPrototypeOf();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float16Array%": typeof Float16Array === "undefined" ? undefined2 : Float16Array,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Object.getPrototypeOf%": $ObjectGPO,
      "%Math.abs%": abs,
      "%Math.floor%": floor,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow,
      "%Math.round%": round,
      "%Math.sign%": sign,
      "%Reflect.getPrototypeOf%": $ReflectGPO
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void undefined2;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bound/index.js
var require_call_bound = __commonJS({
  "node_modules/call-bound/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var GetIntrinsic = require_get_intrinsic();
    var callBindBasic = require_call_bind_apply_helpers();
    var $indexOf = callBindBasic([GetIntrinsic("%String.prototype.indexOf%")]);
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = (
        /** @type {Parameters<typeof callBindBasic>[0][0]} */
        GetIntrinsic(name, !!allowMissing)
      );
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBindBasic([intrinsic]);
      }
      return intrinsic;
    };
  }
});

// node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "node_modules/is-arguments/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var hasToStringTag = require_shams2()();
    var callBound = require_call_bound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && "length" in value && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && "callee" in value && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module2.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "node_modules/is-regex/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var callBound = require_call_bound();
    var hasToStringTag = require_shams2()();
    var hasOwn = require_hasown();
    var gOPD = require_gopd();
    var fn;
    if (hasToStringTag) {
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
      fn = function isRegex(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        var descriptor = (
          /** @type {NonNullable<typeof gOPD>} */
          gOPD(
            /** @type {{ lastIndex?: unknown }} */
            value,
            "lastIndex"
          )
        );
        var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, "value");
        if (!hasLastIndexDataProperty) {
          return false;
        }
        try {
          $exec(
            value,
            /** @type {string} */
            /** @type {unknown} */
            badStringifier
          );
        } catch (e) {
          return e === isRegexMarker;
        }
      };
    } else {
      $toString = callBound("Object.prototype.toString");
      regexClass = "[object RegExp]";
      fn = function isRegex(value) {
        if (!value || typeof value !== "object" && typeof value !== "function") {
          return false;
        }
        return $toString(value) === regexClass;
      };
    }
    var $exec;
    var isRegexMarker;
    var throwRegexMarker;
    var badStringifier;
    var $toString;
    var regexClass;
    module2.exports = fn;
  }
});

// node_modules/safe-regex-test/index.js
var require_safe_regex_test = __commonJS({
  "node_modules/safe-regex-test/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var callBound = require_call_bound();
    var isRegex = require_is_regex();
    var $exec = callBound("RegExp.prototype.exec");
    var $TypeError = require_type();
    module2.exports = function regexTester(regex) {
      if (!isRegex(regex)) {
        throw new $TypeError("`regex` must be a RegExp");
      }
      return function test(s) {
        return $exec(regex, s) !== null;
      };
    };
  }
});

// node_modules/is-generator-function/index.js
var require_is_generator_function = __commonJS({
  "node_modules/is-generator-function/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var callBound = require_call_bound();
    var safeRegexTest = require_safe_regex_test();
    var isFnRegex = safeRegexTest(/^\s*(?:function)?\*/);
    var hasToStringTag = require_shams2()();
    var getProto = require_get_proto();
    var toStr = callBound("Object.prototype.toString");
    var fnToStr = callBound("Function.prototype.toString");
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    module2.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex(fnToStr(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? (
          /** @type {GeneratorFunctionConstructor} */
          getProto(generatorFunc)
        ) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };
  }
});

// node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "node_modules/is-callable/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr.call(all) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module2.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// node_modules/for-each/index.js
var require_for_each = __commonJS({
  "node_modules/for-each/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var isCallable = require_is_callable();
    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          if (receiver == null) {
            iterator(array[i], i, array);
          } else {
            iterator.call(receiver, array[i], i, array);
          }
        }
      }
    };
    var forEachString = function forEachString2(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
        if (receiver == null) {
          iterator(string.charAt(i), i, string);
        } else {
          iterator.call(receiver, string.charAt(i), i, string);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };
    function isArray(x) {
      return toStr.call(x) === "[object Array]";
    }
    module2.exports = function forEach(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (isArray(list)) {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
  }
});

// node_modules/possible-typed-array-names/index.js
var require_possible_typed_array_names = __commonJS({
  "node_modules/possible-typed-array-names/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = [
      "Float16Array",
      "Float32Array",
      "Float64Array",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "BigInt64Array",
      "BigUint64Array"
    ];
  }
});

// node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "node_modules/available-typed-arrays/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var possibleNames = require_possible_typed_array_names();
    var g = typeof globalThis === "undefined" ? globalThis : globalThis;
    module2.exports = function availableTypedArrays() {
      var out = [];
      for (var i = 0; i < possibleNames.length; i++) {
        if (typeof g[possibleNames[i]] === "function") {
          out[out.length] = possibleNames[i];
        }
      }
      return out;
    };
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// node_modules/call-bind-apply-helpers/applyBind.js
var require_applyBind = __commonJS({
  "node_modules/call-bind-apply-helpers/applyBind.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var actualApply = require_actualApply();
    module2.exports = function applyBind() {
      return actualApply(bind, $apply, arguments);
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var setFunctionLength = require_set_function_length();
    var $defineProperty = require_es_define_property();
    var callBindBasic = require_call_bind_apply_helpers();
    var applyBind = require_applyBind();
    module2.exports = function callBind(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength(
        func,
        1 + (adjustedLength > 0 ? adjustedLength : 0),
        true
      );
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "node_modules/which-typed-array/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBind = require_call_bind();
    var callBound = require_call_bound();
    var gOPD = require_gopd();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? globalThis : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var getPrototypeOf = Object.getPrototypeOf;
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf2(array, value) {
      for (var i = 0; i < array.length; i += 1) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    };
    var cache = { __proto__: null };
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind(descriptor.get);
        }
      });
    } else {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        var fn = arr.slice || arr.set;
        if (fn) {
          cache["$" + typedArray] = callBind(fn);
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, typedArray) {
          if (!found) {
            try {
              if ("$" + getter(value) === typedArray) {
                found = $slice(typedArray, 1);
              }
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    var trySlices = function tryAllSlices(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, name) {
          if (!found) {
            try {
              getter(value);
              found = $slice(name, 1);
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    module2.exports = function whichTypedArray(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) {
          return tag;
        }
        if (tag !== "Object") {
          return false;
        }
        return trySlices(value);
      }
      if (!gOPD) {
        return null;
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/is-typed-array/index.js
var require_is_typed_array = __commonJS({
  "node_modules/is-typed-array/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var whichTypedArray = require_which_typed_array();
    module2.exports = function isTypedArray(value) {
      return !!whichTypedArray(value);
    };
  }
});

// node_modules/util/support/types.js
var require_types = __commonJS({
  "node_modules/util/support/types.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    var isArgumentsObject = require_is_arguments();
    var isGeneratorFunction = require_is_generator_function();
    var whichTypedArray = require_which_typed_array();
    var isTypedArray = require_is_typed_array();
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    var bigIntValue;
    if (SymbolSupported) {
      symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    var symbolValue;
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports.isArgumentsObject = isArgumentsObject;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports.isPromise = isPromise;
    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray(value) || isDataView(value);
    }
    exports.isArrayBufferView = isArrayBufferView;
    function isUint8Array(value) {
      return whichTypedArray(value) === "Uint8Array";
    }
    exports.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === "Uint8ClampedArray";
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray(value) === "Uint16Array";
    }
    exports.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray(value) === "Uint32Array";
    }
    exports.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray(value) === "Int8Array";
    }
    exports.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray(value) === "Int16Array";
    }
    exports.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray(value) === "Int32Array";
    }
    exports.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray(value) === "Float32Array";
    }
    exports.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray(value) === "Float64Array";
    }
    exports.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray(value) === "BigInt64Array";
    }
    exports.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray(value) === "BigUint64Array";
    }
    exports.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports.isMap = isMap;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports.isSet = isSet;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports.isWeakSet = isWeakSet;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports.isNumberObject = isNumberObject;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports.isStringObject = isStringObject;
    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  }
});

// node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/util/support/isBufferBrowser.js"(exports, module2) {
    init_process();
    init_buffer();
    module2.exports = function isBuffer2(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module2) {
    init_process();
    init_buffer();
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/util/util.js
var require_util = __commonJS({
  "node_modules/util/util.js"(exports) {
    init_process();
    init_buffer();
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x2) {
        if (x2 === "%%") return "%";
        if (i >= len) return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (process.env.NODE_DEBUG) {
      debugEnv = process.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    var debugEnv;
    exports.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, -1);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    exports.types = require_types();
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    exports.types.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    exports.types.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    exports.types.isNativeError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require_inherits_browser();
    exports._extend = function(origin, add) {
      if (!add || !isObject(add)) return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports.callbackify = callbackify;
  }
});

// node_modules/braces/lib/utils.js
var require_utils = __commonJS({
  "node_modules/braces/lib/utils.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    exports.isInteger = (num) => {
      if (typeof num === "number") {
        return Number.isInteger(num);
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isInteger(Number(num));
      }
      return false;
    };
    exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
    exports.exceedsLimit = (min, max, step = 1, limit) => {
      if (limit === false) return false;
      if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
      return (Number(max) - Number(min)) / Number(step) >= limit;
    };
    exports.escapeNode = (block, n = 0, type) => {
      const node = block.nodes[n];
      if (!node) return;
      if (type && node.type === type || node.type === "open" || node.type === "close") {
        if (node.escaped !== true) {
          node.value = "\\" + node.value;
          node.escaped = true;
        }
      }
    };
    exports.encloseBrace = (node) => {
      if (node.type !== "brace") return false;
      if (node.commas >> 0 + node.ranges >> 0 === 0) {
        node.invalid = true;
        return true;
      }
      return false;
    };
    exports.isInvalidBrace = (block) => {
      if (block.type !== "brace") return false;
      if (block.invalid === true || block.dollar) return true;
      if (block.commas >> 0 + block.ranges >> 0 === 0) {
        block.invalid = true;
        return true;
      }
      if (block.open !== true || block.close !== true) {
        block.invalid = true;
        return true;
      }
      return false;
    };
    exports.isOpenOrClose = (node) => {
      if (node.type === "open" || node.type === "close") {
        return true;
      }
      return node.open === true || node.close === true;
    };
    exports.reduce = (nodes) => nodes.reduce((acc, node) => {
      if (node.type === "text") acc.push(node.value);
      if (node.type === "range") node.type = "text";
      return acc;
    }, []);
    exports.flatten = (...args) => {
      const result = [];
      const flat = (arr) => {
        for (let i = 0; i < arr.length; i++) {
          const ele = arr[i];
          if (Array.isArray(ele)) {
            flat(ele);
            continue;
          }
          if (ele !== void 0) {
            result.push(ele);
          }
        }
        return result;
      };
      flat(args);
      return result;
    };
  }
});

// node_modules/braces/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/braces/lib/stringify.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var utils = require_utils();
    module2.exports = (ast, options = {}) => {
      const stringify = (node, parent = {}) => {
        const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
        const invalidNode = node.invalid === true && options.escapeInvalid === true;
        let output = "";
        if (node.value) {
          if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
            return "\\" + node.value;
          }
          return node.value;
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes) {
          for (const child of node.nodes) {
            output += stringify(child);
          }
        }
        return output;
      };
      return stringify(ast);
    };
  }
});

// node_modules/is-number/index.js
var require_is_number = __commonJS({
  "node_modules/is-number/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = function(num) {
      if (typeof num === "number") {
        return num - num === 0;
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
      }
      return false;
    };
  }
});

// node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS({
  "node_modules/to-regex-range/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var isNumber = require_is_number();
    var toRegexRange = (min, max, options) => {
      if (isNumber(min) === false) {
        throw new TypeError("toRegexRange: expected the first argument to be a number");
      }
      if (max === void 0 || min === max) {
        return String(min);
      }
      if (isNumber(max) === false) {
        throw new TypeError("toRegexRange: expected the second argument to be a number.");
      }
      let opts = { relaxZeros: true, ...options };
      if (typeof opts.strictZeros === "boolean") {
        opts.relaxZeros = opts.strictZeros === false;
      }
      let relax = String(opts.relaxZeros);
      let shorthand = String(opts.shorthand);
      let capture = String(opts.capture);
      let wrap = String(opts.wrap);
      let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
      if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
        return toRegexRange.cache[cacheKey].result;
      }
      let a = Math.min(min, max);
      let b = Math.max(min, max);
      if (Math.abs(a - b) === 1) {
        let result = min + "|" + max;
        if (opts.capture) {
          return `(${result})`;
        }
        if (opts.wrap === false) {
          return result;
        }
        return `(?:${result})`;
      }
      let isPadded = hasPadding(min) || hasPadding(max);
      let state = { min, max, a, b };
      let positives = [];
      let negatives = [];
      if (isPadded) {
        state.isPadded = isPadded;
        state.maxLen = String(state.max).length;
      }
      if (a < 0) {
        let newMin = b < 0 ? Math.abs(b) : 1;
        negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
        a = state.a = 0;
      }
      if (b >= 0) {
        positives = splitToPatterns(a, b, state, opts);
      }
      state.negatives = negatives;
      state.positives = positives;
      state.result = collatePatterns(negatives, positives, opts);
      if (opts.capture === true) {
        state.result = `(${state.result})`;
      } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
        state.result = `(?:${state.result})`;
      }
      toRegexRange.cache[cacheKey] = state;
      return state.result;
    };
    function collatePatterns(neg, pos, options) {
      let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
      let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
      let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
      let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
      return subpatterns.join("|");
    }
    function splitToRanges(min, max) {
      let nines = 1;
      let zeros = 1;
      let stop = countNines(min, nines);
      let stops = /* @__PURE__ */ new Set([max]);
      while (min <= stop && stop <= max) {
        stops.add(stop);
        nines += 1;
        stop = countNines(min, nines);
      }
      stop = countZeros(max + 1, zeros) - 1;
      while (min < stop && stop <= max) {
        stops.add(stop);
        zeros += 1;
        stop = countZeros(max + 1, zeros) - 1;
      }
      stops = [...stops];
      stops.sort(compare3);
      return stops;
    }
    function rangeToPattern(start, stop, options) {
      if (start === stop) {
        return { pattern: start, count: [], digits: 0 };
      }
      let zipped = zip(start, stop);
      let digits = zipped.length;
      let pattern = "";
      let count = 0;
      for (let i = 0; i < digits; i++) {
        let [startDigit, stopDigit] = zipped[i];
        if (startDigit === stopDigit) {
          pattern += startDigit;
        } else if (startDigit !== "0" || stopDigit !== "9") {
          pattern += toCharacterClass(startDigit, stopDigit, options);
        } else {
          count++;
        }
      }
      if (count) {
        pattern += options.shorthand === true ? "\\d" : "[0-9]";
      }
      return { pattern, count: [count], digits };
    }
    function splitToPatterns(min, max, tok, options) {
      let ranges = splitToRanges(min, max);
      let tokens = [];
      let start = min;
      let prev;
      for (let i = 0; i < ranges.length; i++) {
        let max2 = ranges[i];
        let obj = rangeToPattern(String(start), String(max2), options);
        let zeros = "";
        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
          if (prev.count.length > 1) {
            prev.count.pop();
          }
          prev.count.push(obj.count[0]);
          prev.string = prev.pattern + toQuantifier(prev.count);
          start = max2 + 1;
          continue;
        }
        if (tok.isPadded) {
          zeros = padZeros(max2, tok, options);
        }
        obj.string = zeros + obj.pattern + toQuantifier(obj.count);
        tokens.push(obj);
        start = max2 + 1;
        prev = obj;
      }
      return tokens;
    }
    function filterPatterns(arr, comparison, prefix, intersection, options) {
      let result = [];
      for (let ele of arr) {
        let { string } = ele;
        if (!intersection && !contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
        if (intersection && contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
      }
      return result;
    }
    function zip(a, b) {
      let arr = [];
      for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
      return arr;
    }
    function compare3(a, b) {
      return a > b ? 1 : b > a ? -1 : 0;
    }
    function contains(arr, key, val) {
      return arr.some((ele) => ele[key] === val);
    }
    function countNines(min, len) {
      return Number(String(min).slice(0, -len) + "9".repeat(len));
    }
    function countZeros(integer, zeros) {
      return integer - integer % Math.pow(10, zeros);
    }
    function toQuantifier(digits) {
      let [start = 0, stop = ""] = digits;
      if (stop || start > 1) {
        return `{${start + (stop ? "," + stop : "")}}`;
      }
      return "";
    }
    function toCharacterClass(a, b, options) {
      return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
    }
    function hasPadding(str) {
      return /^-?(0+)\d/.test(str);
    }
    function padZeros(value, tok, options) {
      if (!tok.isPadded) {
        return value;
      }
      let diff = Math.abs(tok.maxLen - String(value).length);
      let relax = options.relaxZeros !== false;
      switch (diff) {
        case 0:
          return "";
        case 1:
          return relax ? "0?" : "0";
        case 2:
          return relax ? "0{0,2}" : "00";
        default: {
          return relax ? `0{0,${diff}}` : `0{${diff}}`;
        }
      }
    }
    toRegexRange.cache = {};
    toRegexRange.clearCache = () => toRegexRange.cache = {};
    module2.exports = toRegexRange;
  }
});

// node_modules/fill-range/index.js
var require_fill_range = __commonJS({
  "node_modules/fill-range/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var util = require_util();
    var toRegexRange = require_to_regex_range();
    var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var transform = (toNumber) => {
      return (value) => toNumber === true ? Number(value) : String(value);
    };
    var isValidValue = (value) => {
      return typeof value === "number" || typeof value === "string" && value !== "";
    };
    var isNumber = (num) => Number.isInteger(+num);
    var zeros = (input) => {
      let value = `${input}`;
      let index = -1;
      if (value[0] === "-") value = value.slice(1);
      if (value === "0") return false;
      while (value[++index] === "0") ;
      return index > 0;
    };
    var stringify = (start, end, options) => {
      if (typeof start === "string" || typeof end === "string") {
        return true;
      }
      return options.stringify === true;
    };
    var pad = (input, maxLength, toNumber) => {
      if (maxLength > 0) {
        let dash = input[0] === "-" ? "-" : "";
        if (dash) input = input.slice(1);
        input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
      }
      if (toNumber === false) {
        return String(input);
      }
      return input;
    };
    var toMaxLen = (input, maxLength) => {
      let negative = input[0] === "-" ? "-" : "";
      if (negative) {
        input = input.slice(1);
        maxLength--;
      }
      while (input.length < maxLength) input = "0" + input;
      return negative ? "-" + input : input;
    };
    var toSequence = (parts, options, maxLen2) => {
      parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      let prefix = options.capture ? "" : "?:";
      let positives = "";
      let negatives = "";
      let result;
      if (parts.positives.length) {
        positives = parts.positives.map((v) => toMaxLen(String(v), maxLen2)).join("|");
      }
      if (parts.negatives.length) {
        negatives = `-(${prefix}${parts.negatives.map((v) => toMaxLen(String(v), maxLen2)).join("|")})`;
      }
      if (positives && negatives) {
        result = `${positives}|${negatives}`;
      } else {
        result = positives || negatives;
      }
      if (options.wrap) {
        return `(${prefix}${result})`;
      }
      return result;
    };
    var toRange = (a, b, isNumbers, options) => {
      if (isNumbers) {
        return toRegexRange(a, b, { wrap: false, ...options });
      }
      let start = String.fromCharCode(a);
      if (a === b) return start;
      let stop = String.fromCharCode(b);
      return `[${start}-${stop}]`;
    };
    var toRegex = (start, end, options) => {
      if (Array.isArray(start)) {
        let wrap = options.wrap === true;
        let prefix = options.capture ? "" : "?:";
        return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
      }
      return toRegexRange(start, end, options);
    };
    var rangeError = (...args) => {
      return new RangeError("Invalid range arguments: " + util.inspect(...args));
    };
    var invalidRange = (start, end, options) => {
      if (options.strictRanges === true) throw rangeError([start, end]);
      return [];
    };
    var invalidStep = (step, options) => {
      if (options.strictRanges === true) {
        throw new TypeError(`Expected step "${step}" to be a number`);
      }
      return [];
    };
    var fillNumbers = (start, end, step = 1, options = {}) => {
      let a = Number(start);
      let b = Number(end);
      if (!Number.isInteger(a) || !Number.isInteger(b)) {
        if (options.strictRanges === true) throw rangeError([start, end]);
        return [];
      }
      if (a === 0) a = 0;
      if (b === 0) b = 0;
      let descending = a > b;
      let startString = String(start);
      let endString = String(end);
      let stepString = String(step);
      step = Math.max(Math.abs(step), 1);
      let padded = zeros(startString) || zeros(endString) || zeros(stepString);
      let maxLen2 = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
      let toNumber = padded === false && stringify(start, end, options) === false;
      let format = options.transform || transform(toNumber);
      if (options.toRegex && step === 1) {
        return toRange(toMaxLen(start, maxLen2), toMaxLen(end, maxLen2), true, options);
      }
      let parts = { negatives: [], positives: [] };
      let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        if (options.toRegex === true && step > 1) {
          push(a);
        } else {
          range.push(pad(format(a, index), maxLen2, toNumber));
        }
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return step > 1 ? toSequence(parts, options, maxLen2) : toRegex(range, null, { wrap: false, ...options });
      }
      return range;
    };
    var fillLetters = (start, end, step = 1, options = {}) => {
      if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
        return invalidRange(start, end, options);
      }
      let format = options.transform || ((val) => String.fromCharCode(val));
      let a = `${start}`.charCodeAt(0);
      let b = `${end}`.charCodeAt(0);
      let descending = a > b;
      let min = Math.min(a, b);
      let max = Math.max(a, b);
      if (options.toRegex && step === 1) {
        return toRange(min, max, false, options);
      }
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        range.push(format(a, index));
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return toRegex(range, null, { wrap: false, options });
      }
      return range;
    };
    var fill2 = (start, end, step, options = {}) => {
      if (end == null && isValidValue(start)) {
        return [start];
      }
      if (!isValidValue(start) || !isValidValue(end)) {
        return invalidRange(start, end, options);
      }
      if (typeof step === "function") {
        return fill2(start, end, 1, { transform: step });
      }
      if (isObject(step)) {
        return fill2(start, end, 0, step);
      }
      let opts = { ...options };
      if (opts.capture === true) opts.wrap = true;
      step = step || opts.step || 1;
      if (!isNumber(step)) {
        if (step != null && !isObject(step)) return invalidStep(step, opts);
        return fill2(start, end, 1, step);
      }
      if (isNumber(start) && isNumber(end)) {
        return fillNumbers(start, end, step, opts);
      }
      return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
    };
    module2.exports = fill2;
  }
});

// node_modules/braces/lib/compile.js
var require_compile = __commonJS({
  "node_modules/braces/lib/compile.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var fill2 = require_fill_range();
    var utils = require_utils();
    var compile = (ast, options = {}) => {
      const walk = (node, parent = {}) => {
        const invalidBlock = utils.isInvalidBrace(parent);
        const invalidNode = node.invalid === true && options.escapeInvalid === true;
        const invalid = invalidBlock === true || invalidNode === true;
        const prefix = options.escapeInvalid === true ? "\\" : "";
        let output = "";
        if (node.isOpen === true) {
          return prefix + node.value;
        }
        if (node.isClose === true) {
          console.log("node.isClose", prefix, node.value);
          return prefix + node.value;
        }
        if (node.type === "open") {
          return invalid ? prefix + node.value : "(";
        }
        if (node.type === "close") {
          return invalid ? prefix + node.value : ")";
        }
        if (node.type === "comma") {
          return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes && node.ranges > 0) {
          const args = utils.reduce(node.nodes);
          const range = fill2(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });
          if (range.length !== 0) {
            return args.length > 1 && range.length > 1 ? `(${range})` : range;
          }
        }
        if (node.nodes) {
          for (const child of node.nodes) {
            output += walk(child, node);
          }
        }
        return output;
      };
      return walk(ast);
    };
    module2.exports = compile;
  }
});

// node_modules/braces/lib/expand.js
var require_expand = __commonJS({
  "node_modules/braces/lib/expand.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var fill2 = require_fill_range();
    var stringify = require_stringify();
    var utils = require_utils();
    var append = (queue2 = "", stash = "", enclose = false) => {
      const result = [];
      queue2 = [].concat(queue2);
      stash = [].concat(stash);
      if (!stash.length) return queue2;
      if (!queue2.length) {
        return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
      }
      for (const item of queue2) {
        if (Array.isArray(item)) {
          for (const value of item) {
            result.push(append(value, stash, enclose));
          }
        } else {
          for (let ele of stash) {
            if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
            result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
          }
        }
      }
      return utils.flatten(result);
    };
    var expand = (ast, options = {}) => {
      const rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
      const walk = (node, parent = {}) => {
        node.queue = [];
        let p = parent;
        let q = parent.queue;
        while (p.type !== "brace" && p.type !== "root" && p.parent) {
          p = p.parent;
          q = p.queue;
        }
        if (node.invalid || node.dollar) {
          q.push(append(q.pop(), stringify(node, options)));
          return;
        }
        if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
          q.push(append(q.pop(), ["{}"]));
          return;
        }
        if (node.nodes && node.ranges > 0) {
          const args = utils.reduce(node.nodes);
          if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
            throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
          }
          let range = fill2(...args, options);
          if (range.length === 0) {
            range = stringify(node, options);
          }
          q.push(append(q.pop(), range));
          node.nodes = [];
          return;
        }
        const enclose = utils.encloseBrace(node);
        let queue2 = node.queue;
        let block = node;
        while (block.type !== "brace" && block.type !== "root" && block.parent) {
          block = block.parent;
          queue2 = block.queue;
        }
        for (let i = 0; i < node.nodes.length; i++) {
          const child = node.nodes[i];
          if (child.type === "comma" && node.type === "brace") {
            if (i === 1) queue2.push("");
            queue2.push("");
            continue;
          }
          if (child.type === "close") {
            q.push(append(q.pop(), queue2, enclose));
            continue;
          }
          if (child.value && child.type !== "open") {
            queue2.push(append(queue2.pop(), child.value));
            continue;
          }
          if (child.nodes) {
            walk(child, node);
          }
        }
        return queue2;
      };
      return utils.flatten(walk(ast));
    };
    module2.exports = expand;
  }
});

// node_modules/braces/lib/constants.js
var require_constants = __commonJS({
  "node_modules/braces/lib/constants.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = {
      MAX_LENGTH: 1e4,
      // Digits
      CHAR_0: "0",
      /* 0 */
      CHAR_9: "9",
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: "A",
      /* A */
      CHAR_LOWERCASE_A: "a",
      /* a */
      CHAR_UPPERCASE_Z: "Z",
      /* Z */
      CHAR_LOWERCASE_Z: "z",
      /* z */
      CHAR_LEFT_PARENTHESES: "(",
      /* ( */
      CHAR_RIGHT_PARENTHESES: ")",
      /* ) */
      CHAR_ASTERISK: "*",
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: "&",
      /* & */
      CHAR_AT: "@",
      /* @ */
      CHAR_BACKSLASH: "\\",
      /* \ */
      CHAR_BACKTICK: "`",
      /* ` */
      CHAR_CARRIAGE_RETURN: "\r",
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: "^",
      /* ^ */
      CHAR_COLON: ":",
      /* : */
      CHAR_COMMA: ",",
      /* , */
      CHAR_DOLLAR: "$",
      /* . */
      CHAR_DOT: ".",
      /* . */
      CHAR_DOUBLE_QUOTE: '"',
      /* " */
      CHAR_EQUAL: "=",
      /* = */
      CHAR_EXCLAMATION_MARK: "!",
      /* ! */
      CHAR_FORM_FEED: "\f",
      /* \f */
      CHAR_FORWARD_SLASH: "/",
      /* / */
      CHAR_HASH: "#",
      /* # */
      CHAR_HYPHEN_MINUS: "-",
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: "<",
      /* < */
      CHAR_LEFT_CURLY_BRACE: "{",
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: "[",
      /* [ */
      CHAR_LINE_FEED: "\n",
      /* \n */
      CHAR_NO_BREAK_SPACE: "\xA0",
      /* \u00A0 */
      CHAR_PERCENT: "%",
      /* % */
      CHAR_PLUS: "+",
      /* + */
      CHAR_QUESTION_MARK: "?",
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: ">",
      /* > */
      CHAR_RIGHT_CURLY_BRACE: "}",
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: "]",
      /* ] */
      CHAR_SEMICOLON: ";",
      /* ; */
      CHAR_SINGLE_QUOTE: "'",
      /* ' */
      CHAR_SPACE: " ",
      /*   */
      CHAR_TAB: "	",
      /* \t */
      CHAR_UNDERSCORE: "_",
      /* _ */
      CHAR_VERTICAL_LINE: "|",
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
      /* \uFEFF */
    };
  }
});

// node_modules/braces/lib/parse.js
var require_parse = __commonJS({
  "node_modules/braces/lib/parse.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var stringify = require_stringify();
    var {
      MAX_LENGTH,
      CHAR_BACKSLASH,
      /* \ */
      CHAR_BACKTICK,
      /* ` */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_RIGHT_SQUARE_BRACKET,
      /* ] */
      CHAR_DOUBLE_QUOTE,
      /* " */
      CHAR_SINGLE_QUOTE,
      /* ' */
      CHAR_NO_BREAK_SPACE,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE
    } = require_constants();
    var parse = (input, options = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      const opts = options || {};
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      if (input.length > max) {
        throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
      }
      const ast = { type: "root", input, nodes: [] };
      const stack = [ast];
      let block = ast;
      let prev = ast;
      let brackets = 0;
      const length = input.length;
      let index = 0;
      let depth = 0;
      let value;
      const advance = () => input[index++];
      const push = (node) => {
        if (node.type === "text" && prev.type === "dot") {
          prev.type = "text";
        }
        if (prev && prev.type === "text" && node.type === "text") {
          prev.value += node.value;
          return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
      };
      push({ type: "bos" });
      while (index < length) {
        block = stack[stack.length - 1];
        value = advance();
        if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
          continue;
        }
        if (value === CHAR_BACKSLASH) {
          push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
          continue;
        }
        if (value === CHAR_RIGHT_SQUARE_BRACKET) {
          push({ type: "text", value: "\\" + value });
          continue;
        }
        if (value === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          let next;
          while (index < length && (next = advance())) {
            value += next;
            if (next === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              continue;
            }
            if (next === CHAR_BACKSLASH) {
              value += advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              brackets--;
              if (brackets === 0) {
                break;
              }
            }
          }
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_PARENTHESES) {
          block = push({ type: "paren", nodes: [] });
          stack.push(block);
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_RIGHT_PARENTHESES) {
          if (block.type !== "paren") {
            push({ type: "text", value });
            continue;
          }
          block = stack.pop();
          push({ type: "text", value });
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
          const open = value;
          let next;
          if (options.keepQuotes !== true) {
            value = "";
          }
          while (index < length && (next = advance())) {
            if (next === CHAR_BACKSLASH) {
              value += next + advance();
              continue;
            }
            if (next === open) {
              if (options.keepQuotes === true) value += next;
              break;
            }
            value += next;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_CURLY_BRACE) {
          depth++;
          const dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
          const brace = {
            type: "brace",
            open: true,
            close: false,
            dollar,
            depth,
            commas: 0,
            ranges: 0,
            nodes: []
          };
          block = push(brace);
          stack.push(block);
          push({ type: "open", value });
          continue;
        }
        if (value === CHAR_RIGHT_CURLY_BRACE) {
          if (block.type !== "brace") {
            push({ type: "text", value });
            continue;
          }
          const type = "close";
          block = stack.pop();
          block.close = true;
          push({ type, value });
          depth--;
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_COMMA && depth > 0) {
          if (block.ranges > 0) {
            block.ranges = 0;
            const open = block.nodes.shift();
            block.nodes = [open, { type: "text", value: stringify(block) }];
          }
          push({ type: "comma", value });
          block.commas++;
          continue;
        }
        if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
          const siblings = block.nodes;
          if (depth === 0 || siblings.length === 0) {
            push({ type: "text", value });
            continue;
          }
          if (prev.type === "dot") {
            block.range = [];
            prev.value += value;
            prev.type = "range";
            if (block.nodes.length !== 3 && block.nodes.length !== 5) {
              block.invalid = true;
              block.ranges = 0;
              prev.type = "text";
              continue;
            }
            block.ranges++;
            block.args = [];
            continue;
          }
          if (prev.type === "range") {
            siblings.pop();
            const before = siblings[siblings.length - 1];
            before.value += prev.value + value;
            prev = before;
            block.ranges--;
            continue;
          }
          push({ type: "dot", value });
          continue;
        }
        push({ type: "text", value });
      }
      do {
        block = stack.pop();
        if (block.type !== "root") {
          block.nodes.forEach((node) => {
            if (!node.nodes) {
              if (node.type === "open") node.isOpen = true;
              if (node.type === "close") node.isClose = true;
              if (!node.nodes) node.type = "text";
              node.invalid = true;
            }
          });
          const parent = stack[stack.length - 1];
          const index2 = parent.nodes.indexOf(block);
          parent.nodes.splice(index2, 1, ...block.nodes);
        }
      } while (stack.length > 0);
      push({ type: "eos" });
      return ast;
    };
    module2.exports = parse;
  }
});

// node_modules/braces/index.js
var require_braces = __commonJS({
  "node_modules/braces/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var stringify = require_stringify();
    var compile = require_compile();
    var expand = require_expand();
    var parse = require_parse();
    var braces = (input, options = {}) => {
      let output = [];
      if (Array.isArray(input)) {
        for (const pattern of input) {
          const result = braces.create(pattern, options);
          if (Array.isArray(result)) {
            output.push(...result);
          } else {
            output.push(result);
          }
        }
      } else {
        output = [].concat(braces.create(input, options));
      }
      if (options && options.expand === true && options.nodupes === true) {
        output = [...new Set(output)];
      }
      return output;
    };
    braces.parse = (input, options = {}) => parse(input, options);
    braces.stringify = (input, options = {}) => {
      if (typeof input === "string") {
        return stringify(braces.parse(input, options), options);
      }
      return stringify(input, options);
    };
    braces.compile = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      return compile(input, options);
    };
    braces.expand = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      let result = expand(input, options);
      if (options.noempty === true) {
        result = result.filter(Boolean);
      }
      if (options.nodupes === true) {
        result = [...new Set(result)];
      }
      return result;
    };
    braces.create = (input, options = {}) => {
      if (input === "" || input.length < 3) {
        return [input];
      }
      return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
    };
    module2.exports = braces;
  }
});

// node_modules/path-browserify/index.js
var require_path_browserify = __commonJS({
  "node_modules/path-browserify/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    function assertPath(path) {
      if (typeof path !== "string") {
        throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
      }
    }
    function normalizeStringPosix(path, allowAboveRoot) {
      var res = "";
      var lastSegmentLength = 0;
      var lastSlash = -1;
      var dots = 0;
      var code;
      for (var i = 0; i <= path.length; ++i) {
        if (i < path.length)
          code = path.charCodeAt(i);
        else if (code === 47)
          break;
        else
          code = 47;
        if (code === 47) {
          if (lastSlash === i - 1 || dots === 1) {
          } else if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  if (lastSlashIndex === -1) {
                    res = "";
                    lastSegmentLength = 0;
                  } else {
                    res = res.slice(0, lastSlashIndex);
                    lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                  }
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "";
                lastSegmentLength = 0;
                lastSlash = i;
                dots = 0;
                continue;
              }
            }
            if (allowAboveRoot) {
              if (res.length > 0)
                res += "/..";
              else
                res = "..";
              lastSegmentLength = 2;
            }
          } else {
            if (res.length > 0)
              res += "/" + path.slice(lastSlash + 1, i);
            else
              res = path.slice(lastSlash + 1, i);
            lastSegmentLength = i - lastSlash - 1;
          }
          lastSlash = i;
          dots = 0;
        } else if (code === 46 && dots !== -1) {
          ++dots;
        } else {
          dots = -1;
        }
      }
      return res;
    }
    function _format(sep, pathObject) {
      var dir = pathObject.dir || pathObject.root;
      var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
      if (!dir) {
        return base;
      }
      if (dir === pathObject.root) {
        return dir + base;
      }
      return dir + sep + base;
    }
    var posix = {
      // path.resolve([from ...], to)
      resolve: function resolve() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd2;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path;
          if (i >= 0)
            path = arguments[i];
          else {
            if (cwd2 === void 0)
              cwd2 = process.cwd();
            path = cwd2;
          }
          assertPath(path);
          if (path.length === 0) {
            continue;
          }
          resolvedPath = path + "/" + resolvedPath;
          resolvedAbsolute = path.charCodeAt(0) === 47;
        }
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
          if (resolvedPath.length > 0)
            return "/" + resolvedPath;
          else
            return "/";
        } else if (resolvedPath.length > 0) {
          return resolvedPath;
        } else {
          return ".";
        }
      },
      normalize: function normalize(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var isAbsolute = path.charCodeAt(0) === 47;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47;
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = ".";
        if (path.length > 0 && trailingSeparator) path += "/";
        if (isAbsolute) return "/" + path;
        return path;
      },
      isAbsolute: function isAbsolute(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47;
      },
      join: function join() {
        if (arguments.length === 0)
          return ".";
        var joined;
        for (var i = 0; i < arguments.length; ++i) {
          var arg = arguments[i];
          assertPath(arg);
          if (arg.length > 0) {
            if (joined === void 0)
              joined = arg;
            else
              joined += "/" + arg;
          }
        }
        if (joined === void 0)
          return ".";
        return posix.normalize(joined);
      },
      relative: function relative(from2, to) {
        assertPath(from2);
        assertPath(to);
        if (from2 === to) return "";
        from2 = posix.resolve(from2);
        to = posix.resolve(to);
        if (from2 === to) return "";
        var fromStart = 1;
        for (; fromStart < from2.length; ++fromStart) {
          if (from2.charCodeAt(fromStart) !== 47)
            break;
        }
        var fromEnd = from2.length;
        var fromLen = fromEnd - fromStart;
        var toStart = 1;
        for (; toStart < to.length; ++toStart) {
          if (to.charCodeAt(toStart) !== 47)
            break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for (; i <= length; ++i) {
          if (i === length) {
            if (toLen > length) {
              if (to.charCodeAt(toStart + i) === 47) {
                return to.slice(toStart + i + 1);
              } else if (i === 0) {
                return to.slice(toStart + i);
              }
            } else if (fromLen > length) {
              if (from2.charCodeAt(fromStart + i) === 47) {
                lastCommonSep = i;
              } else if (i === 0) {
                lastCommonSep = 0;
              }
            }
            break;
          }
          var fromCode = from2.charCodeAt(fromStart + i);
          var toCode = to.charCodeAt(toStart + i);
          if (fromCode !== toCode)
            break;
          else if (fromCode === 47)
            lastCommonSep = i;
        }
        var out = "";
        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
          if (i === fromEnd || from2.charCodeAt(i) === 47) {
            if (out.length === 0)
              out += "..";
            else
              out += "/..";
          }
        }
        if (out.length > 0)
          return out + to.slice(toStart + lastCommonSep);
        else {
          toStart += lastCommonSep;
          if (to.charCodeAt(toStart) === 47)
            ++toStart;
          return to.slice(toStart);
        }
      },
      _makeLong: function _makeLong(path) {
        return path;
      },
      dirname: function dirname(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var code = path.charCodeAt(0);
        var hasRoot = code === 47;
        var end = -1;
        var matchedSlash = true;
        for (var i = path.length - 1; i >= 1; --i) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              end = i;
              break;
            }
          } else {
            matchedSlash = false;
          }
        }
        if (end === -1) return hasRoot ? "/" : ".";
        if (hasRoot && end === 1) return "//";
        return path.slice(0, end);
      },
      basename: function basename(path, ext) {
        if (ext !== void 0 && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
        assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
          if (ext.length === path.length && ext === path) return "";
          var extIdx = ext.length - 1;
          var firstNonSlashEnd = -1;
          for (i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else {
              if (firstNonSlashEnd === -1) {
                matchedSlash = false;
                firstNonSlashEnd = i + 1;
              }
              if (extIdx >= 0) {
                if (code === ext.charCodeAt(extIdx)) {
                  if (--extIdx === -1) {
                    end = i;
                  }
                } else {
                  extIdx = -1;
                  end = firstNonSlashEnd;
                }
              }
            }
          }
          if (start === end) end = firstNonSlashEnd;
          else if (end === -1) end = path.length;
          return path.slice(start, end);
        } else {
          for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
          }
          if (end === -1) return "";
          return path.slice(start, end);
        }
      },
      extname: function extname(path) {
        assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var preDotState = 0;
        for (var i = path.length - 1; i >= 0; --i) {
          var code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          return "";
        }
        return path.slice(startDot, end);
      },
      format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") {
          throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        }
        return _format("/", pathObject);
      },
      parse: function parse(path) {
        assertPath(path);
        var ret = { root: "", dir: "", base: "", ext: "", name: "" };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47;
        var start;
        if (isAbsolute) {
          ret.root = "/";
          start = 1;
        } else {
          start = 0;
        }
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        var preDotState = 0;
        for (; i >= start; --i) {
          code = path.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          if (end !== -1) {
            if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);
            else ret.base = ret.name = path.slice(startPart, end);
          }
        } else {
          if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
          } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
          }
          ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute) ret.dir = "/";
        return ret;
      },
      sep: "/",
      delimiter: ":",
      win32: null,
      posix: null
    };
    posix.posix = posix;
    module2.exports = posix;
  }
});

// node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/picomatch/lib/constants.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var path = require_path_browserify();
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      // regular expressions
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      // Replace globs with equivalent patterns to reduce parsing time.
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      // Digits
      CHAR_0: 48,
      /* 0 */
      CHAR_9: 57,
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: 65,
      /* A */
      CHAR_LOWERCASE_A: 97,
      /* a */
      CHAR_UPPERCASE_Z: 90,
      /* Z */
      CHAR_LOWERCASE_Z: 122,
      /* z */
      CHAR_LEFT_PARENTHESES: 40,
      /* ( */
      CHAR_RIGHT_PARENTHESES: 41,
      /* ) */
      CHAR_ASTERISK: 42,
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: 38,
      /* & */
      CHAR_AT: 64,
      /* @ */
      CHAR_BACKWARD_SLASH: 92,
      /* \ */
      CHAR_CARRIAGE_RETURN: 13,
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: 94,
      /* ^ */
      CHAR_COLON: 58,
      /* : */
      CHAR_COMMA: 44,
      /* , */
      CHAR_DOT: 46,
      /* . */
      CHAR_DOUBLE_QUOTE: 34,
      /* " */
      CHAR_EQUAL: 61,
      /* = */
      CHAR_EXCLAMATION_MARK: 33,
      /* ! */
      CHAR_FORM_FEED: 12,
      /* \f */
      CHAR_FORWARD_SLASH: 47,
      /* / */
      CHAR_GRAVE_ACCENT: 96,
      /* ` */
      CHAR_HASH: 35,
      /* # */
      CHAR_HYPHEN_MINUS: 45,
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: 60,
      /* < */
      CHAR_LEFT_CURLY_BRACE: 123,
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: 91,
      /* [ */
      CHAR_LINE_FEED: 10,
      /* \n */
      CHAR_NO_BREAK_SPACE: 160,
      /* \u00A0 */
      CHAR_PERCENT: 37,
      /* % */
      CHAR_PLUS: 43,
      /* + */
      CHAR_QUESTION_MARK: 63,
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      /* > */
      CHAR_RIGHT_CURLY_BRACE: 125,
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      /* ] */
      CHAR_SEMICOLON: 59,
      /* ; */
      CHAR_SINGLE_QUOTE: 39,
      /* ' */
      CHAR_SPACE: 32,
      /*   */
      CHAR_TAB: 9,
      /* \t */
      CHAR_UNDERSCORE: 95,
      /* _ */
      CHAR_VERTICAL_LINE: 124,
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      /* \uFEFF */
      SEP: path.sep,
      /**
       * Create EXTGLOB_CHARS
       */
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      /**
       * Create GLOB_CHARS
       */
      globChars(win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/picomatch/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    var path = require_path_browserify();
    var win32 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants2();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win32 === true || path.sep === "\\";
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1) return input;
      if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({
  "node_modules/picomatch/lib/scan.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var utils = require_utils2();
    var {
      CHAR_ASTERISK,
      /* * */
      CHAR_AT,
      /* @ */
      CHAR_BACKWARD_SLASH,
      /* \ */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_EXCLAMATION_MARK,
      /* ! */
      CHAR_FORWARD_SLASH,
      /* / */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_PLUS,
      /* + */
      CHAR_QUESTION_MARK,
      /* ? */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_RIGHT_SQUARE_BRACKET
      /* ] */
    } = require_constants2();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true) continue;
          if (prev === CHAR_DOT && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob) glob = utils.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value = input.slice(n, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value !== "") {
            parts.push(value);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value = input.slice(prevIndex + 1);
          parts.push(value);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module2.exports = scan;
  }
});

// node_modules/picomatch/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/picomatch/lib/parse.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var constants = require_constants2();
    var utils = require_utils2();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value = `[${args.join("-")}]`;
      try {
        new RegExp(value);
      } catch (ex) {
        return args.map((v) => utils.escapeRegex(v)).join("..");
      }
      return value;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win32 = utils.isWindows(options);
      const PLATFORM_CHARS = constants.globChars(win32);
      const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n = 1) => input[state.index + n];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value2 = "", num = 0) => {
        state.consumed += value2;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output) append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value2) => {
        const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
        push({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse(rest, { ...options, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push({ type: "paren", extglob: true, value, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
          if (first === "\\") {
            backslashes = true;
            return m;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m : `\\${m}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m) => {
              return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value = advance();
        if (value === "\0") {
          continue;
        }
        if (value === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value += "\\";
            push({ type: "text", value });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value += "\\";
            }
          }
          if (opts.unescape === true) {
            value = advance();
          } else {
            value += advance();
          }
          if (state.brackets === 0) {
            push({ type: "text", value });
            continue;
          }
        }
        if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix = POSIX_REGEX_SOURCE[rest2];
                if (posix) {
                  prev.value = pre + posix;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
            value = `\\${value}`;
          }
          if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
            value = `\\${value}`;
          }
          if (opts.posix === true && value === "!" && prev.value === "[") {
            value = "^";
          }
          prev.value += value;
          append({ value });
          continue;
        }
        if (state.quotes === 1 && value !== '"') {
          value = utils.escapeRegex(value);
          prev.value += value;
          append({ value });
          continue;
        }
        if (value === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push({ type: "text", value });
          }
          continue;
        }
        if (value === "(") {
          increment("parens");
          push({ type: "paren", value });
          continue;
        }
        if (value === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value = `\\${value}`;
          } else {
            increment("brackets");
          }
          push({ type: "bracket", value });
          continue;
        }
        if (value === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value = `/${value}`;
          }
          prev.value += value;
          append({ value });
          if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push(open);
          continue;
        }
        if (value === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push({ type: "text", value, output: value });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range.unshift(arr[i].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value = output = "\\}";
            state.output = out;
            for (const t of toks) {
              state.output += t.output || t.value;
            }
          }
          push({ type: "brace", value, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === ",") {
          let output = value;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push({ type: "comma", value, output });
          continue;
        }
        if (value === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push({ type: "slash", value, output: SLASH_LITERAL });
          continue;
        }
        if (value === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".") prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value;
            prev.value += value;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push({ type: "text", value, output: DOT_LITERAL });
            continue;
          }
          push({ type: "dot", value, output: DOT_LITERAL });
          continue;
        }
        if (value === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value;
            if (next === "<" && !utils.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value}`;
            }
            push({ type: "text", value, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push({ type: "qmark", value, output: QMARK_NO_DOT });
            continue;
          }
          push({ type: "qmark", value, output: QMARK });
          continue;
        }
        if (value === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push({ type: "plus", value, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push({ type: "plus", value });
            continue;
          }
          push({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push({ type: "at", extglob: true, value, output: "" });
            continue;
          }
          push({ type: "text", value });
          continue;
        }
        if (value !== "*") {
          if (value === "$" || value === "^") {
            value = `\\${value}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value += match[0];
            state.index += match[0].length;
          }
          push({ type: "text", value });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push({ type: "star", value, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push({ type: "star", value, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value;
          state.output += prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        const token = { type: "star", value, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value;
          push(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse.fastpaths = (input, options) => {
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win32 = utils.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants.globChars(win32);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true) return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match) return;
            const source2 = create(match[1]);
            if (!source2) return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module2.exports = parse;
  }
});

// node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS({
  "node_modules/picomatch/lib/picomatch.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var path = require_path_browserify();
    var scan = require_scan();
    var parse = require_parse2();
    var utils = require_utils2();
    var constants = require_constants2();
    var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2) return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix = utils.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
        const result = { glob, state, regex, posix, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format = opts.format || (posix ? utils.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format ? format(input) : input;
      if (match === false) {
        output = format ? format(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern)) return pattern.map((p) => picomatch.parse(p, options));
      return parse(pattern, { ...options, fastpaths: false });
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true) throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants;
    module2.exports = picomatch;
  }
});

// node_modules/picomatch/index.js
var require_picomatch2 = __commonJS({
  "node_modules/picomatch/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    module2.exports = require_picomatch();
  }
});

// node_modules/micromatch/index.js
var require_micromatch = __commonJS({
  "node_modules/micromatch/index.js"(exports, module2) {
    "use strict";
    init_process();
    init_buffer();
    var util = require_util();
    var braces = require_braces();
    var picomatch = require_picomatch2();
    var utils = require_utils2();
    var isEmptyString = (v) => v === "" || v === "./";
    var hasBraces = (v) => {
      const index = v.indexOf("{");
      return index > -1 && v.indexOf("}", index) > -1;
    };
    var micromatch = (list, patterns, options) => {
      patterns = [].concat(patterns);
      list = [].concat(list);
      let omit = /* @__PURE__ */ new Set();
      let keep = /* @__PURE__ */ new Set();
      let items = /* @__PURE__ */ new Set();
      let negatives = 0;
      let onResult = (state) => {
        items.add(state.output);
        if (options && options.onResult) {
          options.onResult(state);
        }
      };
      for (let i = 0; i < patterns.length; i++) {
        let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
        let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
        if (negated) negatives++;
        for (let item of list) {
          let matched = isMatch(item, true);
          let match = negated ? !matched.isMatch : matched.isMatch;
          if (!match) continue;
          if (negated) {
            omit.add(matched.output);
          } else {
            omit.delete(matched.output);
            keep.add(matched.output);
          }
        }
      }
      let result = negatives === patterns.length ? [...items] : [...keep];
      let matches2 = result.filter((item) => !omit.has(item));
      if (options && matches2.length === 0) {
        if (options.failglob === true) {
          throw new Error(`No matches found for "${patterns.join(", ")}"`);
        }
        if (options.nonull === true || options.nullglob === true) {
          return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
        }
      }
      return matches2;
    };
    micromatch.match = micromatch;
    micromatch.matcher = (pattern, options) => picomatch(pattern, options);
    micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    micromatch.any = micromatch.isMatch;
    micromatch.not = (list, patterns, options = {}) => {
      patterns = [].concat(patterns).map(String);
      let result = /* @__PURE__ */ new Set();
      let items = [];
      let onResult = (state) => {
        if (options.onResult) options.onResult(state);
        items.push(state.output);
      };
      let matches2 = new Set(micromatch(list, patterns, { ...options, onResult }));
      for (let item of items) {
        if (!matches2.has(item)) {
          result.add(item);
        }
      }
      return [...result];
    };
    micromatch.contains = (str, pattern, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      if (Array.isArray(pattern)) {
        return pattern.some((p) => micromatch.contains(str, p, options));
      }
      if (typeof pattern === "string") {
        if (isEmptyString(str) || isEmptyString(pattern)) {
          return false;
        }
        if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
          return true;
        }
      }
      return micromatch.isMatch(str, pattern, { ...options, contains: true });
    };
    micromatch.matchKeys = (obj, patterns, options) => {
      if (!utils.isObject(obj)) {
        throw new TypeError("Expected the first argument to be an object");
      }
      let keys = micromatch(Object.keys(obj), patterns, options);
      let res = {};
      for (let key of keys) res[key] = obj[key];
      return res;
    };
    micromatch.some = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (items.some((item) => isMatch(item))) {
          return true;
        }
      }
      return false;
    };
    micromatch.every = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (!items.every((item) => isMatch(item))) {
          return false;
        }
      }
      return true;
    };
    micromatch.all = (str, patterns, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      return [].concat(patterns).every((p) => picomatch(p, options)(str));
    };
    micromatch.capture = (glob, input, options) => {
      let posix = utils.isWindows(options);
      let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
      let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
      if (match) {
        return match.slice(1).map((v) => v === void 0 ? "" : v);
      }
    };
    micromatch.makeRe = (...args) => picomatch.makeRe(...args);
    micromatch.scan = (...args) => picomatch.scan(...args);
    micromatch.parse = (patterns, options) => {
      let res = [];
      for (let pattern of [].concat(patterns || [])) {
        for (let str of braces(String(pattern), options)) {
          res.push(picomatch.parse(str, options));
        }
      }
      return res;
    };
    micromatch.braces = (pattern, options) => {
      if (typeof pattern !== "string") throw new TypeError("Expected a string");
      if (options && options.nobrace === true || !hasBraces(pattern)) {
        return [pattern];
      }
      return braces(pattern, options);
    };
    micromatch.braceExpand = (pattern, options) => {
      if (typeof pattern !== "string") throw new TypeError("Expected a string");
      return micromatch.braces(pattern, { ...options, expand: true });
    };
    micromatch.hasBraces = hasBraces;
    module2.exports = micromatch;
  }
});

// node_modules/semver/internal/constants.js
var require_constants3 = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module2) {
    init_process();
    init_buffer();
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module2) {
    init_process();
    init_buffer();
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module2) {
    init_process();
    init_buffer();
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants3();
    var debug = require_debug();
    exports = module2.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var safeSrc = exports.safeSrc = [];
    var t = exports.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      safeSrc[index] = safe;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("COERCERTLFULL", src[t.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module2) {
    init_process();
    init_buffer();
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module2) {
    init_process();
    init_buffer();
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module2) {
    init_process();
    init_buffer();
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants3();
    var { safeRe: re, safeSrc: src, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof _SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("build compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release2, identifier, identifierBase) {
        if (release2.startsWith("pre")) {
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (identifier) {
            const r = new RegExp(`^${this.options.loose ? src[t.PRERELEASELOOSE] : src[t.PRERELEASE]}$`);
            const match = `-${identifier}`.match(r);
            if (!match || match[1] !== identifier) {
              throw new Error(`invalid identifier: ${identifier}`);
            }
          }
        }
        switch (release2) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "release":
            if (this.prerelease.length === 0) {
              throw new Error(`version ${this.raw} is not a prerelease`);
            }
            this.prerelease.length = 0;
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release2}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse3 = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var parse = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module2) {
    init_process();
    init_buffer();
    var parse = require_parse3();
    var valid2 = (version2, options) => {
      const v = parse(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid2;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module2) {
    init_process();
    init_buffer();
    var parse = require_parse3();
    var clean2 = (version2, options) => {
      const s = parse(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean2;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var inc = (version2, release2, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version2 instanceof SemVer ? version2.version : version2,
          options
        ).inc(release2, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module2) {
    init_process();
    init_buffer();
    var parse = require_parse3();
    var diff = (version1, version2) => {
      const v1 = parse(version1, null, true);
      const v2 = parse(version2, null, true);
      const comparison = v1.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v2;
      const lowVersion = v1Higher ? v2 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (lowVersion.compareMain(highVersion) === 0) {
          if (lowVersion.minor && !lowVersion.patch) {
            return "minor";
          }
          return "patch";
        }
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v2.major) {
        return prefix + "major";
      }
      if (v1.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module2) {
    init_process();
    init_buffer();
    var parse = require_parse3();
    var prerelease = (version2, options) => {
      const parsed = parse(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var compare3 = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare3;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var rcompare = (a, b, loose) => compare3(b, a, loose);
    module2.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var compareLoose = (a, b) => compare3(a, b, true);
    module2.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module2) {
    init_process();
    init_buffer();
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module2) {
    init_process();
    init_buffer();
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var gt2 = (a, b, loose) => compare3(a, b, loose) > 0;
    module2.exports = gt2;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var lt2 = (a, b, loose) => compare3(a, b, loose) < 0;
    module2.exports = lt2;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var eq2 = (a, b, loose) => compare3(a, b, loose) === 0;
    module2.exports = eq2;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var neq = (a, b, loose) => compare3(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var gte2 = (a, b, loose) => compare3(a, b, loose) >= 0;
    module2.exports = gte2;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module2) {
    init_process();
    init_buffer();
    var compare3 = require_compare();
    var lte2 = (a, b, loose) => compare3(a, b, loose) <= 0;
    module2.exports = lte2;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module2) {
    init_process();
    init_buffer();
    var eq2 = require_eq();
    var neq = require_neq();
    var gt2 = require_gt();
    var gte2 = require_gte();
    var lt2 = require_lt();
    var lte2 = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq2(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt2(a, b, loose);
        case ">=":
          return gte2(a, b, loose);
        case "<":
          return lt2(a, b, loose);
        case "<=":
          return lte2(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var parse = require_parse3();
    var { safeRe: re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    };
    module2.exports = coerce;
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports, module2) {
    init_process();
    init_buffer();
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module2.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range2 = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module2) {
    init_process();
    init_buffer();
    var SPACE_CHARACTERS = /\s+/g;
    var Range26 = class _Range {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof _Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i = 0; i < this.set.length; i++) {
            if (i > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range26;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants3();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from2, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from2 = "";
      } else if (isX(fm)) {
        from2 = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from2 = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from2 = `>=${from2}`;
      } else {
        from2 = `>=${from2}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from2} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module2) {
    init_process();
    init_buffer();
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range26(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range26(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range26 = require_range2();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module2) {
    init_process();
    init_buffer();
    var Range26 = require_range2();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range26(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module2) {
    init_process();
    init_buffer();
    var Range26 = require_range2();
    var toComparators = (range, options) => new Range26(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var Range26 = require_range2();
    var maxSatisfying = (versions2, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range26(range, options);
      } catch (er) {
        return null;
      }
      versions2.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var Range26 = require_range2();
    var minSatisfying = (versions2, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range26(range, options);
      } catch (er) {
        return null;
      }
      versions2.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var Range26 = require_range2();
    var gt2 = require_gt();
    var minVersion = (range, loose) => {
      range = new Range26(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!setMin || gt2(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt2(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module2) {
    init_process();
    init_buffer();
    var Range26 = require_range2();
    var validRange = (range, options) => {
      try {
        return new Range26(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module2) {
    init_process();
    init_buffer();
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range26 = require_range2();
    var satisfies = require_satisfies();
    var gt2 = require_gt();
    var lt2 = require_lt();
    var lte2 = require_lte();
    var gte2 = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range26(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt2;
          ltefn = lte2;
          ltfn = lt2;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt2;
          ltefn = gte2;
          ltfn = gt2;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module2) {
    init_process();
    init_buffer();
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module2.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module2) {
    init_process();
    init_buffer();
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module2.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module2) {
    init_process();
    init_buffer();
    var Range26 = require_range2();
    var intersects = (r1, r2, options) => {
      r1 = new Range26(r1, options);
      r2 = new Range26(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module2) {
    init_process();
    init_buffer();
    var satisfies = require_satisfies();
    var compare3 = require_compare();
    module2.exports = (versions2, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions2.sort((a, b) => compare3(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module2) {
    init_process();
    init_buffer();
    var Range26 = require_range2();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare3 = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range26(sub, options);
      dom = new Range26(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt2, lt2;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt2 = higherGT(gt2, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt2 = lowerLT(lt2, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt2 && lt2) {
        gtltComp = compare3(gt2.semver, lt2.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt2.operator !== "<=")) {
          return null;
        }
      }
      for (const eq2 of eqSet) {
        if (gt2 && !satisfies(eq2, String(gt2), options)) {
          return null;
        }
        if (lt2 && !satisfies(eq2, String(lt2), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq2, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
      let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt2) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt2, c, options);
            if (higher === c && higher !== gt2) {
              return false;
            }
          } else if (gt2.operator === ">=" && !satisfies(gt2.semver, String(c), options)) {
            return false;
          }
        }
        if (lt2) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt2, c, options);
            if (lower === c && lower !== lt2) {
              return false;
            }
          } else if (lt2.operator === "<=" && !satisfies(lt2.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt2 || gt2) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt2 && hasDomLT && !lt2 && gtltComp !== 0) {
        return false;
      }
      if (lt2 && hasDomGT && !gt2 && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare3(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare3(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports, module2) {
    init_process();
    init_buffer();
    var internalRe = require_re();
    var constants = require_constants3();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse = require_parse3();
    var valid2 = require_valid();
    var clean2 = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare3 = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt2 = require_gt();
    var lt2 = require_lt();
    var eq2 = require_eq();
    var neq = require_neq();
    var gte2 = require_gte();
    var lte2 = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range26 = require_range2();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse,
      valid: valid2,
      clean: clean2,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare: compare3,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt: gt2,
      lt: lt2,
      eq: eq2,
      neq,
      gte: gte2,
      lte: lte2,
      cmp,
      coerce,
      Comparator,
      Range: Range26,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/jclass/index.js
var require_jclass = __commonJS({
  "node_modules/jclass/index.js"(exports, module2) {
    init_process();
    init_buffer();
    (function(factory) {
      if (typeof define == "function" && define.amd) {
        define([], factory);
      } else if (typeof exports == "object") {
        exports = factory();
        if (typeof module2 == "object") {
          module2.exports = exports;
        }
      } else if (window) {
        window.JClass = factory();
      } else if (typeof console == "object" && console.error instanceof Function) {
        console.error("cannot determine environment");
      }
    })(function() {
      var isFn = function(obj) {
        return obj instanceof Function;
      };
      var extend = function(target) {
        var sources = Array.prototype.slice.call(arguments, 1);
        for (var i in sources) {
          var source = sources[i];
          if (typeof source != "object") {
            continue;
          }
          for (var key in source) {
            target[key] = source[key];
          }
        }
        return target;
      };
      var defaultOptions = {
        // internal object for indicating that class objects don't have a class object themselves,
        // may not be used by users
        _isClassObject: false
      };
      var initializing = false;
      var BaseClass = function() {
      };
      BaseClass._subClasses = [];
      BaseClass.prototype.init = function() {
      };
      BaseClass._extend = function(instanceMembers, classMembers, options) {
        if (instanceMembers === void 0) {
          instanceMembers = {};
        }
        if (classMembers === void 0) {
          classMembers = {};
        }
        if (options === void 0) {
          options = {};
        }
        options = extend({}, defaultOptions, options);
        var JClass = function() {
          if (initializing) {
            return;
          }
          this._class = JClass;
          if (this.init instanceof Function) {
            this.init.apply(this, arguments);
          }
        };
        var SuperClass = this;
        initializing = true;
        var prototype = new SuperClass();
        initializing = false;
        var superPrototype = SuperClass.prototype;
        JClass.prototype = prototype;
        JClass.prototype.constructor = JClass;
        JClass._superClass = SuperClass;
        JClass._subClasses = [];
        SuperClass._subClasses.push(JClass);
        JClass._extend = SuperClass._extend;
        JClass._extends = function(target) {
          if (this._superClass == BaseClass) {
            return false;
          }
          if (target == this._superClass || target == BaseClass) {
            return true;
          }
          return this._superClass._extends(target);
        };
        for (var key in instanceMembers) {
          var property = Object.getOwnPropertyDescriptor(instanceMembers, key);
          var member = property.value;
          if (member !== null && typeof member == "object" && member.descriptor) {
            Object.defineProperty(prototype, key, member);
          } else if (!("value" in property) && ("set" in property || "get" in property)) {
            Object.defineProperty(prototype, key, property);
          } else {
            prototype[key] = member;
            var superMember = superPrototype[key];
            if (isFn(member) && isFn(superMember) && member !== superMember) {
              member._super = superMember;
            }
          }
        }
        if (!options._isClassObject) {
          var ClassMembersSuperClass = SuperClass._members === void 0 ? BaseClass : SuperClass._members._class;
          var opts = extend({}, options, { _isClassObject: true });
          var ClassMembersClass = ClassMembersSuperClass._extend(classMembers, {}, opts);
          ClassMembersClass._instanceClass = JClass;
          JClass._members = new ClassMembersClass();
        }
        return JClass;
      };
      BaseClass._convert = function(cls, options) {
        var instanceMembers = cls.prototype;
        instanceMembers.init = function() {
          var origin = this._origin = BaseClass._construct(cls, arguments);
          Object.keys(origin).forEach(function(key) {
            if (!origin.hasOwnProperty(key)) {
              return;
            }
            Object.defineProperty(this, key, {
              get: function() {
                return origin[key];
              }
            });
          }, this);
        };
        return BaseClass._extend(instanceMembers, {}, options);
      };
      BaseClass._construct = function(cls, args) {
        if (args === void 0) {
          args = [];
        }
        var Class = function() {
          return cls.apply(this, args);
        };
        Class.prototype = cls.prototype;
        return new Class();
      };
      BaseClass._superDescriptor = function(cls, prop) {
        if ("_class" in cls && cls instanceof cls._class) {
          cls = cls._class;
        }
        if ("_extends" in cls && cls._extends instanceof Function && cls._extends(this)) {
          return Object.getOwnPropertyDescriptor(cls._superClass.prototype, prop);
        } else {
          return void 0;
        }
      };
      return BaseClass;
    });
  }
});

// node_modules/hasharray/src/HashArray.js
var require_HashArray = __commonJS({
  "node_modules/hasharray/src/HashArray.js"(exports, module2) {
    init_process();
    init_buffer();
    var JClass = require_jclass();
    var HashArray = JClass._extend({
      //-----------------------------------
      // Constructor
      //-----------------------------------
      init: function(keyFields, callback, options) {
        keyFields = keyFields instanceof Array ? keyFields : [keyFields];
        this._map = {};
        this._list = [];
        this.callback = callback;
        this.keyFields = keyFields;
        this.isHashArray = true;
        this.options = options || {
          ignoreDuplicates: false
        };
        if (callback) {
          callback("construct");
        }
      },
      //-----------------------------------
      // add()
      //-----------------------------------
      addOne: function(obj) {
        var needsDupCheck = false;
        for (var key in this.keyFields) {
          key = this.keyFields[key];
          var inst = this.objectAt(obj, key);
          if (inst) {
            if (this.has(inst)) {
              if (this.options.ignoreDuplicates)
                return;
              if (this._map[inst].indexOf(obj) != -1) {
                needsDupCheck = true;
                continue;
              }
              this._map[inst].push(obj);
            } else this._map[inst] = [obj];
          }
        }
        if (!needsDupCheck || this._list.indexOf(obj) == -1)
          this._list.push(obj);
      },
      add: function() {
        for (var i = 0; i < arguments.length; i++) {
          this.addOne(arguments[i]);
        }
        if (this.callback) {
          this.callback("add", Array.prototype.slice.call(arguments, 0));
        }
        return this;
      },
      addAll: function(arr) {
        if (arr.length < 100)
          this.add.apply(this, arr);
        else {
          for (var i = 0; i < arr.length; i++)
            this.add(arr[i]);
        }
        return this;
      },
      addMap: function(key, obj) {
        this._map[key] = obj;
        if (this.callback) {
          this.callback("addMap", {
            key,
            obj
          });
        }
        return this;
      },
      //-----------------------------------
      // Intersection, union, etc.
      //-----------------------------------
      /**
       * Returns a new HashArray that contains the intersection between this (A) and the hasharray passed in (B). Returns A ^ B.
       */
      intersection: function(other) {
        var self2 = this;
        if (!other || !other.isHashArray)
          throw Error("Cannot HashArray.intersection() on a non-hasharray object. You passed in: ", other);
        var ret = this.clone(null, true), allItems = this.clone(null, true).addAll(this.all.concat(other.all));
        allItems.all.forEach(function(item) {
          if (self2.collides(item) && other.collides(item))
            ret.add(item);
        });
        return ret;
      },
      /**
       * Returns a new HashArray that contains the complement (difference) between this hash array (A) and the hasharray passed in (B). Returns A - B.
       */
      complement: function(other) {
        var self2 = this;
        if (!other || !other.isHashArray)
          throw Error("Cannot HashArray.complement() on a non-hasharray object. You passed in: ", other);
        var ret = this.clone(null, true);
        this.all.forEach(function(item) {
          if (!other.collides(item))
            ret.add(item);
        });
        return ret;
      },
      //-----------------------------------
      // Retrieval
      //-----------------------------------
      get: function(key) {
        if (!this.has(key))
          return;
        return !(this._map[key] instanceof Array) || this._map[key].length != 1 ? this._map[key] : this._map[key][0];
      },
      getAll: function(keys) {
        keys = keys instanceof Array ? keys : [keys];
        if (keys[0] == "*")
          return this.all;
        var res = new HashArray(this.keyFields);
        for (var key in keys)
          res.add.apply(res, this.getAsArray(keys[key]));
        return res.all;
      },
      getAsArray: function(key) {
        return this._map[key] || [];
      },
      getUniqueRandomIntegers: function(count, min, max) {
        var res = [], map = {};
        count = Math.min(Math.max(max - min, 1), count);
        while (res.length < count) {
          var r = Math.floor(min + Math.random() * (max + 1));
          if (map[r]) continue;
          map[r] = true;
          res.push(r);
        }
        return res;
      },
      sample: function(count, keys) {
        var image = this.all, ixs = {}, res = [];
        if (keys)
          image = this.getAll(keys);
        var rand = this.getUniqueRandomIntegers(count, 0, image.length - 1);
        for (var i = 0; i < rand.length; i++)
          res.push(image[rand[i]]);
        return res;
      },
      //-----------------------------------
      // Peeking
      //-----------------------------------
      has: function(key) {
        return this._map.hasOwnProperty(key);
      },
      collides: function(item) {
        for (var k in this.keyFields)
          if (this.has(this.objectAt(item, this.keyFields[k])))
            return true;
        return false;
      },
      hasMultiple: function(key) {
        return this._map[key] instanceof Array;
      },
      //-----------------------------------
      // Removal
      //-----------------------------------
      removeByKey: function() {
        var removed = [];
        for (var i = 0; i < arguments.length; i++) {
          var key = arguments[i];
          var items = this._map[key].concat();
          if (items) {
            removed = removed.concat(items);
            for (var j in items) {
              var item = items[j];
              for (var ix in this.keyFields) {
                var key2 = this.objectAt(item, this.keyFields[ix]);
                if (key2 && this.has(key2)) {
                  var ix = this._map[key2].indexOf(item);
                  if (ix != -1) {
                    this._map[key2].splice(ix, 1);
                  }
                  if (this._map[key2].length == 0)
                    delete this._map[key2];
                }
              }
              this._list.splice(this._list.indexOf(item), 1);
            }
          }
          delete this._map[key];
        }
        if (this.callback) {
          this.callback("removeByKey", removed);
        }
        return this;
      },
      remove: function() {
        for (var i = 0; i < arguments.length; i++) {
          var item = arguments[i];
          for (var ix in this.keyFields) {
            var key = this.objectAt(item, this.keyFields[ix]);
            if (key) {
              var ix = this._map[key].indexOf(item);
              if (ix != -1)
                this._map[key].splice(ix, 1);
              else
                throw new Error("HashArray: attempting to remove an object that was never added!" + key);
              if (this._map[key].length == 0)
                delete this._map[key];
            }
          }
          var ix = this._list.indexOf(item);
          if (ix != -1)
            this._list.splice(ix, 1);
          else
            throw new Error("HashArray: attempting to remove an object that was never added!" + key);
        }
        if (this.callback) {
          this.callback("remove", arguments);
        }
        return this;
      },
      removeAll: function() {
        var old = this._list.concat();
        this._map = {};
        this._list = [];
        if (this.callback) {
          this.callback("remove", old);
        }
        return this;
      },
      //-----------------------------------
      // Utility
      //-----------------------------------
      objectAt: function(obj, path) {
        if (typeof path === "string") {
          return obj[path];
        }
        var dup = path.concat();
        while (dup.length && obj) {
          obj = obj[dup.shift()];
        }
        return obj;
      },
      //-----------------------------------
      // Iteration
      //-----------------------------------
      forEach: function(keys, callback) {
        keys = keys instanceof Array ? keys : [keys];
        var objs = this.getAll(keys);
        objs.forEach(callback);
        return this;
      },
      forEachDeep: function(keys, key, callback) {
        keys = keys instanceof Array ? keys : [keys];
        var self2 = this, objs = this.getAll(keys);
        objs.forEach(function(item) {
          callback(self2.objectAt(item, key), item);
        });
        return this;
      },
      //-----------------------------------
      // Cloning
      //-----------------------------------
      clone: function(callback, ignoreItems) {
        var n = new HashArray(this.keyFields.concat(), callback ? callback : this.callback);
        if (!ignoreItems)
          n.add.apply(n, this.all.concat());
        return n;
      },
      //-----------------------------------
      // Mathematical
      //-----------------------------------
      sum: function(keys, key, weightKey) {
        var self2 = this, ret = 0;
        this.forEachDeep(keys, key, function(value, item) {
          if (weightKey !== void 0)
            value *= self2.objectAt(item, weightKey);
          ret += value;
        });
        return ret;
      },
      average: function(keys, key, weightKey) {
        var ret = 0, tot = 0, weightsTotal = 0, self2 = this;
        if (weightKey !== void 0)
          this.forEachDeep(keys, weightKey, function(value) {
            weightsTotal += value;
          });
        this.forEachDeep(keys, key, function(value, item) {
          if (weightKey !== void 0)
            value *= self2.objectAt(item, weightKey) / weightsTotal;
          ret += value;
          tot++;
        });
        return weightKey !== void 0 ? ret : ret / tot;
      },
      //-----------------------------------
      // Filtering
      //-----------------------------------
      filter: function(keys, callbackOrKey) {
        var self2 = this;
        var callback = typeof callbackOrKey == "function" ? callbackOrKey : defaultCallback;
        var ha = new HashArray(this.keyFields);
        ha.addAll(this.getAll(keys).filter(callback));
        return ha;
        function defaultCallback(item) {
          var val = self2.objectAt(item, callbackOrKey);
          return val !== void 0 && val !== false;
        }
      }
    });
    Object.defineProperty(HashArray.prototype, "all", {
      get: function() {
        return this._list;
      }
    });
    Object.defineProperty(HashArray.prototype, "map", {
      get: function() {
        return this._map;
      }
    });
    module2.exports = HashArray;
    if (typeof window !== "undefined")
      window.HashArray = HashArray;
  }
});

// node_modules/hasharray/index.js
var require_hasharray = __commonJS({
  "node_modules/hasharray/index.js"(exports, module2) {
    init_process();
    init_buffer();
    module2.exports = require_HashArray();
  }
});

// node_modules/crypt/crypt.js
var require_crypt = __commonJS({
  "node_modules/crypt/crypt.js"(exports, module2) {
    init_process();
    init_buffer();
    (function() {
      var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", crypt = {
        // Bit-wise rotation left
        rotl: function(n, b) {
          return n << b | n >>> 32 - b;
        },
        // Bit-wise rotation right
        rotr: function(n, b) {
          return n << 32 - b | n >>> b;
        },
        // Swap big-endian to little-endian and vice versa
        endian: function(n) {
          if (n.constructor == Number) {
            return crypt.rotl(n, 8) & 16711935 | crypt.rotl(n, 24) & 4278255360;
          }
          for (var i = 0; i < n.length; i++)
            n[i] = crypt.endian(n[i]);
          return n;
        },
        // Generate an array of any length of random bytes
        randomBytes: function(n) {
          for (var bytes = []; n > 0; n--)
            bytes.push(Math.floor(Math.random() * 256));
          return bytes;
        },
        // Convert a byte array to big-endian 32-bit words
        bytesToWords: function(bytes) {
          for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
            words[b >>> 5] |= bytes[i] << 24 - b % 32;
          return words;
        },
        // Convert big-endian 32-bit words to a byte array
        wordsToBytes: function(words) {
          for (var bytes = [], b = 0; b < words.length * 32; b += 8)
            bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
          return bytes;
        },
        // Convert a byte array to a hex string
        bytesToHex: function(bytes) {
          for (var hex = [], i = 0; i < bytes.length; i++) {
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 15).toString(16));
          }
          return hex.join("");
        },
        // Convert a hex string to a byte array
        hexToBytes: function(hex) {
          for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
          return bytes;
        },
        // Convert a byte array to a base-64 string
        bytesToBase64: function(bytes) {
          for (var base64 = [], i = 0; i < bytes.length; i += 3) {
            var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
            for (var j = 0; j < 4; j++)
              if (i * 8 + j * 6 <= bytes.length * 8)
                base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 63));
              else
                base64.push("=");
          }
          return base64.join("");
        },
        // Convert a base-64 string to a byte array
        base64ToBytes: function(base64) {
          base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");
          for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
            if (imod4 == 0) continue;
            bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
          }
          return bytes;
        }
      };
      module2.exports = crypt;
    })();
  }
});

// node_modules/charenc/charenc.js
var require_charenc = __commonJS({
  "node_modules/charenc/charenc.js"(exports, module2) {
    init_process();
    init_buffer();
    var charenc = {
      // UTF-8 encoding
      utf8: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
        },
        // Convert a byte array to a string
        bytesToString: function(bytes) {
          return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
        }
      },
      // Binary encoding
      bin: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          for (var bytes = [], i = 0; i < str.length; i++)
            bytes.push(str.charCodeAt(i) & 255);
          return bytes;
        },
        // Convert a byte array to a string
        bytesToString: function(bytes) {
          for (var str = [], i = 0; i < bytes.length; i++)
            str.push(String.fromCharCode(bytes[i]));
          return str.join("");
        }
      }
    };
    module2.exports = charenc;
  }
});

// node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/is-buffer/index.js"(exports, module2) {
    init_process();
    init_buffer();
    module2.exports = function(obj) {
      return obj != null && (isBuffer2(obj) || isSlowBuffer2(obj) || !!obj._isBuffer);
    };
    function isBuffer2(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer2(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer2(obj.slice(0, 0));
    }
  }
});

// node_modules/md5/md5.js
var require_md5 = __commonJS({
  "node_modules/md5/md5.js"(exports, module2) {
    init_process();
    init_buffer();
    (function() {
      var crypt = require_crypt(), utf8 = require_charenc().utf8, isBuffer2 = require_is_buffer(), bin = require_charenc().bin, md5 = function(message, options) {
        if (message.constructor == String)
          if (options && options.encoding === "binary")
            message = bin.stringToBytes(message);
          else
            message = utf8.stringToBytes(message);
        else if (isBuffer2(message))
          message = Array.prototype.slice.call(message, 0);
        else if (!Array.isArray(message) && message.constructor !== Uint8Array)
          message = message.toString();
        var m = crypt.bytesToWords(message), l = message.length * 8, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
        for (var i = 0; i < m.length; i++) {
          m[i] = (m[i] << 8 | m[i] >>> 24) & 16711935 | (m[i] << 24 | m[i] >>> 8) & 4278255360;
        }
        m[l >>> 5] |= 128 << l % 32;
        m[(l + 64 >>> 9 << 4) + 14] = l;
        var FF = md5._ff, GG = md5._gg, HH = md5._hh, II = md5._ii;
        for (var i = 0; i < m.length; i += 16) {
          var aa = a, bb = b, cc = c, dd = d;
          a = FF(a, b, c, d, m[i + 0], 7, -680876936);
          d = FF(d, a, b, c, m[i + 1], 12, -389564586);
          c = FF(c, d, a, b, m[i + 2], 17, 606105819);
          b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
          a = FF(a, b, c, d, m[i + 4], 7, -176418897);
          d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
          c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
          b = FF(b, c, d, a, m[i + 7], 22, -45705983);
          a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
          d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
          c = FF(c, d, a, b, m[i + 10], 17, -42063);
          b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
          a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
          d = FF(d, a, b, c, m[i + 13], 12, -40341101);
          c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
          b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
          a = GG(a, b, c, d, m[i + 1], 5, -165796510);
          d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
          c = GG(c, d, a, b, m[i + 11], 14, 643717713);
          b = GG(b, c, d, a, m[i + 0], 20, -373897302);
          a = GG(a, b, c, d, m[i + 5], 5, -701558691);
          d = GG(d, a, b, c, m[i + 10], 9, 38016083);
          c = GG(c, d, a, b, m[i + 15], 14, -660478335);
          b = GG(b, c, d, a, m[i + 4], 20, -405537848);
          a = GG(a, b, c, d, m[i + 9], 5, 568446438);
          d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
          c = GG(c, d, a, b, m[i + 3], 14, -187363961);
          b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
          a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
          d = GG(d, a, b, c, m[i + 2], 9, -51403784);
          c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
          b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
          a = HH(a, b, c, d, m[i + 5], 4, -378558);
          d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
          c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
          b = HH(b, c, d, a, m[i + 14], 23, -35309556);
          a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
          d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
          c = HH(c, d, a, b, m[i + 7], 16, -155497632);
          b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
          a = HH(a, b, c, d, m[i + 13], 4, 681279174);
          d = HH(d, a, b, c, m[i + 0], 11, -358537222);
          c = HH(c, d, a, b, m[i + 3], 16, -722521979);
          b = HH(b, c, d, a, m[i + 6], 23, 76029189);
          a = HH(a, b, c, d, m[i + 9], 4, -640364487);
          d = HH(d, a, b, c, m[i + 12], 11, -421815835);
          c = HH(c, d, a, b, m[i + 15], 16, 530742520);
          b = HH(b, c, d, a, m[i + 2], 23, -995338651);
          a = II(a, b, c, d, m[i + 0], 6, -198630844);
          d = II(d, a, b, c, m[i + 7], 10, 1126891415);
          c = II(c, d, a, b, m[i + 14], 15, -1416354905);
          b = II(b, c, d, a, m[i + 5], 21, -57434055);
          a = II(a, b, c, d, m[i + 12], 6, 1700485571);
          d = II(d, a, b, c, m[i + 3], 10, -1894986606);
          c = II(c, d, a, b, m[i + 10], 15, -1051523);
          b = II(b, c, d, a, m[i + 1], 21, -2054922799);
          a = II(a, b, c, d, m[i + 8], 6, 1873313359);
          d = II(d, a, b, c, m[i + 15], 10, -30611744);
          c = II(c, d, a, b, m[i + 6], 15, -1560198380);
          b = II(b, c, d, a, m[i + 13], 21, 1309151649);
          a = II(a, b, c, d, m[i + 4], 6, -145523070);
          d = II(d, a, b, c, m[i + 11], 10, -1120210379);
          c = II(c, d, a, b, m[i + 2], 15, 718787259);
          b = II(b, c, d, a, m[i + 9], 21, -343485551);
          a = a + aa >>> 0;
          b = b + bb >>> 0;
          c = c + cc >>> 0;
          d = d + dd >>> 0;
        }
        return crypt.endian([a, b, c, d]);
      };
      md5._ff = function(a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md5._gg = function(a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md5._hh = function(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md5._ii = function(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md5._blocksize = 16;
      md5._digestsize = 16;
      module2.exports = function(message, options) {
        if (message === void 0 || message === null)
          throw new Error("Illegal argument " + message);
        var digestbytes = crypt.wordsToBytes(md5(message, options));
        return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt.bytesToHex(digestbytes);
      };
    })();
  }
});

// node_modules/trie-search/src/TrieSearch.js
var require_TrieSearch = __commonJS({
  "node_modules/trie-search/src/TrieSearch.js"(exports, module2) {
    init_process();
    init_buffer();
    var HashArray = require_hasharray();
    var md5 = require_md5();
    var MAX_CACHE_SIZE = 1024;
    var IS_WHITESPACE = /^[\s]*$/;
    var DEFAULT_INTERNATIONALIZE_EXPAND_REGEXES = [
      {
        regex: /[åäàáâãæ]/ig,
        alternate: "a"
      },
      {
        regex: /[èéêë]/ig,
        alternate: "e"
      },
      {
        regex: /[ìíîï]/ig,
        alternate: "i"
      },
      {
        regex: /[òóôõö]/ig,
        alternate: "o"
      },
      {
        regex: /[ùúûü]/ig,
        alternate: "u"
      },
      {
        regex: /[æ]/ig,
        alternate: "ae"
      }
    ];
    String.prototype.replaceCharAt = function(index, replacement) {
      return this.substring(0, index) + replacement + this.substr(index + replacement.length);
    };
    var TrieSearch2 = function(keyFields, options) {
      this.options = options || {};
      this.options.ignoreCase = this.options.ignoreCase === void 0 ? true : this.options.ignoreCase;
      this.options.maxCacheSize = this.options.maxCacheSize || MAX_CACHE_SIZE;
      this.options.cache = this.options.hasOwnProperty("cache") ? this.options.cache : true;
      this.options.splitOnRegEx = this.options.hasOwnProperty("splitOnRegEx") ? this.options.splitOnRegEx : /[\s.,\/#!$%\^&\*;:{}=\-_`~()]/g;
      this.options.splitOnGetRegEx = this.options.hasOwnProperty("splitOnGetRegEx") ? this.options.splitOnGetRegEx : this.options.splitOnRegEx;
      this.options.min = this.options.min || 1;
      this.options.keepAll = this.options.hasOwnProperty("keepAll") ? this.options.keepAll : false;
      this.options.keepAllKey = this.options.hasOwnProperty("keepAllKey") ? this.options.keepAllKey : "id";
      this.options.idFieldOrFunction = this.options.hasOwnProperty("idFieldOrFunction") ? this.options.idFieldOrFunction : void 0;
      this.options.expandRegexes = this.options.expandRegexes || DEFAULT_INTERNATIONALIZE_EXPAND_REGEXES;
      this.options.insertFullUnsplitKey = this.options.hasOwnProperty("insertFullUnsplitKey") ? this.options.insertFullUnsplitKey : false;
      this.options.defaultReducer = this.options.hasOwnProperty("defaultReducer") ? this.options.defaultReducer : TrieSearch2.UNION_REDUCER;
      this.keyFields = keyFields ? keyFields instanceof Array ? keyFields : [keyFields] : [];
      this.root = {};
      this.size = 0;
      if (this.options.cache) {
        this.getCache = new HashArray("key");
      }
    };
    function deepLookup(obj, keys) {
      return keys.length === 1 ? obj[keys[0]] : deepLookup(obj[keys[0]], keys.slice(1, keys.length));
    }
    TrieSearch2.prototype = {
      add: function(item, customKeys) {
        if (this.options.cache) this.clearCache();
        if (typeof customKeys === "number") {
          customKeys = void 0;
        }
        var keyFields = customKeys || this.keyFields;
        for (var k in keyFields) {
          var key = keyFields[k], isKeyArr = key instanceof Array, val = isKeyArr ? deepLookup(item, key) : item[key];
          if (!val) continue;
          val = val.toString();
          if (this.options.ignoreCase) {
            val = val.toLowerCase();
          }
          var expandedValues = this.expandString(val);
          for (var v = 0; v < expandedValues.length; v++) {
            var expandedValue = expandedValues[v];
            this.map(expandedValue, item, customKeys);
          }
        }
      },
      /**
       * Note that this removes a full phrase (not an item) from the Trie. This could be useful for
       * example if you wanted to remove swear words from a search.
       *
       * @param phrase The phrase to remove
       * @param keyFields The keyfields in which to search for this phrase to remove
       */
      remove: function(phrase, keyFields) {
        if (!phrase) return;
        phrase = phrase.toString();
        phrase = this.options.ignoreCase ? phrase.toLowerCase() : phrase;
        keyFields = keyFields || this.keyFields;
        keyFields = keyFields instanceof Array ? keyFields : [keyFields];
        if (this.options.cache) this.clearCache();
        var diacriticalVariants = this.expandString(phrase);
        for (var variant of diacriticalVariants) {
          var words = this.options.splitOnRegEx ? variant.split(this.options.splitOnRegEx) : [variant];
          for (var word of words) {
            this.removeNode(this.root, keyFields, phrase, word);
          }
        }
      },
      removeNode: function(node, keyFields, phrase, word) {
        if (!node) {
          return null;
        }
        if (!word.length) {
          if (node.value) {
            node.value = node.value.filter(
              (item) => !keyFields.some((field) => {
                var valueAtField = item[field] || "";
                valueAtField = this.options.ignoreCase ? valueAtField.toLowerCase() : valueAtField;
                return valueAtField.indexOf(phrase) > -1;
              })
            );
            if (!node.value.length) {
              delete node.value;
            }
          }
          return;
        }
        var char = word[0];
        if (node[char]) {
          this.removeNode(node[char], keyFields, phrase, word.slice(1));
          this.deleteNodeIfEmpty(node, char);
        }
      },
      deleteNodeIfEmpty: function(parentNode, key) {
        if (Object.keys(parentNode[key]).length === 0) {
          delete parentNode[key];
          this.size--;
        }
      },
      /**
       * By default using the options.expandRegexes, given a string like 'ö är bra', this will expand it to:
       *
       * ['ö är bra', 'o är bra', 'ö ar bra', 'o ar bra']
       *
       * By default this was built to allow for internationalization.
       *
       * This is used for insertion! This should not be used for lookup since if a person explicitly types
       * 'ä' they probably do not want to see all results for 'a'.
       *
       * @param value The string to find alternates for.
       * @returns {Array} Always returns an array even if no matches.
       */
      expandString: function(value) {
        var values2 = [value];
        if (this.options.expandRegexes && this.options.expandRegexes.length) {
          for (var i = 0; i < this.options.expandRegexes.length; i++) {
            var er = this.options.expandRegexes[i];
            var match;
            while ((match = er.regex.exec(value)) !== null) {
              var alternateValue = value.replaceCharAt(match.index, er.alternate);
              values2.push(alternateValue);
            }
          }
        }
        return values2;
      },
      addAll: function(arr, customKeys) {
        for (var i = 0; i < arr.length; i++)
          this.add(arr[i], customKeys);
      },
      reset: function() {
        this.root = {};
        this.size = 0;
      },
      clearCache: function() {
        this.getCache = new HashArray("key");
      },
      cleanCache: function() {
        while (this.getCache.all.length > this.options.maxCacheSize)
          this.getCache.remove(this.getCache.all[0]);
      },
      addFromObject: function(obj, valueField) {
        if (this.options.cache)
          this.clearCache();
        valueField = valueField || "value";
        if (this.keyFields.indexOf("_key_") == -1)
          this.keyFields.push("_key_");
        for (var key in obj) {
          var o = { _key_: key };
          o[valueField] = obj[key];
          this.add(o);
        }
      },
      map: function(key, item, customKeys) {
        if (this.options.splitOnRegEx && this.options.splitOnRegEx.test(key)) {
          var phrases = key.split(this.options.splitOnRegEx);
          var emptySplitMatch = phrases.filter(function(p) {
            return IS_WHITESPACE.test(p);
          });
          var selfMatch = phrases.filter(function(p) {
            return p === key;
          });
          var selfIsOnlyMatch = selfMatch.length + emptySplitMatch.length === phrases.length;
          if (!selfIsOnlyMatch) {
            for (var i = 0, l = phrases.length; i < l; i++) {
              if (!IS_WHITESPACE.test(phrases[i])) {
                this.map(phrases[i], item, customKeys);
              }
            }
            if (!this.options.insertFullUnsplitKey) {
              return;
            }
          }
        }
        if (this.options.cache)
          this.clearCache();
        if (this.options.keepAll) {
          this.indexed = this.indexed || new HashArray([this.options.keepAllKey]);
          this.indexed.add(item);
        }
        if (this.options.ignoreCase) {
          key = key.toLowerCase();
        }
        var keyArr = this.keyToArr(key), self2 = this;
        insert(keyArr, item, this.root);
        try {
          item.$tsid = this.getId(item, customKeys);
        } catch (error) {
          console.warn("TrieSearch: since version 2.2 you cannot insert primitives as items, you must wrap them in an Object. This was done for performance.");
          throw error;
        }
        function insert(keyArr2, value, node) {
          if (keyArr2.length == 0) {
            node["value"] = node["value"] || [];
            node["value"].push(value);
            return;
          }
          var k = keyArr2.shift();
          if (!node[k])
            self2.size++;
          node[k] = node[k] || {};
          insert(keyArr2, value, node[k]);
        }
      },
      keyToArr: function(key) {
        var keyArr;
        if (this.options.min && this.options.min > 1) {
          if (key.length < this.options.min)
            return [];
          keyArr = [key.substring(0, this.options.min)];
          keyArr = keyArr.concat(key.substring(this.options.min).split(""));
        } else keyArr = key.split("");
        return keyArr;
      },
      findNode: function(key) {
        return f(this.keyToArr(key), this.root);
        function f(keyArr, node) {
          if (!node) return void 0;
          if (keyArr.length === 0) return node;
          var k = keyArr.shift();
          return f(keyArr, node[k]);
        }
      },
      _getCacheKey: function(phrase, limit) {
        var cacheKey = phrase;
        if (limit) {
          cacheKey = phrase + "_" + limit;
        }
        return cacheKey;
      },
      _get: function(searchPhrase, limit) {
        var self2 = this;
        searchPhrase = this.options.ignoreCase ? searchPhrase.toLowerCase() : searchPhrase;
        var c, node, all = [], dedupDict = {};
        if (this.options.cache && (c = this.getCache.get(this._getCacheKey(searchPhrase, limit))))
          return c.value;
        node = this.findNode(searchPhrase);
        if (node) {
          collectAndRecurseOnChildren(node);
        }
        if (this.options.cache) {
          var cacheKey = this._getCacheKey(searchPhrase, limit);
          this.getCache.add({ key: cacheKey, value: all });
          this.cleanCache();
        }
        return all;
        function collectAndRecurseOnChildren(node2) {
          if (all.length === limit) {
            return;
          }
          if (node2.value && node2.value.length) {
            for (let i = 0; i < node2.value.length; i++) {
              var item = node2.value[i];
              if (!limit || all.length < limit) {
                const id = self2.getId(item);
                if (dedupDict[id]) continue;
                all.push(item);
                dedupDict[id] = item;
              }
            }
          }
          if (all.length === limit) {
            return;
          }
          for (var field in node2) {
            if (field !== "value") {
              collectAndRecurseOnChildren(node2[field]);
            }
          }
        }
      },
      get: function(phrases, reducer, limit) {
        var accumulator = void 0;
        reducer = reducer || this.options.defaultReducer;
        if (typeof phrases === "string") {
          phrases = this.options.splitOnGetRegEx ? phrases.split(this.options.splitOnGetRegEx) : [phrases];
        }
        phrases = phrases.filter((phrase2) => !this.options.min || phrase2.length >= this.options.min);
        for (var i = 0, l = phrases.length; i < l; i++) {
          var phrase = phrases[i];
          var matchedItems = this._get(phrase, limit);
          accumulator = reducer(accumulator, phrase, matchedItems, this);
        }
        return accumulator || [];
      },
      search: function(phrases, reducer, limit) {
        return this.get(phrases, reducer, limit);
      },
      getId: function(item, customKeys) {
        if (item.$tsid) return item.$tsid;
        if (!this.options.idFieldOrFunction) {
          var s = "";
          var kf = customKeys || this.keyFields;
          for (let i = 0; i < kf.length; i++) {
            var f = kf[i];
            var v = typeof f === "string" ? item[f] : deepLookup(item, f);
            if (v === void 0 || v === null) {
              throw new Error(`Since 2.2.0 of TrieSearch, if you have undefined/null keyFields (or customKeys) on your items you must specify an idFieldOrFunction. item.${f} === ${v}`);
            }
            s += v.toString();
          }
          return md5(s);
        }
        return typeof this.options.idFieldOrFunction === "function" ? this.options.idFieldOrFunction(item) : item[this.options.idFieldOrFunction];
      }
    };
    TrieSearch2.UNION_REDUCER = function(accumulatedItems, phrase, phraseMatchingItems, trieSearch) {
      if (accumulatedItems === void 0) {
        return phraseMatchingItems;
      }
      var alreadyExistsById = {}, all = [];
      accumulatedItems.forEach(function(item) {
        alreadyExistsById[trieSearch.getId(item)] = true;
      });
      phraseMatchingItems.forEach(function(item) {
        var id = trieSearch.getId(item);
        if (alreadyExistsById[id]) {
          all.push(item);
        }
      });
      return all;
    };
    module2.exports = TrieSearch2;
    module2.exports.default = TrieSearch2;
  }
});

// node_modules/trie-search/index.js
var require_trie_search = __commonJS({
  "node_modules/trie-search/index.js"(exports, module2) {
    init_process();
    init_buffer();
    module2.exports = require_TrieSearch();
  }
});

// node_modules/whatwg-fetch/dist/fetch.umd.js
var require_fetch_umd = __commonJS({
  "node_modules/whatwg-fetch/dist/fetch.umd.js"(exports, module2) {
    init_process();
    init_buffer();
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.WHATWGFetch = {});
    })(exports, function(exports2) {
      "use strict";
      var g = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
      typeof globalThis !== "undefined" && globalThis || {};
      var support = {
        searchParams: "URLSearchParams" in g,
        iterable: "Symbol" in g && "iterator" in Symbol,
        blob: "FileReader" in g && "Blob" in g && function() {
          try {
            new Blob();
            return true;
          } catch (e) {
            return false;
          }
        }(),
        formData: "FormData" in g,
        arrayBuffer: "ArrayBuffer" in g
      };
      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }
      if (support.arrayBuffer) {
        var viewClasses = [
          "[object Int8Array]",
          "[object Uint8Array]",
          "[object Uint8ClampedArray]",
          "[object Int16Array]",
          "[object Uint16Array]",
          "[object Int32Array]",
          "[object Uint32Array]",
          "[object Float32Array]",
          "[object Float64Array]"
        ];
        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
      }
      function normalizeName(name) {
        if (typeof name !== "string") {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
          throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
      }
      function normalizeValue(value) {
        if (typeof value !== "string") {
          value = String(value);
        }
        return value;
      }
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value = items.shift();
            return { done: value === void 0, value };
          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator;
          };
        }
        return iterator;
      }
      function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
          headers.forEach(function(value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            if (header.length != 2) {
              throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
            }
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name]);
          }, this);
        }
      }
      Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ", " + value : value;
      };
      Headers.prototype["delete"] = function(name) {
        delete this.map[normalizeName(name)];
      };
      Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
      };
      Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name));
      };
      Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };
      Headers.prototype.forEach = function(callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };
      Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) {
          items.push(name);
        });
        return iteratorFor(items);
      };
      Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
          items.push(value);
        });
        return iteratorFor(items);
      };
      Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) {
          items.push([name, value]);
        });
        return iteratorFor(items);
      };
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }
      function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
          return Promise.reject(new TypeError("Already read"));
        }
        body.bodyUsed = true;
      }
      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        });
      }
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }
      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : "utf-8";
        reader.readAsText(blob, encoding);
        return promise;
      }
      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join("");
      }
      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }
      function Body() {
        this.bodyUsed = false;
        this._initBody = function(body) {
          this.bodyUsed = this.bodyUsed;
          this._bodyInit = body;
          if (!body) {
            this._noBody = true;
            this._bodyText = "";
          } else if (typeof body === "string") {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get("content-type")) {
            if (typeof body === "string") {
              this.headers.set("content-type", "text/plain;charset=UTF-8");
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set("content-type", this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
          }
        };
        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as blob");
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };
        }
        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this);
            if (isConsumed) {
              return isConsumed;
            } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(
                this._bodyArrayBuffer.buffer.slice(
                  this._bodyArrayBuffer.byteOffset,
                  this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                )
              );
            } else {
              return Promise.resolve(this._bodyArrayBuffer);
            }
          } else if (support.blob) {
            return this.blob().then(readBlobAsArrayBuffer);
          } else {
            throw new Error("could not read as ArrayBuffer");
          }
        };
        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
            throw new Error("could not read FormData body as text");
          } else {
            return Promise.resolve(this._bodyText);
          }
        };
        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode2);
          };
        }
        this.json = function() {
          return this.text().then(JSON.parse);
        };
        return this;
      }
      var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
      }
      function Request(input, options) {
        if (!(this instanceof Request)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError("Already read");
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || "same-origin";
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || "GET");
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || function() {
          if ("AbortController" in g) {
            var ctrl = new AbortController();
            return ctrl.signal;
          }
        }();
        this.referrer = null;
        if ((this.method === "GET" || this.method === "HEAD") && body) {
          throw new TypeError("Body not allowed for GET or HEAD requests");
        }
        this._initBody(body);
        if (this.method === "GET" || this.method === "HEAD") {
          if (options.cache === "no-store" || options.cache === "no-cache") {
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) {
              this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
            } else {
              var reQueryString = /\?/;
              this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
            }
          }
        }
      }
      Request.prototype.clone = function() {
        return new Request(this, { body: this._bodyInit });
      };
      function decode2(body) {
        var form = new FormData();
        body.trim().split("&").forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split("=");
            var name = split.shift().replace(/\+/g, " ");
            var value = split.join("=").replace(/\+/g, " ");
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
        return form;
      }
      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
        preProcessedHeaders.split("\r").map(function(header) {
          return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
        }).forEach(function(line) {
          var parts = line.split(":");
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(":").trim();
            try {
              headers.append(key, value);
            } catch (error) {
              console.warn("Response " + error.message);
            }
          }
        });
        return headers;
      }
      Body.call(Request.prototype);
      function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
          options = {};
        }
        this.type = "default";
        this.status = options.status === void 0 ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
          throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || "";
        this._initBody(bodyInit);
      }
      Body.call(Response.prototype);
      Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        });
      };
      Response.error = function() {
        var response = new Response(null, { status: 200, statusText: "" });
        response.ok = false;
        response.status = 0;
        response.type = "error";
        return response;
      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError("Invalid status code");
        }
        return new Response(null, { status, headers: { location: url } });
      };
      exports2.DOMException = g.DOMException;
      try {
        new exports2.DOMException();
      } catch (err) {
        exports2.DOMException = function(message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports2.DOMException.prototype = Object.create(Error.prototype);
        exports2.DOMException.prototype.constructor = exports2.DOMException;
      }
      function fetch2(input, init2) {
        return new Promise(function(resolve, reject) {
          var request = new Request(input, init2);
          if (request.signal && request.signal.aborted) {
            return reject(new exports2.DOMException("Aborted", "AbortError"));
          }
          var xhr = new XMLHttpRequest();
          function abortXhr() {
            xhr.abort();
          }
          xhr.onload = function() {
            var options = {
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || "")
            };
            if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
              options.status = 200;
            } else {
              options.status = xhr.status;
            }
            options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
            var body = "response" in xhr ? xhr.response : xhr.responseText;
            setTimeout(function() {
              resolve(new Response(body, options));
            }, 0);
          };
          xhr.onerror = function() {
            setTimeout(function() {
              reject(new TypeError("Network request failed"));
            }, 0);
          };
          xhr.ontimeout = function() {
            setTimeout(function() {
              reject(new TypeError("Network request timed out"));
            }, 0);
          };
          xhr.onabort = function() {
            setTimeout(function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            }, 0);
          };
          function fixUrl(url) {
            try {
              return url === "" && g.location.href ? g.location.href : url;
            } catch (e) {
              return url;
            }
          }
          xhr.open(request.method, fixUrl(request.url), true);
          if (request.credentials === "include") {
            xhr.withCredentials = true;
          } else if (request.credentials === "omit") {
            xhr.withCredentials = false;
          }
          if ("responseType" in xhr) {
            if (support.blob) {
              xhr.responseType = "blob";
            } else if (support.arrayBuffer) {
              xhr.responseType = "arraybuffer";
            }
          }
          if (init2 && typeof init2.headers === "object" && !(init2.headers instanceof Headers || g.Headers && init2.headers instanceof g.Headers)) {
            var names = [];
            Object.getOwnPropertyNames(init2.headers).forEach(function(name) {
              names.push(normalizeName(name));
              xhr.setRequestHeader(name, normalizeValue(init2.headers[name]));
            });
            request.headers.forEach(function(value, name) {
              if (names.indexOf(name) === -1) {
                xhr.setRequestHeader(name, value);
              }
            });
          } else {
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
          }
          if (request.signal) {
            request.signal.addEventListener("abort", abortXhr);
            xhr.onreadystatechange = function() {
              if (xhr.readyState === 4) {
                request.signal.removeEventListener("abort", abortXhr);
              }
            };
          }
          xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
        });
      }
      fetch2.polyfill = true;
      if (!g.fetch) {
        g.fetch = fetch2;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
      }
      exports2.Headers = Headers;
      exports2.Request = Request;
      exports2.Response = Response;
      exports2.fetch = fetch2;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/isomorphic-fetch/fetch-npm-browserify.js
var require_fetch_npm_browserify = __commonJS({
  "node_modules/isomorphic-fetch/fetch-npm-browserify.js"(exports, module2) {
    init_process();
    init_buffer();
    require_fetch_umd();
    module2.exports = self.fetch.bind(self);
  }
});

// node_modules/html-entities/lib/named-references.js
var require_named_references = __commonJS({
  "node_modules/html-entities/lib/named-references.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bodyRegExps = { xml: /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g, html4: /&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g, html5: /&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g };
    exports.namedReferences = { xml: { entities: { "&lt;": "<", "&gt;": ">", "&quot;": '"', "&apos;": "'", "&amp;": "&" }, characters: { "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&apos;", "&": "&amp;" } }, html4: { entities: { "&apos;": "'", "&nbsp": "\xA0", "&nbsp;": "\xA0", "&iexcl": "\xA1", "&iexcl;": "\xA1", "&cent": "\xA2", "&cent;": "\xA2", "&pound": "\xA3", "&pound;": "\xA3", "&curren": "\xA4", "&curren;": "\xA4", "&yen": "\xA5", "&yen;": "\xA5", "&brvbar": "\xA6", "&brvbar;": "\xA6", "&sect": "\xA7", "&sect;": "\xA7", "&uml": "\xA8", "&uml;": "\xA8", "&copy": "\xA9", "&copy;": "\xA9", "&ordf": "\xAA", "&ordf;": "\xAA", "&laquo": "\xAB", "&laquo;": "\xAB", "&not": "\xAC", "&not;": "\xAC", "&shy": "\xAD", "&shy;": "\xAD", "&reg": "\xAE", "&reg;": "\xAE", "&macr": "\xAF", "&macr;": "\xAF", "&deg": "\xB0", "&deg;": "\xB0", "&plusmn": "\xB1", "&plusmn;": "\xB1", "&sup2": "\xB2", "&sup2;": "\xB2", "&sup3": "\xB3", "&sup3;": "\xB3", "&acute": "\xB4", "&acute;": "\xB4", "&micro": "\xB5", "&micro;": "\xB5", "&para": "\xB6", "&para;": "\xB6", "&middot": "\xB7", "&middot;": "\xB7", "&cedil": "\xB8", "&cedil;": "\xB8", "&sup1": "\xB9", "&sup1;": "\xB9", "&ordm": "\xBA", "&ordm;": "\xBA", "&raquo": "\xBB", "&raquo;": "\xBB", "&frac14": "\xBC", "&frac14;": "\xBC", "&frac12": "\xBD", "&frac12;": "\xBD", "&frac34": "\xBE", "&frac34;": "\xBE", "&iquest": "\xBF", "&iquest;": "\xBF", "&Agrave": "\xC0", "&Agrave;": "\xC0", "&Aacute": "\xC1", "&Aacute;": "\xC1", "&Acirc": "\xC2", "&Acirc;": "\xC2", "&Atilde": "\xC3", "&Atilde;": "\xC3", "&Auml": "\xC4", "&Auml;": "\xC4", "&Aring": "\xC5", "&Aring;": "\xC5", "&AElig": "\xC6", "&AElig;": "\xC6", "&Ccedil": "\xC7", "&Ccedil;": "\xC7", "&Egrave": "\xC8", "&Egrave;": "\xC8", "&Eacute": "\xC9", "&Eacute;": "\xC9", "&Ecirc": "\xCA", "&Ecirc;": "\xCA", "&Euml": "\xCB", "&Euml;": "\xCB", "&Igrave": "\xCC", "&Igrave;": "\xCC", "&Iacute": "\xCD", "&Iacute;": "\xCD", "&Icirc": "\xCE", "&Icirc;": "\xCE", "&Iuml": "\xCF", "&Iuml;": "\xCF", "&ETH": "\xD0", "&ETH;": "\xD0", "&Ntilde": "\xD1", "&Ntilde;": "\xD1", "&Ograve": "\xD2", "&Ograve;": "\xD2", "&Oacute": "\xD3", "&Oacute;": "\xD3", "&Ocirc": "\xD4", "&Ocirc;": "\xD4", "&Otilde": "\xD5", "&Otilde;": "\xD5", "&Ouml": "\xD6", "&Ouml;": "\xD6", "&times": "\xD7", "&times;": "\xD7", "&Oslash": "\xD8", "&Oslash;": "\xD8", "&Ugrave": "\xD9", "&Ugrave;": "\xD9", "&Uacute": "\xDA", "&Uacute;": "\xDA", "&Ucirc": "\xDB", "&Ucirc;": "\xDB", "&Uuml": "\xDC", "&Uuml;": "\xDC", "&Yacute": "\xDD", "&Yacute;": "\xDD", "&THORN": "\xDE", "&THORN;": "\xDE", "&szlig": "\xDF", "&szlig;": "\xDF", "&agrave": "\xE0", "&agrave;": "\xE0", "&aacute": "\xE1", "&aacute;": "\xE1", "&acirc": "\xE2", "&acirc;": "\xE2", "&atilde": "\xE3", "&atilde;": "\xE3", "&auml": "\xE4", "&auml;": "\xE4", "&aring": "\xE5", "&aring;": "\xE5", "&aelig": "\xE6", "&aelig;": "\xE6", "&ccedil": "\xE7", "&ccedil;": "\xE7", "&egrave": "\xE8", "&egrave;": "\xE8", "&eacute": "\xE9", "&eacute;": "\xE9", "&ecirc": "\xEA", "&ecirc;": "\xEA", "&euml": "\xEB", "&euml;": "\xEB", "&igrave": "\xEC", "&igrave;": "\xEC", "&iacute": "\xED", "&iacute;": "\xED", "&icirc": "\xEE", "&icirc;": "\xEE", "&iuml": "\xEF", "&iuml;": "\xEF", "&eth": "\xF0", "&eth;": "\xF0", "&ntilde": "\xF1", "&ntilde;": "\xF1", "&ograve": "\xF2", "&ograve;": "\xF2", "&oacute": "\xF3", "&oacute;": "\xF3", "&ocirc": "\xF4", "&ocirc;": "\xF4", "&otilde": "\xF5", "&otilde;": "\xF5", "&ouml": "\xF6", "&ouml;": "\xF6", "&divide": "\xF7", "&divide;": "\xF7", "&oslash": "\xF8", "&oslash;": "\xF8", "&ugrave": "\xF9", "&ugrave;": "\xF9", "&uacute": "\xFA", "&uacute;": "\xFA", "&ucirc": "\xFB", "&ucirc;": "\xFB", "&uuml": "\xFC", "&uuml;": "\xFC", "&yacute": "\xFD", "&yacute;": "\xFD", "&thorn": "\xFE", "&thorn;": "\xFE", "&yuml": "\xFF", "&yuml;": "\xFF", "&quot": '"', "&quot;": '"', "&amp": "&", "&amp;": "&", "&lt": "<", "&lt;": "<", "&gt": ">", "&gt;": ">", "&OElig;": "\u0152", "&oelig;": "\u0153", "&Scaron;": "\u0160", "&scaron;": "\u0161", "&Yuml;": "\u0178", "&circ;": "\u02C6", "&tilde;": "\u02DC", "&ensp;": "\u2002", "&emsp;": "\u2003", "&thinsp;": "\u2009", "&zwnj;": "\u200C", "&zwj;": "\u200D", "&lrm;": "\u200E", "&rlm;": "\u200F", "&ndash;": "\u2013", "&mdash;": "\u2014", "&lsquo;": "\u2018", "&rsquo;": "\u2019", "&sbquo;": "\u201A", "&ldquo;": "\u201C", "&rdquo;": "\u201D", "&bdquo;": "\u201E", "&dagger;": "\u2020", "&Dagger;": "\u2021", "&permil;": "\u2030", "&lsaquo;": "\u2039", "&rsaquo;": "\u203A", "&euro;": "\u20AC", "&fnof;": "\u0192", "&Alpha;": "\u0391", "&Beta;": "\u0392", "&Gamma;": "\u0393", "&Delta;": "\u0394", "&Epsilon;": "\u0395", "&Zeta;": "\u0396", "&Eta;": "\u0397", "&Theta;": "\u0398", "&Iota;": "\u0399", "&Kappa;": "\u039A", "&Lambda;": "\u039B", "&Mu;": "\u039C", "&Nu;": "\u039D", "&Xi;": "\u039E", "&Omicron;": "\u039F", "&Pi;": "\u03A0", "&Rho;": "\u03A1", "&Sigma;": "\u03A3", "&Tau;": "\u03A4", "&Upsilon;": "\u03A5", "&Phi;": "\u03A6", "&Chi;": "\u03A7", "&Psi;": "\u03A8", "&Omega;": "\u03A9", "&alpha;": "\u03B1", "&beta;": "\u03B2", "&gamma;": "\u03B3", "&delta;": "\u03B4", "&epsilon;": "\u03B5", "&zeta;": "\u03B6", "&eta;": "\u03B7", "&theta;": "\u03B8", "&iota;": "\u03B9", "&kappa;": "\u03BA", "&lambda;": "\u03BB", "&mu;": "\u03BC", "&nu;": "\u03BD", "&xi;": "\u03BE", "&omicron;": "\u03BF", "&pi;": "\u03C0", "&rho;": "\u03C1", "&sigmaf;": "\u03C2", "&sigma;": "\u03C3", "&tau;": "\u03C4", "&upsilon;": "\u03C5", "&phi;": "\u03C6", "&chi;": "\u03C7", "&psi;": "\u03C8", "&omega;": "\u03C9", "&thetasym;": "\u03D1", "&upsih;": "\u03D2", "&piv;": "\u03D6", "&bull;": "\u2022", "&hellip;": "\u2026", "&prime;": "\u2032", "&Prime;": "\u2033", "&oline;": "\u203E", "&frasl;": "\u2044", "&weierp;": "\u2118", "&image;": "\u2111", "&real;": "\u211C", "&trade;": "\u2122", "&alefsym;": "\u2135", "&larr;": "\u2190", "&uarr;": "\u2191", "&rarr;": "\u2192", "&darr;": "\u2193", "&harr;": "\u2194", "&crarr;": "\u21B5", "&lArr;": "\u21D0", "&uArr;": "\u21D1", "&rArr;": "\u21D2", "&dArr;": "\u21D3", "&hArr;": "\u21D4", "&forall;": "\u2200", "&part;": "\u2202", "&exist;": "\u2203", "&empty;": "\u2205", "&nabla;": "\u2207", "&isin;": "\u2208", "&notin;": "\u2209", "&ni;": "\u220B", "&prod;": "\u220F", "&sum;": "\u2211", "&minus;": "\u2212", "&lowast;": "\u2217", "&radic;": "\u221A", "&prop;": "\u221D", "&infin;": "\u221E", "&ang;": "\u2220", "&and;": "\u2227", "&or;": "\u2228", "&cap;": "\u2229", "&cup;": "\u222A", "&int;": "\u222B", "&there4;": "\u2234", "&sim;": "\u223C", "&cong;": "\u2245", "&asymp;": "\u2248", "&ne;": "\u2260", "&equiv;": "\u2261", "&le;": "\u2264", "&ge;": "\u2265", "&sub;": "\u2282", "&sup;": "\u2283", "&nsub;": "\u2284", "&sube;": "\u2286", "&supe;": "\u2287", "&oplus;": "\u2295", "&otimes;": "\u2297", "&perp;": "\u22A5", "&sdot;": "\u22C5", "&lceil;": "\u2308", "&rceil;": "\u2309", "&lfloor;": "\u230A", "&rfloor;": "\u230B", "&lang;": "\u2329", "&rang;": "\u232A", "&loz;": "\u25CA", "&spades;": "\u2660", "&clubs;": "\u2663", "&hearts;": "\u2665", "&diams;": "\u2666" }, characters: { "'": "&apos;", "\xA0": "&nbsp;", "\xA1": "&iexcl;", "\xA2": "&cent;", "\xA3": "&pound;", "\xA4": "&curren;", "\xA5": "&yen;", "\xA6": "&brvbar;", "\xA7": "&sect;", "\xA8": "&uml;", "\xA9": "&copy;", "\xAA": "&ordf;", "\xAB": "&laquo;", "\xAC": "&not;", "\xAD": "&shy;", "\xAE": "&reg;", "\xAF": "&macr;", "\xB0": "&deg;", "\xB1": "&plusmn;", "\xB2": "&sup2;", "\xB3": "&sup3;", "\xB4": "&acute;", "\xB5": "&micro;", "\xB6": "&para;", "\xB7": "&middot;", "\xB8": "&cedil;", "\xB9": "&sup1;", "\xBA": "&ordm;", "\xBB": "&raquo;", "\xBC": "&frac14;", "\xBD": "&frac12;", "\xBE": "&frac34;", "\xBF": "&iquest;", "\xC0": "&Agrave;", "\xC1": "&Aacute;", "\xC2": "&Acirc;", "\xC3": "&Atilde;", "\xC4": "&Auml;", "\xC5": "&Aring;", "\xC6": "&AElig;", "\xC7": "&Ccedil;", "\xC8": "&Egrave;", "\xC9": "&Eacute;", "\xCA": "&Ecirc;", "\xCB": "&Euml;", "\xCC": "&Igrave;", "\xCD": "&Iacute;", "\xCE": "&Icirc;", "\xCF": "&Iuml;", "\xD0": "&ETH;", "\xD1": "&Ntilde;", "\xD2": "&Ograve;", "\xD3": "&Oacute;", "\xD4": "&Ocirc;", "\xD5": "&Otilde;", "\xD6": "&Ouml;", "\xD7": "&times;", "\xD8": "&Oslash;", "\xD9": "&Ugrave;", "\xDA": "&Uacute;", "\xDB": "&Ucirc;", "\xDC": "&Uuml;", "\xDD": "&Yacute;", "\xDE": "&THORN;", "\xDF": "&szlig;", "\xE0": "&agrave;", "\xE1": "&aacute;", "\xE2": "&acirc;", "\xE3": "&atilde;", "\xE4": "&auml;", "\xE5": "&aring;", "\xE6": "&aelig;", "\xE7": "&ccedil;", "\xE8": "&egrave;", "\xE9": "&eacute;", "\xEA": "&ecirc;", "\xEB": "&euml;", "\xEC": "&igrave;", "\xED": "&iacute;", "\xEE": "&icirc;", "\xEF": "&iuml;", "\xF0": "&eth;", "\xF1": "&ntilde;", "\xF2": "&ograve;", "\xF3": "&oacute;", "\xF4": "&ocirc;", "\xF5": "&otilde;", "\xF6": "&ouml;", "\xF7": "&divide;", "\xF8": "&oslash;", "\xF9": "&ugrave;", "\xFA": "&uacute;", "\xFB": "&ucirc;", "\xFC": "&uuml;", "\xFD": "&yacute;", "\xFE": "&thorn;", "\xFF": "&yuml;", '"': "&quot;", "&": "&amp;", "<": "&lt;", ">": "&gt;", "\u0152": "&OElig;", "\u0153": "&oelig;", "\u0160": "&Scaron;", "\u0161": "&scaron;", "\u0178": "&Yuml;", "\u02C6": "&circ;", "\u02DC": "&tilde;", "\u2002": "&ensp;", "\u2003": "&emsp;", "\u2009": "&thinsp;", "\u200C": "&zwnj;", "\u200D": "&zwj;", "\u200E": "&lrm;", "\u200F": "&rlm;", "\u2013": "&ndash;", "\u2014": "&mdash;", "\u2018": "&lsquo;", "\u2019": "&rsquo;", "\u201A": "&sbquo;", "\u201C": "&ldquo;", "\u201D": "&rdquo;", "\u201E": "&bdquo;", "\u2020": "&dagger;", "\u2021": "&Dagger;", "\u2030": "&permil;", "\u2039": "&lsaquo;", "\u203A": "&rsaquo;", "\u20AC": "&euro;", "\u0192": "&fnof;", "\u0391": "&Alpha;", "\u0392": "&Beta;", "\u0393": "&Gamma;", "\u0394": "&Delta;", "\u0395": "&Epsilon;", "\u0396": "&Zeta;", "\u0397": "&Eta;", "\u0398": "&Theta;", "\u0399": "&Iota;", "\u039A": "&Kappa;", "\u039B": "&Lambda;", "\u039C": "&Mu;", "\u039D": "&Nu;", "\u039E": "&Xi;", "\u039F": "&Omicron;", "\u03A0": "&Pi;", "\u03A1": "&Rho;", "\u03A3": "&Sigma;", "\u03A4": "&Tau;", "\u03A5": "&Upsilon;", "\u03A6": "&Phi;", "\u03A7": "&Chi;", "\u03A8": "&Psi;", "\u03A9": "&Omega;", "\u03B1": "&alpha;", "\u03B2": "&beta;", "\u03B3": "&gamma;", "\u03B4": "&delta;", "\u03B5": "&epsilon;", "\u03B6": "&zeta;", "\u03B7": "&eta;", "\u03B8": "&theta;", "\u03B9": "&iota;", "\u03BA": "&kappa;", "\u03BB": "&lambda;", "\u03BC": "&mu;", "\u03BD": "&nu;", "\u03BE": "&xi;", "\u03BF": "&omicron;", "\u03C0": "&pi;", "\u03C1": "&rho;", "\u03C2": "&sigmaf;", "\u03C3": "&sigma;", "\u03C4": "&tau;", "\u03C5": "&upsilon;", "\u03C6": "&phi;", "\u03C7": "&chi;", "\u03C8": "&psi;", "\u03C9": "&omega;", "\u03D1": "&thetasym;", "\u03D2": "&upsih;", "\u03D6": "&piv;", "\u2022": "&bull;", "\u2026": "&hellip;", "\u2032": "&prime;", "\u2033": "&Prime;", "\u203E": "&oline;", "\u2044": "&frasl;", "\u2118": "&weierp;", "\u2111": "&image;", "\u211C": "&real;", "\u2122": "&trade;", "\u2135": "&alefsym;", "\u2190": "&larr;", "\u2191": "&uarr;", "\u2192": "&rarr;", "\u2193": "&darr;", "\u2194": "&harr;", "\u21B5": "&crarr;", "\u21D0": "&lArr;", "\u21D1": "&uArr;", "\u21D2": "&rArr;", "\u21D3": "&dArr;", "\u21D4": "&hArr;", "\u2200": "&forall;", "\u2202": "&part;", "\u2203": "&exist;", "\u2205": "&empty;", "\u2207": "&nabla;", "\u2208": "&isin;", "\u2209": "&notin;", "\u220B": "&ni;", "\u220F": "&prod;", "\u2211": "&sum;", "\u2212": "&minus;", "\u2217": "&lowast;", "\u221A": "&radic;", "\u221D": "&prop;", "\u221E": "&infin;", "\u2220": "&ang;", "\u2227": "&and;", "\u2228": "&or;", "\u2229": "&cap;", "\u222A": "&cup;", "\u222B": "&int;", "\u2234": "&there4;", "\u223C": "&sim;", "\u2245": "&cong;", "\u2248": "&asymp;", "\u2260": "&ne;", "\u2261": "&equiv;", "\u2264": "&le;", "\u2265": "&ge;", "\u2282": "&sub;", "\u2283": "&sup;", "\u2284": "&nsub;", "\u2286": "&sube;", "\u2287": "&supe;", "\u2295": "&oplus;", "\u2297": "&otimes;", "\u22A5": "&perp;", "\u22C5": "&sdot;", "\u2308": "&lceil;", "\u2309": "&rceil;", "\u230A": "&lfloor;", "\u230B": "&rfloor;", "\u2329": "&lang;", "\u232A": "&rang;", "\u25CA": "&loz;", "\u2660": "&spades;", "\u2663": "&clubs;", "\u2665": "&hearts;", "\u2666": "&diams;" } }, html5: { entities: { "&AElig": "\xC6", "&AElig;": "\xC6", "&AMP": "&", "&AMP;": "&", "&Aacute": "\xC1", "&Aacute;": "\xC1", "&Abreve;": "\u0102", "&Acirc": "\xC2", "&Acirc;": "\xC2", "&Acy;": "\u0410", "&Afr;": "\u{1D504}", "&Agrave": "\xC0", "&Agrave;": "\xC0", "&Alpha;": "\u0391", "&Amacr;": "\u0100", "&And;": "\u2A53", "&Aogon;": "\u0104", "&Aopf;": "\u{1D538}", "&ApplyFunction;": "\u2061", "&Aring": "\xC5", "&Aring;": "\xC5", "&Ascr;": "\u{1D49C}", "&Assign;": "\u2254", "&Atilde": "\xC3", "&Atilde;": "\xC3", "&Auml": "\xC4", "&Auml;": "\xC4", "&Backslash;": "\u2216", "&Barv;": "\u2AE7", "&Barwed;": "\u2306", "&Bcy;": "\u0411", "&Because;": "\u2235", "&Bernoullis;": "\u212C", "&Beta;": "\u0392", "&Bfr;": "\u{1D505}", "&Bopf;": "\u{1D539}", "&Breve;": "\u02D8", "&Bscr;": "\u212C", "&Bumpeq;": "\u224E", "&CHcy;": "\u0427", "&COPY": "\xA9", "&COPY;": "\xA9", "&Cacute;": "\u0106", "&Cap;": "\u22D2", "&CapitalDifferentialD;": "\u2145", "&Cayleys;": "\u212D", "&Ccaron;": "\u010C", "&Ccedil": "\xC7", "&Ccedil;": "\xC7", "&Ccirc;": "\u0108", "&Cconint;": "\u2230", "&Cdot;": "\u010A", "&Cedilla;": "\xB8", "&CenterDot;": "\xB7", "&Cfr;": "\u212D", "&Chi;": "\u03A7", "&CircleDot;": "\u2299", "&CircleMinus;": "\u2296", "&CirclePlus;": "\u2295", "&CircleTimes;": "\u2297", "&ClockwiseContourIntegral;": "\u2232", "&CloseCurlyDoubleQuote;": "\u201D", "&CloseCurlyQuote;": "\u2019", "&Colon;": "\u2237", "&Colone;": "\u2A74", "&Congruent;": "\u2261", "&Conint;": "\u222F", "&ContourIntegral;": "\u222E", "&Copf;": "\u2102", "&Coproduct;": "\u2210", "&CounterClockwiseContourIntegral;": "\u2233", "&Cross;": "\u2A2F", "&Cscr;": "\u{1D49E}", "&Cup;": "\u22D3", "&CupCap;": "\u224D", "&DD;": "\u2145", "&DDotrahd;": "\u2911", "&DJcy;": "\u0402", "&DScy;": "\u0405", "&DZcy;": "\u040F", "&Dagger;": "\u2021", "&Darr;": "\u21A1", "&Dashv;": "\u2AE4", "&Dcaron;": "\u010E", "&Dcy;": "\u0414", "&Del;": "\u2207", "&Delta;": "\u0394", "&Dfr;": "\u{1D507}", "&DiacriticalAcute;": "\xB4", "&DiacriticalDot;": "\u02D9", "&DiacriticalDoubleAcute;": "\u02DD", "&DiacriticalGrave;": "`", "&DiacriticalTilde;": "\u02DC", "&Diamond;": "\u22C4", "&DifferentialD;": "\u2146", "&Dopf;": "\u{1D53B}", "&Dot;": "\xA8", "&DotDot;": "\u20DC", "&DotEqual;": "\u2250", "&DoubleContourIntegral;": "\u222F", "&DoubleDot;": "\xA8", "&DoubleDownArrow;": "\u21D3", "&DoubleLeftArrow;": "\u21D0", "&DoubleLeftRightArrow;": "\u21D4", "&DoubleLeftTee;": "\u2AE4", "&DoubleLongLeftArrow;": "\u27F8", "&DoubleLongLeftRightArrow;": "\u27FA", "&DoubleLongRightArrow;": "\u27F9", "&DoubleRightArrow;": "\u21D2", "&DoubleRightTee;": "\u22A8", "&DoubleUpArrow;": "\u21D1", "&DoubleUpDownArrow;": "\u21D5", "&DoubleVerticalBar;": "\u2225", "&DownArrow;": "\u2193", "&DownArrowBar;": "\u2913", "&DownArrowUpArrow;": "\u21F5", "&DownBreve;": "\u0311", "&DownLeftRightVector;": "\u2950", "&DownLeftTeeVector;": "\u295E", "&DownLeftVector;": "\u21BD", "&DownLeftVectorBar;": "\u2956", "&DownRightTeeVector;": "\u295F", "&DownRightVector;": "\u21C1", "&DownRightVectorBar;": "\u2957", "&DownTee;": "\u22A4", "&DownTeeArrow;": "\u21A7", "&Downarrow;": "\u21D3", "&Dscr;": "\u{1D49F}", "&Dstrok;": "\u0110", "&ENG;": "\u014A", "&ETH": "\xD0", "&ETH;": "\xD0", "&Eacute": "\xC9", "&Eacute;": "\xC9", "&Ecaron;": "\u011A", "&Ecirc": "\xCA", "&Ecirc;": "\xCA", "&Ecy;": "\u042D", "&Edot;": "\u0116", "&Efr;": "\u{1D508}", "&Egrave": "\xC8", "&Egrave;": "\xC8", "&Element;": "\u2208", "&Emacr;": "\u0112", "&EmptySmallSquare;": "\u25FB", "&EmptyVerySmallSquare;": "\u25AB", "&Eogon;": "\u0118", "&Eopf;": "\u{1D53C}", "&Epsilon;": "\u0395", "&Equal;": "\u2A75", "&EqualTilde;": "\u2242", "&Equilibrium;": "\u21CC", "&Escr;": "\u2130", "&Esim;": "\u2A73", "&Eta;": "\u0397", "&Euml": "\xCB", "&Euml;": "\xCB", "&Exists;": "\u2203", "&ExponentialE;": "\u2147", "&Fcy;": "\u0424", "&Ffr;": "\u{1D509}", "&FilledSmallSquare;": "\u25FC", "&FilledVerySmallSquare;": "\u25AA", "&Fopf;": "\u{1D53D}", "&ForAll;": "\u2200", "&Fouriertrf;": "\u2131", "&Fscr;": "\u2131", "&GJcy;": "\u0403", "&GT": ">", "&GT;": ">", "&Gamma;": "\u0393", "&Gammad;": "\u03DC", "&Gbreve;": "\u011E", "&Gcedil;": "\u0122", "&Gcirc;": "\u011C", "&Gcy;": "\u0413", "&Gdot;": "\u0120", "&Gfr;": "\u{1D50A}", "&Gg;": "\u22D9", "&Gopf;": "\u{1D53E}", "&GreaterEqual;": "\u2265", "&GreaterEqualLess;": "\u22DB", "&GreaterFullEqual;": "\u2267", "&GreaterGreater;": "\u2AA2", "&GreaterLess;": "\u2277", "&GreaterSlantEqual;": "\u2A7E", "&GreaterTilde;": "\u2273", "&Gscr;": "\u{1D4A2}", "&Gt;": "\u226B", "&HARDcy;": "\u042A", "&Hacek;": "\u02C7", "&Hat;": "^", "&Hcirc;": "\u0124", "&Hfr;": "\u210C", "&HilbertSpace;": "\u210B", "&Hopf;": "\u210D", "&HorizontalLine;": "\u2500", "&Hscr;": "\u210B", "&Hstrok;": "\u0126", "&HumpDownHump;": "\u224E", "&HumpEqual;": "\u224F", "&IEcy;": "\u0415", "&IJlig;": "\u0132", "&IOcy;": "\u0401", "&Iacute": "\xCD", "&Iacute;": "\xCD", "&Icirc": "\xCE", "&Icirc;": "\xCE", "&Icy;": "\u0418", "&Idot;": "\u0130", "&Ifr;": "\u2111", "&Igrave": "\xCC", "&Igrave;": "\xCC", "&Im;": "\u2111", "&Imacr;": "\u012A", "&ImaginaryI;": "\u2148", "&Implies;": "\u21D2", "&Int;": "\u222C", "&Integral;": "\u222B", "&Intersection;": "\u22C2", "&InvisibleComma;": "\u2063", "&InvisibleTimes;": "\u2062", "&Iogon;": "\u012E", "&Iopf;": "\u{1D540}", "&Iota;": "\u0399", "&Iscr;": "\u2110", "&Itilde;": "\u0128", "&Iukcy;": "\u0406", "&Iuml": "\xCF", "&Iuml;": "\xCF", "&Jcirc;": "\u0134", "&Jcy;": "\u0419", "&Jfr;": "\u{1D50D}", "&Jopf;": "\u{1D541}", "&Jscr;": "\u{1D4A5}", "&Jsercy;": "\u0408", "&Jukcy;": "\u0404", "&KHcy;": "\u0425", "&KJcy;": "\u040C", "&Kappa;": "\u039A", "&Kcedil;": "\u0136", "&Kcy;": "\u041A", "&Kfr;": "\u{1D50E}", "&Kopf;": "\u{1D542}", "&Kscr;": "\u{1D4A6}", "&LJcy;": "\u0409", "&LT": "<", "&LT;": "<", "&Lacute;": "\u0139", "&Lambda;": "\u039B", "&Lang;": "\u27EA", "&Laplacetrf;": "\u2112", "&Larr;": "\u219E", "&Lcaron;": "\u013D", "&Lcedil;": "\u013B", "&Lcy;": "\u041B", "&LeftAngleBracket;": "\u27E8", "&LeftArrow;": "\u2190", "&LeftArrowBar;": "\u21E4", "&LeftArrowRightArrow;": "\u21C6", "&LeftCeiling;": "\u2308", "&LeftDoubleBracket;": "\u27E6", "&LeftDownTeeVector;": "\u2961", "&LeftDownVector;": "\u21C3", "&LeftDownVectorBar;": "\u2959", "&LeftFloor;": "\u230A", "&LeftRightArrow;": "\u2194", "&LeftRightVector;": "\u294E", "&LeftTee;": "\u22A3", "&LeftTeeArrow;": "\u21A4", "&LeftTeeVector;": "\u295A", "&LeftTriangle;": "\u22B2", "&LeftTriangleBar;": "\u29CF", "&LeftTriangleEqual;": "\u22B4", "&LeftUpDownVector;": "\u2951", "&LeftUpTeeVector;": "\u2960", "&LeftUpVector;": "\u21BF", "&LeftUpVectorBar;": "\u2958", "&LeftVector;": "\u21BC", "&LeftVectorBar;": "\u2952", "&Leftarrow;": "\u21D0", "&Leftrightarrow;": "\u21D4", "&LessEqualGreater;": "\u22DA", "&LessFullEqual;": "\u2266", "&LessGreater;": "\u2276", "&LessLess;": "\u2AA1", "&LessSlantEqual;": "\u2A7D", "&LessTilde;": "\u2272", "&Lfr;": "\u{1D50F}", "&Ll;": "\u22D8", "&Lleftarrow;": "\u21DA", "&Lmidot;": "\u013F", "&LongLeftArrow;": "\u27F5", "&LongLeftRightArrow;": "\u27F7", "&LongRightArrow;": "\u27F6", "&Longleftarrow;": "\u27F8", "&Longleftrightarrow;": "\u27FA", "&Longrightarrow;": "\u27F9", "&Lopf;": "\u{1D543}", "&LowerLeftArrow;": "\u2199", "&LowerRightArrow;": "\u2198", "&Lscr;": "\u2112", "&Lsh;": "\u21B0", "&Lstrok;": "\u0141", "&Lt;": "\u226A", "&Map;": "\u2905", "&Mcy;": "\u041C", "&MediumSpace;": "\u205F", "&Mellintrf;": "\u2133", "&Mfr;": "\u{1D510}", "&MinusPlus;": "\u2213", "&Mopf;": "\u{1D544}", "&Mscr;": "\u2133", "&Mu;": "\u039C", "&NJcy;": "\u040A", "&Nacute;": "\u0143", "&Ncaron;": "\u0147", "&Ncedil;": "\u0145", "&Ncy;": "\u041D", "&NegativeMediumSpace;": "\u200B", "&NegativeThickSpace;": "\u200B", "&NegativeThinSpace;": "\u200B", "&NegativeVeryThinSpace;": "\u200B", "&NestedGreaterGreater;": "\u226B", "&NestedLessLess;": "\u226A", "&NewLine;": "\n", "&Nfr;": "\u{1D511}", "&NoBreak;": "\u2060", "&NonBreakingSpace;": "\xA0", "&Nopf;": "\u2115", "&Not;": "\u2AEC", "&NotCongruent;": "\u2262", "&NotCupCap;": "\u226D", "&NotDoubleVerticalBar;": "\u2226", "&NotElement;": "\u2209", "&NotEqual;": "\u2260", "&NotEqualTilde;": "\u2242\u0338", "&NotExists;": "\u2204", "&NotGreater;": "\u226F", "&NotGreaterEqual;": "\u2271", "&NotGreaterFullEqual;": "\u2267\u0338", "&NotGreaterGreater;": "\u226B\u0338", "&NotGreaterLess;": "\u2279", "&NotGreaterSlantEqual;": "\u2A7E\u0338", "&NotGreaterTilde;": "\u2275", "&NotHumpDownHump;": "\u224E\u0338", "&NotHumpEqual;": "\u224F\u0338", "&NotLeftTriangle;": "\u22EA", "&NotLeftTriangleBar;": "\u29CF\u0338", "&NotLeftTriangleEqual;": "\u22EC", "&NotLess;": "\u226E", "&NotLessEqual;": "\u2270", "&NotLessGreater;": "\u2278", "&NotLessLess;": "\u226A\u0338", "&NotLessSlantEqual;": "\u2A7D\u0338", "&NotLessTilde;": "\u2274", "&NotNestedGreaterGreater;": "\u2AA2\u0338", "&NotNestedLessLess;": "\u2AA1\u0338", "&NotPrecedes;": "\u2280", "&NotPrecedesEqual;": "\u2AAF\u0338", "&NotPrecedesSlantEqual;": "\u22E0", "&NotReverseElement;": "\u220C", "&NotRightTriangle;": "\u22EB", "&NotRightTriangleBar;": "\u29D0\u0338", "&NotRightTriangleEqual;": "\u22ED", "&NotSquareSubset;": "\u228F\u0338", "&NotSquareSubsetEqual;": "\u22E2", "&NotSquareSuperset;": "\u2290\u0338", "&NotSquareSupersetEqual;": "\u22E3", "&NotSubset;": "\u2282\u20D2", "&NotSubsetEqual;": "\u2288", "&NotSucceeds;": "\u2281", "&NotSucceedsEqual;": "\u2AB0\u0338", "&NotSucceedsSlantEqual;": "\u22E1", "&NotSucceedsTilde;": "\u227F\u0338", "&NotSuperset;": "\u2283\u20D2", "&NotSupersetEqual;": "\u2289", "&NotTilde;": "\u2241", "&NotTildeEqual;": "\u2244", "&NotTildeFullEqual;": "\u2247", "&NotTildeTilde;": "\u2249", "&NotVerticalBar;": "\u2224", "&Nscr;": "\u{1D4A9}", "&Ntilde": "\xD1", "&Ntilde;": "\xD1", "&Nu;": "\u039D", "&OElig;": "\u0152", "&Oacute": "\xD3", "&Oacute;": "\xD3", "&Ocirc": "\xD4", "&Ocirc;": "\xD4", "&Ocy;": "\u041E", "&Odblac;": "\u0150", "&Ofr;": "\u{1D512}", "&Ograve": "\xD2", "&Ograve;": "\xD2", "&Omacr;": "\u014C", "&Omega;": "\u03A9", "&Omicron;": "\u039F", "&Oopf;": "\u{1D546}", "&OpenCurlyDoubleQuote;": "\u201C", "&OpenCurlyQuote;": "\u2018", "&Or;": "\u2A54", "&Oscr;": "\u{1D4AA}", "&Oslash": "\xD8", "&Oslash;": "\xD8", "&Otilde": "\xD5", "&Otilde;": "\xD5", "&Otimes;": "\u2A37", "&Ouml": "\xD6", "&Ouml;": "\xD6", "&OverBar;": "\u203E", "&OverBrace;": "\u23DE", "&OverBracket;": "\u23B4", "&OverParenthesis;": "\u23DC", "&PartialD;": "\u2202", "&Pcy;": "\u041F", "&Pfr;": "\u{1D513}", "&Phi;": "\u03A6", "&Pi;": "\u03A0", "&PlusMinus;": "\xB1", "&Poincareplane;": "\u210C", "&Popf;": "\u2119", "&Pr;": "\u2ABB", "&Precedes;": "\u227A", "&PrecedesEqual;": "\u2AAF", "&PrecedesSlantEqual;": "\u227C", "&PrecedesTilde;": "\u227E", "&Prime;": "\u2033", "&Product;": "\u220F", "&Proportion;": "\u2237", "&Proportional;": "\u221D", "&Pscr;": "\u{1D4AB}", "&Psi;": "\u03A8", "&QUOT": '"', "&QUOT;": '"', "&Qfr;": "\u{1D514}", "&Qopf;": "\u211A", "&Qscr;": "\u{1D4AC}", "&RBarr;": "\u2910", "&REG": "\xAE", "&REG;": "\xAE", "&Racute;": "\u0154", "&Rang;": "\u27EB", "&Rarr;": "\u21A0", "&Rarrtl;": "\u2916", "&Rcaron;": "\u0158", "&Rcedil;": "\u0156", "&Rcy;": "\u0420", "&Re;": "\u211C", "&ReverseElement;": "\u220B", "&ReverseEquilibrium;": "\u21CB", "&ReverseUpEquilibrium;": "\u296F", "&Rfr;": "\u211C", "&Rho;": "\u03A1", "&RightAngleBracket;": "\u27E9", "&RightArrow;": "\u2192", "&RightArrowBar;": "\u21E5", "&RightArrowLeftArrow;": "\u21C4", "&RightCeiling;": "\u2309", "&RightDoubleBracket;": "\u27E7", "&RightDownTeeVector;": "\u295D", "&RightDownVector;": "\u21C2", "&RightDownVectorBar;": "\u2955", "&RightFloor;": "\u230B", "&RightTee;": "\u22A2", "&RightTeeArrow;": "\u21A6", "&RightTeeVector;": "\u295B", "&RightTriangle;": "\u22B3", "&RightTriangleBar;": "\u29D0", "&RightTriangleEqual;": "\u22B5", "&RightUpDownVector;": "\u294F", "&RightUpTeeVector;": "\u295C", "&RightUpVector;": "\u21BE", "&RightUpVectorBar;": "\u2954", "&RightVector;": "\u21C0", "&RightVectorBar;": "\u2953", "&Rightarrow;": "\u21D2", "&Ropf;": "\u211D", "&RoundImplies;": "\u2970", "&Rrightarrow;": "\u21DB", "&Rscr;": "\u211B", "&Rsh;": "\u21B1", "&RuleDelayed;": "\u29F4", "&SHCHcy;": "\u0429", "&SHcy;": "\u0428", "&SOFTcy;": "\u042C", "&Sacute;": "\u015A", "&Sc;": "\u2ABC", "&Scaron;": "\u0160", "&Scedil;": "\u015E", "&Scirc;": "\u015C", "&Scy;": "\u0421", "&Sfr;": "\u{1D516}", "&ShortDownArrow;": "\u2193", "&ShortLeftArrow;": "\u2190", "&ShortRightArrow;": "\u2192", "&ShortUpArrow;": "\u2191", "&Sigma;": "\u03A3", "&SmallCircle;": "\u2218", "&Sopf;": "\u{1D54A}", "&Sqrt;": "\u221A", "&Square;": "\u25A1", "&SquareIntersection;": "\u2293", "&SquareSubset;": "\u228F", "&SquareSubsetEqual;": "\u2291", "&SquareSuperset;": "\u2290", "&SquareSupersetEqual;": "\u2292", "&SquareUnion;": "\u2294", "&Sscr;": "\u{1D4AE}", "&Star;": "\u22C6", "&Sub;": "\u22D0", "&Subset;": "\u22D0", "&SubsetEqual;": "\u2286", "&Succeeds;": "\u227B", "&SucceedsEqual;": "\u2AB0", "&SucceedsSlantEqual;": "\u227D", "&SucceedsTilde;": "\u227F", "&SuchThat;": "\u220B", "&Sum;": "\u2211", "&Sup;": "\u22D1", "&Superset;": "\u2283", "&SupersetEqual;": "\u2287", "&Supset;": "\u22D1", "&THORN": "\xDE", "&THORN;": "\xDE", "&TRADE;": "\u2122", "&TSHcy;": "\u040B", "&TScy;": "\u0426", "&Tab;": "	", "&Tau;": "\u03A4", "&Tcaron;": "\u0164", "&Tcedil;": "\u0162", "&Tcy;": "\u0422", "&Tfr;": "\u{1D517}", "&Therefore;": "\u2234", "&Theta;": "\u0398", "&ThickSpace;": "\u205F\u200A", "&ThinSpace;": "\u2009", "&Tilde;": "\u223C", "&TildeEqual;": "\u2243", "&TildeFullEqual;": "\u2245", "&TildeTilde;": "\u2248", "&Topf;": "\u{1D54B}", "&TripleDot;": "\u20DB", "&Tscr;": "\u{1D4AF}", "&Tstrok;": "\u0166", "&Uacute": "\xDA", "&Uacute;": "\xDA", "&Uarr;": "\u219F", "&Uarrocir;": "\u2949", "&Ubrcy;": "\u040E", "&Ubreve;": "\u016C", "&Ucirc": "\xDB", "&Ucirc;": "\xDB", "&Ucy;": "\u0423", "&Udblac;": "\u0170", "&Ufr;": "\u{1D518}", "&Ugrave": "\xD9", "&Ugrave;": "\xD9", "&Umacr;": "\u016A", "&UnderBar;": "_", "&UnderBrace;": "\u23DF", "&UnderBracket;": "\u23B5", "&UnderParenthesis;": "\u23DD", "&Union;": "\u22C3", "&UnionPlus;": "\u228E", "&Uogon;": "\u0172", "&Uopf;": "\u{1D54C}", "&UpArrow;": "\u2191", "&UpArrowBar;": "\u2912", "&UpArrowDownArrow;": "\u21C5", "&UpDownArrow;": "\u2195", "&UpEquilibrium;": "\u296E", "&UpTee;": "\u22A5", "&UpTeeArrow;": "\u21A5", "&Uparrow;": "\u21D1", "&Updownarrow;": "\u21D5", "&UpperLeftArrow;": "\u2196", "&UpperRightArrow;": "\u2197", "&Upsi;": "\u03D2", "&Upsilon;": "\u03A5", "&Uring;": "\u016E", "&Uscr;": "\u{1D4B0}", "&Utilde;": "\u0168", "&Uuml": "\xDC", "&Uuml;": "\xDC", "&VDash;": "\u22AB", "&Vbar;": "\u2AEB", "&Vcy;": "\u0412", "&Vdash;": "\u22A9", "&Vdashl;": "\u2AE6", "&Vee;": "\u22C1", "&Verbar;": "\u2016", "&Vert;": "\u2016", "&VerticalBar;": "\u2223", "&VerticalLine;": "|", "&VerticalSeparator;": "\u2758", "&VerticalTilde;": "\u2240", "&VeryThinSpace;": "\u200A", "&Vfr;": "\u{1D519}", "&Vopf;": "\u{1D54D}", "&Vscr;": "\u{1D4B1}", "&Vvdash;": "\u22AA", "&Wcirc;": "\u0174", "&Wedge;": "\u22C0", "&Wfr;": "\u{1D51A}", "&Wopf;": "\u{1D54E}", "&Wscr;": "\u{1D4B2}", "&Xfr;": "\u{1D51B}", "&Xi;": "\u039E", "&Xopf;": "\u{1D54F}", "&Xscr;": "\u{1D4B3}", "&YAcy;": "\u042F", "&YIcy;": "\u0407", "&YUcy;": "\u042E", "&Yacute": "\xDD", "&Yacute;": "\xDD", "&Ycirc;": "\u0176", "&Ycy;": "\u042B", "&Yfr;": "\u{1D51C}", "&Yopf;": "\u{1D550}", "&Yscr;": "\u{1D4B4}", "&Yuml;": "\u0178", "&ZHcy;": "\u0416", "&Zacute;": "\u0179", "&Zcaron;": "\u017D", "&Zcy;": "\u0417", "&Zdot;": "\u017B", "&ZeroWidthSpace;": "\u200B", "&Zeta;": "\u0396", "&Zfr;": "\u2128", "&Zopf;": "\u2124", "&Zscr;": "\u{1D4B5}", "&aacute": "\xE1", "&aacute;": "\xE1", "&abreve;": "\u0103", "&ac;": "\u223E", "&acE;": "\u223E\u0333", "&acd;": "\u223F", "&acirc": "\xE2", "&acirc;": "\xE2", "&acute": "\xB4", "&acute;": "\xB4", "&acy;": "\u0430", "&aelig": "\xE6", "&aelig;": "\xE6", "&af;": "\u2061", "&afr;": "\u{1D51E}", "&agrave": "\xE0", "&agrave;": "\xE0", "&alefsym;": "\u2135", "&aleph;": "\u2135", "&alpha;": "\u03B1", "&amacr;": "\u0101", "&amalg;": "\u2A3F", "&amp": "&", "&amp;": "&", "&and;": "\u2227", "&andand;": "\u2A55", "&andd;": "\u2A5C", "&andslope;": "\u2A58", "&andv;": "\u2A5A", "&ang;": "\u2220", "&ange;": "\u29A4", "&angle;": "\u2220", "&angmsd;": "\u2221", "&angmsdaa;": "\u29A8", "&angmsdab;": "\u29A9", "&angmsdac;": "\u29AA", "&angmsdad;": "\u29AB", "&angmsdae;": "\u29AC", "&angmsdaf;": "\u29AD", "&angmsdag;": "\u29AE", "&angmsdah;": "\u29AF", "&angrt;": "\u221F", "&angrtvb;": "\u22BE", "&angrtvbd;": "\u299D", "&angsph;": "\u2222", "&angst;": "\xC5", "&angzarr;": "\u237C", "&aogon;": "\u0105", "&aopf;": "\u{1D552}", "&ap;": "\u2248", "&apE;": "\u2A70", "&apacir;": "\u2A6F", "&ape;": "\u224A", "&apid;": "\u224B", "&apos;": "'", "&approx;": "\u2248", "&approxeq;": "\u224A", "&aring": "\xE5", "&aring;": "\xE5", "&ascr;": "\u{1D4B6}", "&ast;": "*", "&asymp;": "\u2248", "&asympeq;": "\u224D", "&atilde": "\xE3", "&atilde;": "\xE3", "&auml": "\xE4", "&auml;": "\xE4", "&awconint;": "\u2233", "&awint;": "\u2A11", "&bNot;": "\u2AED", "&backcong;": "\u224C", "&backepsilon;": "\u03F6", "&backprime;": "\u2035", "&backsim;": "\u223D", "&backsimeq;": "\u22CD", "&barvee;": "\u22BD", "&barwed;": "\u2305", "&barwedge;": "\u2305", "&bbrk;": "\u23B5", "&bbrktbrk;": "\u23B6", "&bcong;": "\u224C", "&bcy;": "\u0431", "&bdquo;": "\u201E", "&becaus;": "\u2235", "&because;": "\u2235", "&bemptyv;": "\u29B0", "&bepsi;": "\u03F6", "&bernou;": "\u212C", "&beta;": "\u03B2", "&beth;": "\u2136", "&between;": "\u226C", "&bfr;": "\u{1D51F}", "&bigcap;": "\u22C2", "&bigcirc;": "\u25EF", "&bigcup;": "\u22C3", "&bigodot;": "\u2A00", "&bigoplus;": "\u2A01", "&bigotimes;": "\u2A02", "&bigsqcup;": "\u2A06", "&bigstar;": "\u2605", "&bigtriangledown;": "\u25BD", "&bigtriangleup;": "\u25B3", "&biguplus;": "\u2A04", "&bigvee;": "\u22C1", "&bigwedge;": "\u22C0", "&bkarow;": "\u290D", "&blacklozenge;": "\u29EB", "&blacksquare;": "\u25AA", "&blacktriangle;": "\u25B4", "&blacktriangledown;": "\u25BE", "&blacktriangleleft;": "\u25C2", "&blacktriangleright;": "\u25B8", "&blank;": "\u2423", "&blk12;": "\u2592", "&blk14;": "\u2591", "&blk34;": "\u2593", "&block;": "\u2588", "&bne;": "=\u20E5", "&bnequiv;": "\u2261\u20E5", "&bnot;": "\u2310", "&bopf;": "\u{1D553}", "&bot;": "\u22A5", "&bottom;": "\u22A5", "&bowtie;": "\u22C8", "&boxDL;": "\u2557", "&boxDR;": "\u2554", "&boxDl;": "\u2556", "&boxDr;": "\u2553", "&boxH;": "\u2550", "&boxHD;": "\u2566", "&boxHU;": "\u2569", "&boxHd;": "\u2564", "&boxHu;": "\u2567", "&boxUL;": "\u255D", "&boxUR;": "\u255A", "&boxUl;": "\u255C", "&boxUr;": "\u2559", "&boxV;": "\u2551", "&boxVH;": "\u256C", "&boxVL;": "\u2563", "&boxVR;": "\u2560", "&boxVh;": "\u256B", "&boxVl;": "\u2562", "&boxVr;": "\u255F", "&boxbox;": "\u29C9", "&boxdL;": "\u2555", "&boxdR;": "\u2552", "&boxdl;": "\u2510", "&boxdr;": "\u250C", "&boxh;": "\u2500", "&boxhD;": "\u2565", "&boxhU;": "\u2568", "&boxhd;": "\u252C", "&boxhu;": "\u2534", "&boxminus;": "\u229F", "&boxplus;": "\u229E", "&boxtimes;": "\u22A0", "&boxuL;": "\u255B", "&boxuR;": "\u2558", "&boxul;": "\u2518", "&boxur;": "\u2514", "&boxv;": "\u2502", "&boxvH;": "\u256A", "&boxvL;": "\u2561", "&boxvR;": "\u255E", "&boxvh;": "\u253C", "&boxvl;": "\u2524", "&boxvr;": "\u251C", "&bprime;": "\u2035", "&breve;": "\u02D8", "&brvbar": "\xA6", "&brvbar;": "\xA6", "&bscr;": "\u{1D4B7}", "&bsemi;": "\u204F", "&bsim;": "\u223D", "&bsime;": "\u22CD", "&bsol;": "\\", "&bsolb;": "\u29C5", "&bsolhsub;": "\u27C8", "&bull;": "\u2022", "&bullet;": "\u2022", "&bump;": "\u224E", "&bumpE;": "\u2AAE", "&bumpe;": "\u224F", "&bumpeq;": "\u224F", "&cacute;": "\u0107", "&cap;": "\u2229", "&capand;": "\u2A44", "&capbrcup;": "\u2A49", "&capcap;": "\u2A4B", "&capcup;": "\u2A47", "&capdot;": "\u2A40", "&caps;": "\u2229\uFE00", "&caret;": "\u2041", "&caron;": "\u02C7", "&ccaps;": "\u2A4D", "&ccaron;": "\u010D", "&ccedil": "\xE7", "&ccedil;": "\xE7", "&ccirc;": "\u0109", "&ccups;": "\u2A4C", "&ccupssm;": "\u2A50", "&cdot;": "\u010B", "&cedil": "\xB8", "&cedil;": "\xB8", "&cemptyv;": "\u29B2", "&cent": "\xA2", "&cent;": "\xA2", "&centerdot;": "\xB7", "&cfr;": "\u{1D520}", "&chcy;": "\u0447", "&check;": "\u2713", "&checkmark;": "\u2713", "&chi;": "\u03C7", "&cir;": "\u25CB", "&cirE;": "\u29C3", "&circ;": "\u02C6", "&circeq;": "\u2257", "&circlearrowleft;": "\u21BA", "&circlearrowright;": "\u21BB", "&circledR;": "\xAE", "&circledS;": "\u24C8", "&circledast;": "\u229B", "&circledcirc;": "\u229A", "&circleddash;": "\u229D", "&cire;": "\u2257", "&cirfnint;": "\u2A10", "&cirmid;": "\u2AEF", "&cirscir;": "\u29C2", "&clubs;": "\u2663", "&clubsuit;": "\u2663", "&colon;": ":", "&colone;": "\u2254", "&coloneq;": "\u2254", "&comma;": ",", "&commat;": "@", "&comp;": "\u2201", "&compfn;": "\u2218", "&complement;": "\u2201", "&complexes;": "\u2102", "&cong;": "\u2245", "&congdot;": "\u2A6D", "&conint;": "\u222E", "&copf;": "\u{1D554}", "&coprod;": "\u2210", "&copy": "\xA9", "&copy;": "\xA9", "&copysr;": "\u2117", "&crarr;": "\u21B5", "&cross;": "\u2717", "&cscr;": "\u{1D4B8}", "&csub;": "\u2ACF", "&csube;": "\u2AD1", "&csup;": "\u2AD0", "&csupe;": "\u2AD2", "&ctdot;": "\u22EF", "&cudarrl;": "\u2938", "&cudarrr;": "\u2935", "&cuepr;": "\u22DE", "&cuesc;": "\u22DF", "&cularr;": "\u21B6", "&cularrp;": "\u293D", "&cup;": "\u222A", "&cupbrcap;": "\u2A48", "&cupcap;": "\u2A46", "&cupcup;": "\u2A4A", "&cupdot;": "\u228D", "&cupor;": "\u2A45", "&cups;": "\u222A\uFE00", "&curarr;": "\u21B7", "&curarrm;": "\u293C", "&curlyeqprec;": "\u22DE", "&curlyeqsucc;": "\u22DF", "&curlyvee;": "\u22CE", "&curlywedge;": "\u22CF", "&curren": "\xA4", "&curren;": "\xA4", "&curvearrowleft;": "\u21B6", "&curvearrowright;": "\u21B7", "&cuvee;": "\u22CE", "&cuwed;": "\u22CF", "&cwconint;": "\u2232", "&cwint;": "\u2231", "&cylcty;": "\u232D", "&dArr;": "\u21D3", "&dHar;": "\u2965", "&dagger;": "\u2020", "&daleth;": "\u2138", "&darr;": "\u2193", "&dash;": "\u2010", "&dashv;": "\u22A3", "&dbkarow;": "\u290F", "&dblac;": "\u02DD", "&dcaron;": "\u010F", "&dcy;": "\u0434", "&dd;": "\u2146", "&ddagger;": "\u2021", "&ddarr;": "\u21CA", "&ddotseq;": "\u2A77", "&deg": "\xB0", "&deg;": "\xB0", "&delta;": "\u03B4", "&demptyv;": "\u29B1", "&dfisht;": "\u297F", "&dfr;": "\u{1D521}", "&dharl;": "\u21C3", "&dharr;": "\u21C2", "&diam;": "\u22C4", "&diamond;": "\u22C4", "&diamondsuit;": "\u2666", "&diams;": "\u2666", "&die;": "\xA8", "&digamma;": "\u03DD", "&disin;": "\u22F2", "&div;": "\xF7", "&divide": "\xF7", "&divide;": "\xF7", "&divideontimes;": "\u22C7", "&divonx;": "\u22C7", "&djcy;": "\u0452", "&dlcorn;": "\u231E", "&dlcrop;": "\u230D", "&dollar;": "$", "&dopf;": "\u{1D555}", "&dot;": "\u02D9", "&doteq;": "\u2250", "&doteqdot;": "\u2251", "&dotminus;": "\u2238", "&dotplus;": "\u2214", "&dotsquare;": "\u22A1", "&doublebarwedge;": "\u2306", "&downarrow;": "\u2193", "&downdownarrows;": "\u21CA", "&downharpoonleft;": "\u21C3", "&downharpoonright;": "\u21C2", "&drbkarow;": "\u2910", "&drcorn;": "\u231F", "&drcrop;": "\u230C", "&dscr;": "\u{1D4B9}", "&dscy;": "\u0455", "&dsol;": "\u29F6", "&dstrok;": "\u0111", "&dtdot;": "\u22F1", "&dtri;": "\u25BF", "&dtrif;": "\u25BE", "&duarr;": "\u21F5", "&duhar;": "\u296F", "&dwangle;": "\u29A6", "&dzcy;": "\u045F", "&dzigrarr;": "\u27FF", "&eDDot;": "\u2A77", "&eDot;": "\u2251", "&eacute": "\xE9", "&eacute;": "\xE9", "&easter;": "\u2A6E", "&ecaron;": "\u011B", "&ecir;": "\u2256", "&ecirc": "\xEA", "&ecirc;": "\xEA", "&ecolon;": "\u2255", "&ecy;": "\u044D", "&edot;": "\u0117", "&ee;": "\u2147", "&efDot;": "\u2252", "&efr;": "\u{1D522}", "&eg;": "\u2A9A", "&egrave": "\xE8", "&egrave;": "\xE8", "&egs;": "\u2A96", "&egsdot;": "\u2A98", "&el;": "\u2A99", "&elinters;": "\u23E7", "&ell;": "\u2113", "&els;": "\u2A95", "&elsdot;": "\u2A97", "&emacr;": "\u0113", "&empty;": "\u2205", "&emptyset;": "\u2205", "&emptyv;": "\u2205", "&emsp13;": "\u2004", "&emsp14;": "\u2005", "&emsp;": "\u2003", "&eng;": "\u014B", "&ensp;": "\u2002", "&eogon;": "\u0119", "&eopf;": "\u{1D556}", "&epar;": "\u22D5", "&eparsl;": "\u29E3", "&eplus;": "\u2A71", "&epsi;": "\u03B5", "&epsilon;": "\u03B5", "&epsiv;": "\u03F5", "&eqcirc;": "\u2256", "&eqcolon;": "\u2255", "&eqsim;": "\u2242", "&eqslantgtr;": "\u2A96", "&eqslantless;": "\u2A95", "&equals;": "=", "&equest;": "\u225F", "&equiv;": "\u2261", "&equivDD;": "\u2A78", "&eqvparsl;": "\u29E5", "&erDot;": "\u2253", "&erarr;": "\u2971", "&escr;": "\u212F", "&esdot;": "\u2250", "&esim;": "\u2242", "&eta;": "\u03B7", "&eth": "\xF0", "&eth;": "\xF0", "&euml": "\xEB", "&euml;": "\xEB", "&euro;": "\u20AC", "&excl;": "!", "&exist;": "\u2203", "&expectation;": "\u2130", "&exponentiale;": "\u2147", "&fallingdotseq;": "\u2252", "&fcy;": "\u0444", "&female;": "\u2640", "&ffilig;": "\uFB03", "&fflig;": "\uFB00", "&ffllig;": "\uFB04", "&ffr;": "\u{1D523}", "&filig;": "\uFB01", "&fjlig;": "fj", "&flat;": "\u266D", "&fllig;": "\uFB02", "&fltns;": "\u25B1", "&fnof;": "\u0192", "&fopf;": "\u{1D557}", "&forall;": "\u2200", "&fork;": "\u22D4", "&forkv;": "\u2AD9", "&fpartint;": "\u2A0D", "&frac12": "\xBD", "&frac12;": "\xBD", "&frac13;": "\u2153", "&frac14": "\xBC", "&frac14;": "\xBC", "&frac15;": "\u2155", "&frac16;": "\u2159", "&frac18;": "\u215B", "&frac23;": "\u2154", "&frac25;": "\u2156", "&frac34": "\xBE", "&frac34;": "\xBE", "&frac35;": "\u2157", "&frac38;": "\u215C", "&frac45;": "\u2158", "&frac56;": "\u215A", "&frac58;": "\u215D", "&frac78;": "\u215E", "&frasl;": "\u2044", "&frown;": "\u2322", "&fscr;": "\u{1D4BB}", "&gE;": "\u2267", "&gEl;": "\u2A8C", "&gacute;": "\u01F5", "&gamma;": "\u03B3", "&gammad;": "\u03DD", "&gap;": "\u2A86", "&gbreve;": "\u011F", "&gcirc;": "\u011D", "&gcy;": "\u0433", "&gdot;": "\u0121", "&ge;": "\u2265", "&gel;": "\u22DB", "&geq;": "\u2265", "&geqq;": "\u2267", "&geqslant;": "\u2A7E", "&ges;": "\u2A7E", "&gescc;": "\u2AA9", "&gesdot;": "\u2A80", "&gesdoto;": "\u2A82", "&gesdotol;": "\u2A84", "&gesl;": "\u22DB\uFE00", "&gesles;": "\u2A94", "&gfr;": "\u{1D524}", "&gg;": "\u226B", "&ggg;": "\u22D9", "&gimel;": "\u2137", "&gjcy;": "\u0453", "&gl;": "\u2277", "&glE;": "\u2A92", "&gla;": "\u2AA5", "&glj;": "\u2AA4", "&gnE;": "\u2269", "&gnap;": "\u2A8A", "&gnapprox;": "\u2A8A", "&gne;": "\u2A88", "&gneq;": "\u2A88", "&gneqq;": "\u2269", "&gnsim;": "\u22E7", "&gopf;": "\u{1D558}", "&grave;": "`", "&gscr;": "\u210A", "&gsim;": "\u2273", "&gsime;": "\u2A8E", "&gsiml;": "\u2A90", "&gt": ">", "&gt;": ">", "&gtcc;": "\u2AA7", "&gtcir;": "\u2A7A", "&gtdot;": "\u22D7", "&gtlPar;": "\u2995", "&gtquest;": "\u2A7C", "&gtrapprox;": "\u2A86", "&gtrarr;": "\u2978", "&gtrdot;": "\u22D7", "&gtreqless;": "\u22DB", "&gtreqqless;": "\u2A8C", "&gtrless;": "\u2277", "&gtrsim;": "\u2273", "&gvertneqq;": "\u2269\uFE00", "&gvnE;": "\u2269\uFE00", "&hArr;": "\u21D4", "&hairsp;": "\u200A", "&half;": "\xBD", "&hamilt;": "\u210B", "&hardcy;": "\u044A", "&harr;": "\u2194", "&harrcir;": "\u2948", "&harrw;": "\u21AD", "&hbar;": "\u210F", "&hcirc;": "\u0125", "&hearts;": "\u2665", "&heartsuit;": "\u2665", "&hellip;": "\u2026", "&hercon;": "\u22B9", "&hfr;": "\u{1D525}", "&hksearow;": "\u2925", "&hkswarow;": "\u2926", "&hoarr;": "\u21FF", "&homtht;": "\u223B", "&hookleftarrow;": "\u21A9", "&hookrightarrow;": "\u21AA", "&hopf;": "\u{1D559}", "&horbar;": "\u2015", "&hscr;": "\u{1D4BD}", "&hslash;": "\u210F", "&hstrok;": "\u0127", "&hybull;": "\u2043", "&hyphen;": "\u2010", "&iacute": "\xED", "&iacute;": "\xED", "&ic;": "\u2063", "&icirc": "\xEE", "&icirc;": "\xEE", "&icy;": "\u0438", "&iecy;": "\u0435", "&iexcl": "\xA1", "&iexcl;": "\xA1", "&iff;": "\u21D4", "&ifr;": "\u{1D526}", "&igrave": "\xEC", "&igrave;": "\xEC", "&ii;": "\u2148", "&iiiint;": "\u2A0C", "&iiint;": "\u222D", "&iinfin;": "\u29DC", "&iiota;": "\u2129", "&ijlig;": "\u0133", "&imacr;": "\u012B", "&image;": "\u2111", "&imagline;": "\u2110", "&imagpart;": "\u2111", "&imath;": "\u0131", "&imof;": "\u22B7", "&imped;": "\u01B5", "&in;": "\u2208", "&incare;": "\u2105", "&infin;": "\u221E", "&infintie;": "\u29DD", "&inodot;": "\u0131", "&int;": "\u222B", "&intcal;": "\u22BA", "&integers;": "\u2124", "&intercal;": "\u22BA", "&intlarhk;": "\u2A17", "&intprod;": "\u2A3C", "&iocy;": "\u0451", "&iogon;": "\u012F", "&iopf;": "\u{1D55A}", "&iota;": "\u03B9", "&iprod;": "\u2A3C", "&iquest": "\xBF", "&iquest;": "\xBF", "&iscr;": "\u{1D4BE}", "&isin;": "\u2208", "&isinE;": "\u22F9", "&isindot;": "\u22F5", "&isins;": "\u22F4", "&isinsv;": "\u22F3", "&isinv;": "\u2208", "&it;": "\u2062", "&itilde;": "\u0129", "&iukcy;": "\u0456", "&iuml": "\xEF", "&iuml;": "\xEF", "&jcirc;": "\u0135", "&jcy;": "\u0439", "&jfr;": "\u{1D527}", "&jmath;": "\u0237", "&jopf;": "\u{1D55B}", "&jscr;": "\u{1D4BF}", "&jsercy;": "\u0458", "&jukcy;": "\u0454", "&kappa;": "\u03BA", "&kappav;": "\u03F0", "&kcedil;": "\u0137", "&kcy;": "\u043A", "&kfr;": "\u{1D528}", "&kgreen;": "\u0138", "&khcy;": "\u0445", "&kjcy;": "\u045C", "&kopf;": "\u{1D55C}", "&kscr;": "\u{1D4C0}", "&lAarr;": "\u21DA", "&lArr;": "\u21D0", "&lAtail;": "\u291B", "&lBarr;": "\u290E", "&lE;": "\u2266", "&lEg;": "\u2A8B", "&lHar;": "\u2962", "&lacute;": "\u013A", "&laemptyv;": "\u29B4", "&lagran;": "\u2112", "&lambda;": "\u03BB", "&lang;": "\u27E8", "&langd;": "\u2991", "&langle;": "\u27E8", "&lap;": "\u2A85", "&laquo": "\xAB", "&laquo;": "\xAB", "&larr;": "\u2190", "&larrb;": "\u21E4", "&larrbfs;": "\u291F", "&larrfs;": "\u291D", "&larrhk;": "\u21A9", "&larrlp;": "\u21AB", "&larrpl;": "\u2939", "&larrsim;": "\u2973", "&larrtl;": "\u21A2", "&lat;": "\u2AAB", "&latail;": "\u2919", "&late;": "\u2AAD", "&lates;": "\u2AAD\uFE00", "&lbarr;": "\u290C", "&lbbrk;": "\u2772", "&lbrace;": "{", "&lbrack;": "[", "&lbrke;": "\u298B", "&lbrksld;": "\u298F", "&lbrkslu;": "\u298D", "&lcaron;": "\u013E", "&lcedil;": "\u013C", "&lceil;": "\u2308", "&lcub;": "{", "&lcy;": "\u043B", "&ldca;": "\u2936", "&ldquo;": "\u201C", "&ldquor;": "\u201E", "&ldrdhar;": "\u2967", "&ldrushar;": "\u294B", "&ldsh;": "\u21B2", "&le;": "\u2264", "&leftarrow;": "\u2190", "&leftarrowtail;": "\u21A2", "&leftharpoondown;": "\u21BD", "&leftharpoonup;": "\u21BC", "&leftleftarrows;": "\u21C7", "&leftrightarrow;": "\u2194", "&leftrightarrows;": "\u21C6", "&leftrightharpoons;": "\u21CB", "&leftrightsquigarrow;": "\u21AD", "&leftthreetimes;": "\u22CB", "&leg;": "\u22DA", "&leq;": "\u2264", "&leqq;": "\u2266", "&leqslant;": "\u2A7D", "&les;": "\u2A7D", "&lescc;": "\u2AA8", "&lesdot;": "\u2A7F", "&lesdoto;": "\u2A81", "&lesdotor;": "\u2A83", "&lesg;": "\u22DA\uFE00", "&lesges;": "\u2A93", "&lessapprox;": "\u2A85", "&lessdot;": "\u22D6", "&lesseqgtr;": "\u22DA", "&lesseqqgtr;": "\u2A8B", "&lessgtr;": "\u2276", "&lesssim;": "\u2272", "&lfisht;": "\u297C", "&lfloor;": "\u230A", "&lfr;": "\u{1D529}", "&lg;": "\u2276", "&lgE;": "\u2A91", "&lhard;": "\u21BD", "&lharu;": "\u21BC", "&lharul;": "\u296A", "&lhblk;": "\u2584", "&ljcy;": "\u0459", "&ll;": "\u226A", "&llarr;": "\u21C7", "&llcorner;": "\u231E", "&llhard;": "\u296B", "&lltri;": "\u25FA", "&lmidot;": "\u0140", "&lmoust;": "\u23B0", "&lmoustache;": "\u23B0", "&lnE;": "\u2268", "&lnap;": "\u2A89", "&lnapprox;": "\u2A89", "&lne;": "\u2A87", "&lneq;": "\u2A87", "&lneqq;": "\u2268", "&lnsim;": "\u22E6", "&loang;": "\u27EC", "&loarr;": "\u21FD", "&lobrk;": "\u27E6", "&longleftarrow;": "\u27F5", "&longleftrightarrow;": "\u27F7", "&longmapsto;": "\u27FC", "&longrightarrow;": "\u27F6", "&looparrowleft;": "\u21AB", "&looparrowright;": "\u21AC", "&lopar;": "\u2985", "&lopf;": "\u{1D55D}", "&loplus;": "\u2A2D", "&lotimes;": "\u2A34", "&lowast;": "\u2217", "&lowbar;": "_", "&loz;": "\u25CA", "&lozenge;": "\u25CA", "&lozf;": "\u29EB", "&lpar;": "(", "&lparlt;": "\u2993", "&lrarr;": "\u21C6", "&lrcorner;": "\u231F", "&lrhar;": "\u21CB", "&lrhard;": "\u296D", "&lrm;": "\u200E", "&lrtri;": "\u22BF", "&lsaquo;": "\u2039", "&lscr;": "\u{1D4C1}", "&lsh;": "\u21B0", "&lsim;": "\u2272", "&lsime;": "\u2A8D", "&lsimg;": "\u2A8F", "&lsqb;": "[", "&lsquo;": "\u2018", "&lsquor;": "\u201A", "&lstrok;": "\u0142", "&lt": "<", "&lt;": "<", "&ltcc;": "\u2AA6", "&ltcir;": "\u2A79", "&ltdot;": "\u22D6", "&lthree;": "\u22CB", "&ltimes;": "\u22C9", "&ltlarr;": "\u2976", "&ltquest;": "\u2A7B", "&ltrPar;": "\u2996", "&ltri;": "\u25C3", "&ltrie;": "\u22B4", "&ltrif;": "\u25C2", "&lurdshar;": "\u294A", "&luruhar;": "\u2966", "&lvertneqq;": "\u2268\uFE00", "&lvnE;": "\u2268\uFE00", "&mDDot;": "\u223A", "&macr": "\xAF", "&macr;": "\xAF", "&male;": "\u2642", "&malt;": "\u2720", "&maltese;": "\u2720", "&map;": "\u21A6", "&mapsto;": "\u21A6", "&mapstodown;": "\u21A7", "&mapstoleft;": "\u21A4", "&mapstoup;": "\u21A5", "&marker;": "\u25AE", "&mcomma;": "\u2A29", "&mcy;": "\u043C", "&mdash;": "\u2014", "&measuredangle;": "\u2221", "&mfr;": "\u{1D52A}", "&mho;": "\u2127", "&micro": "\xB5", "&micro;": "\xB5", "&mid;": "\u2223", "&midast;": "*", "&midcir;": "\u2AF0", "&middot": "\xB7", "&middot;": "\xB7", "&minus;": "\u2212", "&minusb;": "\u229F", "&minusd;": "\u2238", "&minusdu;": "\u2A2A", "&mlcp;": "\u2ADB", "&mldr;": "\u2026", "&mnplus;": "\u2213", "&models;": "\u22A7", "&mopf;": "\u{1D55E}", "&mp;": "\u2213", "&mscr;": "\u{1D4C2}", "&mstpos;": "\u223E", "&mu;": "\u03BC", "&multimap;": "\u22B8", "&mumap;": "\u22B8", "&nGg;": "\u22D9\u0338", "&nGt;": "\u226B\u20D2", "&nGtv;": "\u226B\u0338", "&nLeftarrow;": "\u21CD", "&nLeftrightarrow;": "\u21CE", "&nLl;": "\u22D8\u0338", "&nLt;": "\u226A\u20D2", "&nLtv;": "\u226A\u0338", "&nRightarrow;": "\u21CF", "&nVDash;": "\u22AF", "&nVdash;": "\u22AE", "&nabla;": "\u2207", "&nacute;": "\u0144", "&nang;": "\u2220\u20D2", "&nap;": "\u2249", "&napE;": "\u2A70\u0338", "&napid;": "\u224B\u0338", "&napos;": "\u0149", "&napprox;": "\u2249", "&natur;": "\u266E", "&natural;": "\u266E", "&naturals;": "\u2115", "&nbsp": "\xA0", "&nbsp;": "\xA0", "&nbump;": "\u224E\u0338", "&nbumpe;": "\u224F\u0338", "&ncap;": "\u2A43", "&ncaron;": "\u0148", "&ncedil;": "\u0146", "&ncong;": "\u2247", "&ncongdot;": "\u2A6D\u0338", "&ncup;": "\u2A42", "&ncy;": "\u043D", "&ndash;": "\u2013", "&ne;": "\u2260", "&neArr;": "\u21D7", "&nearhk;": "\u2924", "&nearr;": "\u2197", "&nearrow;": "\u2197", "&nedot;": "\u2250\u0338", "&nequiv;": "\u2262", "&nesear;": "\u2928", "&nesim;": "\u2242\u0338", "&nexist;": "\u2204", "&nexists;": "\u2204", "&nfr;": "\u{1D52B}", "&ngE;": "\u2267\u0338", "&nge;": "\u2271", "&ngeq;": "\u2271", "&ngeqq;": "\u2267\u0338", "&ngeqslant;": "\u2A7E\u0338", "&nges;": "\u2A7E\u0338", "&ngsim;": "\u2275", "&ngt;": "\u226F", "&ngtr;": "\u226F", "&nhArr;": "\u21CE", "&nharr;": "\u21AE", "&nhpar;": "\u2AF2", "&ni;": "\u220B", "&nis;": "\u22FC", "&nisd;": "\u22FA", "&niv;": "\u220B", "&njcy;": "\u045A", "&nlArr;": "\u21CD", "&nlE;": "\u2266\u0338", "&nlarr;": "\u219A", "&nldr;": "\u2025", "&nle;": "\u2270", "&nleftarrow;": "\u219A", "&nleftrightarrow;": "\u21AE", "&nleq;": "\u2270", "&nleqq;": "\u2266\u0338", "&nleqslant;": "\u2A7D\u0338", "&nles;": "\u2A7D\u0338", "&nless;": "\u226E", "&nlsim;": "\u2274", "&nlt;": "\u226E", "&nltri;": "\u22EA", "&nltrie;": "\u22EC", "&nmid;": "\u2224", "&nopf;": "\u{1D55F}", "&not": "\xAC", "&not;": "\xAC", "&notin;": "\u2209", "&notinE;": "\u22F9\u0338", "&notindot;": "\u22F5\u0338", "&notinva;": "\u2209", "&notinvb;": "\u22F7", "&notinvc;": "\u22F6", "&notni;": "\u220C", "&notniva;": "\u220C", "&notnivb;": "\u22FE", "&notnivc;": "\u22FD", "&npar;": "\u2226", "&nparallel;": "\u2226", "&nparsl;": "\u2AFD\u20E5", "&npart;": "\u2202\u0338", "&npolint;": "\u2A14", "&npr;": "\u2280", "&nprcue;": "\u22E0", "&npre;": "\u2AAF\u0338", "&nprec;": "\u2280", "&npreceq;": "\u2AAF\u0338", "&nrArr;": "\u21CF", "&nrarr;": "\u219B", "&nrarrc;": "\u2933\u0338", "&nrarrw;": "\u219D\u0338", "&nrightarrow;": "\u219B", "&nrtri;": "\u22EB", "&nrtrie;": "\u22ED", "&nsc;": "\u2281", "&nsccue;": "\u22E1", "&nsce;": "\u2AB0\u0338", "&nscr;": "\u{1D4C3}", "&nshortmid;": "\u2224", "&nshortparallel;": "\u2226", "&nsim;": "\u2241", "&nsime;": "\u2244", "&nsimeq;": "\u2244", "&nsmid;": "\u2224", "&nspar;": "\u2226", "&nsqsube;": "\u22E2", "&nsqsupe;": "\u22E3", "&nsub;": "\u2284", "&nsubE;": "\u2AC5\u0338", "&nsube;": "\u2288", "&nsubset;": "\u2282\u20D2", "&nsubseteq;": "\u2288", "&nsubseteqq;": "\u2AC5\u0338", "&nsucc;": "\u2281", "&nsucceq;": "\u2AB0\u0338", "&nsup;": "\u2285", "&nsupE;": "\u2AC6\u0338", "&nsupe;": "\u2289", "&nsupset;": "\u2283\u20D2", "&nsupseteq;": "\u2289", "&nsupseteqq;": "\u2AC6\u0338", "&ntgl;": "\u2279", "&ntilde": "\xF1", "&ntilde;": "\xF1", "&ntlg;": "\u2278", "&ntriangleleft;": "\u22EA", "&ntrianglelefteq;": "\u22EC", "&ntriangleright;": "\u22EB", "&ntrianglerighteq;": "\u22ED", "&nu;": "\u03BD", "&num;": "#", "&numero;": "\u2116", "&numsp;": "\u2007", "&nvDash;": "\u22AD", "&nvHarr;": "\u2904", "&nvap;": "\u224D\u20D2", "&nvdash;": "\u22AC", "&nvge;": "\u2265\u20D2", "&nvgt;": ">\u20D2", "&nvinfin;": "\u29DE", "&nvlArr;": "\u2902", "&nvle;": "\u2264\u20D2", "&nvlt;": "<\u20D2", "&nvltrie;": "\u22B4\u20D2", "&nvrArr;": "\u2903", "&nvrtrie;": "\u22B5\u20D2", "&nvsim;": "\u223C\u20D2", "&nwArr;": "\u21D6", "&nwarhk;": "\u2923", "&nwarr;": "\u2196", "&nwarrow;": "\u2196", "&nwnear;": "\u2927", "&oS;": "\u24C8", "&oacute": "\xF3", "&oacute;": "\xF3", "&oast;": "\u229B", "&ocir;": "\u229A", "&ocirc": "\xF4", "&ocirc;": "\xF4", "&ocy;": "\u043E", "&odash;": "\u229D", "&odblac;": "\u0151", "&odiv;": "\u2A38", "&odot;": "\u2299", "&odsold;": "\u29BC", "&oelig;": "\u0153", "&ofcir;": "\u29BF", "&ofr;": "\u{1D52C}", "&ogon;": "\u02DB", "&ograve": "\xF2", "&ograve;": "\xF2", "&ogt;": "\u29C1", "&ohbar;": "\u29B5", "&ohm;": "\u03A9", "&oint;": "\u222E", "&olarr;": "\u21BA", "&olcir;": "\u29BE", "&olcross;": "\u29BB", "&oline;": "\u203E", "&olt;": "\u29C0", "&omacr;": "\u014D", "&omega;": "\u03C9", "&omicron;": "\u03BF", "&omid;": "\u29B6", "&ominus;": "\u2296", "&oopf;": "\u{1D560}", "&opar;": "\u29B7", "&operp;": "\u29B9", "&oplus;": "\u2295", "&or;": "\u2228", "&orarr;": "\u21BB", "&ord;": "\u2A5D", "&order;": "\u2134", "&orderof;": "\u2134", "&ordf": "\xAA", "&ordf;": "\xAA", "&ordm": "\xBA", "&ordm;": "\xBA", "&origof;": "\u22B6", "&oror;": "\u2A56", "&orslope;": "\u2A57", "&orv;": "\u2A5B", "&oscr;": "\u2134", "&oslash": "\xF8", "&oslash;": "\xF8", "&osol;": "\u2298", "&otilde": "\xF5", "&otilde;": "\xF5", "&otimes;": "\u2297", "&otimesas;": "\u2A36", "&ouml": "\xF6", "&ouml;": "\xF6", "&ovbar;": "\u233D", "&par;": "\u2225", "&para": "\xB6", "&para;": "\xB6", "&parallel;": "\u2225", "&parsim;": "\u2AF3", "&parsl;": "\u2AFD", "&part;": "\u2202", "&pcy;": "\u043F", "&percnt;": "%", "&period;": ".", "&permil;": "\u2030", "&perp;": "\u22A5", "&pertenk;": "\u2031", "&pfr;": "\u{1D52D}", "&phi;": "\u03C6", "&phiv;": "\u03D5", "&phmmat;": "\u2133", "&phone;": "\u260E", "&pi;": "\u03C0", "&pitchfork;": "\u22D4", "&piv;": "\u03D6", "&planck;": "\u210F", "&planckh;": "\u210E", "&plankv;": "\u210F", "&plus;": "+", "&plusacir;": "\u2A23", "&plusb;": "\u229E", "&pluscir;": "\u2A22", "&plusdo;": "\u2214", "&plusdu;": "\u2A25", "&pluse;": "\u2A72", "&plusmn": "\xB1", "&plusmn;": "\xB1", "&plussim;": "\u2A26", "&plustwo;": "\u2A27", "&pm;": "\xB1", "&pointint;": "\u2A15", "&popf;": "\u{1D561}", "&pound": "\xA3", "&pound;": "\xA3", "&pr;": "\u227A", "&prE;": "\u2AB3", "&prap;": "\u2AB7", "&prcue;": "\u227C", "&pre;": "\u2AAF", "&prec;": "\u227A", "&precapprox;": "\u2AB7", "&preccurlyeq;": "\u227C", "&preceq;": "\u2AAF", "&precnapprox;": "\u2AB9", "&precneqq;": "\u2AB5", "&precnsim;": "\u22E8", "&precsim;": "\u227E", "&prime;": "\u2032", "&primes;": "\u2119", "&prnE;": "\u2AB5", "&prnap;": "\u2AB9", "&prnsim;": "\u22E8", "&prod;": "\u220F", "&profalar;": "\u232E", "&profline;": "\u2312", "&profsurf;": "\u2313", "&prop;": "\u221D", "&propto;": "\u221D", "&prsim;": "\u227E", "&prurel;": "\u22B0", "&pscr;": "\u{1D4C5}", "&psi;": "\u03C8", "&puncsp;": "\u2008", "&qfr;": "\u{1D52E}", "&qint;": "\u2A0C", "&qopf;": "\u{1D562}", "&qprime;": "\u2057", "&qscr;": "\u{1D4C6}", "&quaternions;": "\u210D", "&quatint;": "\u2A16", "&quest;": "?", "&questeq;": "\u225F", "&quot": '"', "&quot;": '"', "&rAarr;": "\u21DB", "&rArr;": "\u21D2", "&rAtail;": "\u291C", "&rBarr;": "\u290F", "&rHar;": "\u2964", "&race;": "\u223D\u0331", "&racute;": "\u0155", "&radic;": "\u221A", "&raemptyv;": "\u29B3", "&rang;": "\u27E9", "&rangd;": "\u2992", "&range;": "\u29A5", "&rangle;": "\u27E9", "&raquo": "\xBB", "&raquo;": "\xBB", "&rarr;": "\u2192", "&rarrap;": "\u2975", "&rarrb;": "\u21E5", "&rarrbfs;": "\u2920", "&rarrc;": "\u2933", "&rarrfs;": "\u291E", "&rarrhk;": "\u21AA", "&rarrlp;": "\u21AC", "&rarrpl;": "\u2945", "&rarrsim;": "\u2974", "&rarrtl;": "\u21A3", "&rarrw;": "\u219D", "&ratail;": "\u291A", "&ratio;": "\u2236", "&rationals;": "\u211A", "&rbarr;": "\u290D", "&rbbrk;": "\u2773", "&rbrace;": "}", "&rbrack;": "]", "&rbrke;": "\u298C", "&rbrksld;": "\u298E", "&rbrkslu;": "\u2990", "&rcaron;": "\u0159", "&rcedil;": "\u0157", "&rceil;": "\u2309", "&rcub;": "}", "&rcy;": "\u0440", "&rdca;": "\u2937", "&rdldhar;": "\u2969", "&rdquo;": "\u201D", "&rdquor;": "\u201D", "&rdsh;": "\u21B3", "&real;": "\u211C", "&realine;": "\u211B", "&realpart;": "\u211C", "&reals;": "\u211D", "&rect;": "\u25AD", "&reg": "\xAE", "&reg;": "\xAE", "&rfisht;": "\u297D", "&rfloor;": "\u230B", "&rfr;": "\u{1D52F}", "&rhard;": "\u21C1", "&rharu;": "\u21C0", "&rharul;": "\u296C", "&rho;": "\u03C1", "&rhov;": "\u03F1", "&rightarrow;": "\u2192", "&rightarrowtail;": "\u21A3", "&rightharpoondown;": "\u21C1", "&rightharpoonup;": "\u21C0", "&rightleftarrows;": "\u21C4", "&rightleftharpoons;": "\u21CC", "&rightrightarrows;": "\u21C9", "&rightsquigarrow;": "\u219D", "&rightthreetimes;": "\u22CC", "&ring;": "\u02DA", "&risingdotseq;": "\u2253", "&rlarr;": "\u21C4", "&rlhar;": "\u21CC", "&rlm;": "\u200F", "&rmoust;": "\u23B1", "&rmoustache;": "\u23B1", "&rnmid;": "\u2AEE", "&roang;": "\u27ED", "&roarr;": "\u21FE", "&robrk;": "\u27E7", "&ropar;": "\u2986", "&ropf;": "\u{1D563}", "&roplus;": "\u2A2E", "&rotimes;": "\u2A35", "&rpar;": ")", "&rpargt;": "\u2994", "&rppolint;": "\u2A12", "&rrarr;": "\u21C9", "&rsaquo;": "\u203A", "&rscr;": "\u{1D4C7}", "&rsh;": "\u21B1", "&rsqb;": "]", "&rsquo;": "\u2019", "&rsquor;": "\u2019", "&rthree;": "\u22CC", "&rtimes;": "\u22CA", "&rtri;": "\u25B9", "&rtrie;": "\u22B5", "&rtrif;": "\u25B8", "&rtriltri;": "\u29CE", "&ruluhar;": "\u2968", "&rx;": "\u211E", "&sacute;": "\u015B", "&sbquo;": "\u201A", "&sc;": "\u227B", "&scE;": "\u2AB4", "&scap;": "\u2AB8", "&scaron;": "\u0161", "&sccue;": "\u227D", "&sce;": "\u2AB0", "&scedil;": "\u015F", "&scirc;": "\u015D", "&scnE;": "\u2AB6", "&scnap;": "\u2ABA", "&scnsim;": "\u22E9", "&scpolint;": "\u2A13", "&scsim;": "\u227F", "&scy;": "\u0441", "&sdot;": "\u22C5", "&sdotb;": "\u22A1", "&sdote;": "\u2A66", "&seArr;": "\u21D8", "&searhk;": "\u2925", "&searr;": "\u2198", "&searrow;": "\u2198", "&sect": "\xA7", "&sect;": "\xA7", "&semi;": ";", "&seswar;": "\u2929", "&setminus;": "\u2216", "&setmn;": "\u2216", "&sext;": "\u2736", "&sfr;": "\u{1D530}", "&sfrown;": "\u2322", "&sharp;": "\u266F", "&shchcy;": "\u0449", "&shcy;": "\u0448", "&shortmid;": "\u2223", "&shortparallel;": "\u2225", "&shy": "\xAD", "&shy;": "\xAD", "&sigma;": "\u03C3", "&sigmaf;": "\u03C2", "&sigmav;": "\u03C2", "&sim;": "\u223C", "&simdot;": "\u2A6A", "&sime;": "\u2243", "&simeq;": "\u2243", "&simg;": "\u2A9E", "&simgE;": "\u2AA0", "&siml;": "\u2A9D", "&simlE;": "\u2A9F", "&simne;": "\u2246", "&simplus;": "\u2A24", "&simrarr;": "\u2972", "&slarr;": "\u2190", "&smallsetminus;": "\u2216", "&smashp;": "\u2A33", "&smeparsl;": "\u29E4", "&smid;": "\u2223", "&smile;": "\u2323", "&smt;": "\u2AAA", "&smte;": "\u2AAC", "&smtes;": "\u2AAC\uFE00", "&softcy;": "\u044C", "&sol;": "/", "&solb;": "\u29C4", "&solbar;": "\u233F", "&sopf;": "\u{1D564}", "&spades;": "\u2660", "&spadesuit;": "\u2660", "&spar;": "\u2225", "&sqcap;": "\u2293", "&sqcaps;": "\u2293\uFE00", "&sqcup;": "\u2294", "&sqcups;": "\u2294\uFE00", "&sqsub;": "\u228F", "&sqsube;": "\u2291", "&sqsubset;": "\u228F", "&sqsubseteq;": "\u2291", "&sqsup;": "\u2290", "&sqsupe;": "\u2292", "&sqsupset;": "\u2290", "&sqsupseteq;": "\u2292", "&squ;": "\u25A1", "&square;": "\u25A1", "&squarf;": "\u25AA", "&squf;": "\u25AA", "&srarr;": "\u2192", "&sscr;": "\u{1D4C8}", "&ssetmn;": "\u2216", "&ssmile;": "\u2323", "&sstarf;": "\u22C6", "&star;": "\u2606", "&starf;": "\u2605", "&straightepsilon;": "\u03F5", "&straightphi;": "\u03D5", "&strns;": "\xAF", "&sub;": "\u2282", "&subE;": "\u2AC5", "&subdot;": "\u2ABD", "&sube;": "\u2286", "&subedot;": "\u2AC3", "&submult;": "\u2AC1", "&subnE;": "\u2ACB", "&subne;": "\u228A", "&subplus;": "\u2ABF", "&subrarr;": "\u2979", "&subset;": "\u2282", "&subseteq;": "\u2286", "&subseteqq;": "\u2AC5", "&subsetneq;": "\u228A", "&subsetneqq;": "\u2ACB", "&subsim;": "\u2AC7", "&subsub;": "\u2AD5", "&subsup;": "\u2AD3", "&succ;": "\u227B", "&succapprox;": "\u2AB8", "&succcurlyeq;": "\u227D", "&succeq;": "\u2AB0", "&succnapprox;": "\u2ABA", "&succneqq;": "\u2AB6", "&succnsim;": "\u22E9", "&succsim;": "\u227F", "&sum;": "\u2211", "&sung;": "\u266A", "&sup1": "\xB9", "&sup1;": "\xB9", "&sup2": "\xB2", "&sup2;": "\xB2", "&sup3": "\xB3", "&sup3;": "\xB3", "&sup;": "\u2283", "&supE;": "\u2AC6", "&supdot;": "\u2ABE", "&supdsub;": "\u2AD8", "&supe;": "\u2287", "&supedot;": "\u2AC4", "&suphsol;": "\u27C9", "&suphsub;": "\u2AD7", "&suplarr;": "\u297B", "&supmult;": "\u2AC2", "&supnE;": "\u2ACC", "&supne;": "\u228B", "&supplus;": "\u2AC0", "&supset;": "\u2283", "&supseteq;": "\u2287", "&supseteqq;": "\u2AC6", "&supsetneq;": "\u228B", "&supsetneqq;": "\u2ACC", "&supsim;": "\u2AC8", "&supsub;": "\u2AD4", "&supsup;": "\u2AD6", "&swArr;": "\u21D9", "&swarhk;": "\u2926", "&swarr;": "\u2199", "&swarrow;": "\u2199", "&swnwar;": "\u292A", "&szlig": "\xDF", "&szlig;": "\xDF", "&target;": "\u2316", "&tau;": "\u03C4", "&tbrk;": "\u23B4", "&tcaron;": "\u0165", "&tcedil;": "\u0163", "&tcy;": "\u0442", "&tdot;": "\u20DB", "&telrec;": "\u2315", "&tfr;": "\u{1D531}", "&there4;": "\u2234", "&therefore;": "\u2234", "&theta;": "\u03B8", "&thetasym;": "\u03D1", "&thetav;": "\u03D1", "&thickapprox;": "\u2248", "&thicksim;": "\u223C", "&thinsp;": "\u2009", "&thkap;": "\u2248", "&thksim;": "\u223C", "&thorn": "\xFE", "&thorn;": "\xFE", "&tilde;": "\u02DC", "&times": "\xD7", "&times;": "\xD7", "&timesb;": "\u22A0", "&timesbar;": "\u2A31", "&timesd;": "\u2A30", "&tint;": "\u222D", "&toea;": "\u2928", "&top;": "\u22A4", "&topbot;": "\u2336", "&topcir;": "\u2AF1", "&topf;": "\u{1D565}", "&topfork;": "\u2ADA", "&tosa;": "\u2929", "&tprime;": "\u2034", "&trade;": "\u2122", "&triangle;": "\u25B5", "&triangledown;": "\u25BF", "&triangleleft;": "\u25C3", "&trianglelefteq;": "\u22B4", "&triangleq;": "\u225C", "&triangleright;": "\u25B9", "&trianglerighteq;": "\u22B5", "&tridot;": "\u25EC", "&trie;": "\u225C", "&triminus;": "\u2A3A", "&triplus;": "\u2A39", "&trisb;": "\u29CD", "&tritime;": "\u2A3B", "&trpezium;": "\u23E2", "&tscr;": "\u{1D4C9}", "&tscy;": "\u0446", "&tshcy;": "\u045B", "&tstrok;": "\u0167", "&twixt;": "\u226C", "&twoheadleftarrow;": "\u219E", "&twoheadrightarrow;": "\u21A0", "&uArr;": "\u21D1", "&uHar;": "\u2963", "&uacute": "\xFA", "&uacute;": "\xFA", "&uarr;": "\u2191", "&ubrcy;": "\u045E", "&ubreve;": "\u016D", "&ucirc": "\xFB", "&ucirc;": "\xFB", "&ucy;": "\u0443", "&udarr;": "\u21C5", "&udblac;": "\u0171", "&udhar;": "\u296E", "&ufisht;": "\u297E", "&ufr;": "\u{1D532}", "&ugrave": "\xF9", "&ugrave;": "\xF9", "&uharl;": "\u21BF", "&uharr;": "\u21BE", "&uhblk;": "\u2580", "&ulcorn;": "\u231C", "&ulcorner;": "\u231C", "&ulcrop;": "\u230F", "&ultri;": "\u25F8", "&umacr;": "\u016B", "&uml": "\xA8", "&uml;": "\xA8", "&uogon;": "\u0173", "&uopf;": "\u{1D566}", "&uparrow;": "\u2191", "&updownarrow;": "\u2195", "&upharpoonleft;": "\u21BF", "&upharpoonright;": "\u21BE", "&uplus;": "\u228E", "&upsi;": "\u03C5", "&upsih;": "\u03D2", "&upsilon;": "\u03C5", "&upuparrows;": "\u21C8", "&urcorn;": "\u231D", "&urcorner;": "\u231D", "&urcrop;": "\u230E", "&uring;": "\u016F", "&urtri;": "\u25F9", "&uscr;": "\u{1D4CA}", "&utdot;": "\u22F0", "&utilde;": "\u0169", "&utri;": "\u25B5", "&utrif;": "\u25B4", "&uuarr;": "\u21C8", "&uuml": "\xFC", "&uuml;": "\xFC", "&uwangle;": "\u29A7", "&vArr;": "\u21D5", "&vBar;": "\u2AE8", "&vBarv;": "\u2AE9", "&vDash;": "\u22A8", "&vangrt;": "\u299C", "&varepsilon;": "\u03F5", "&varkappa;": "\u03F0", "&varnothing;": "\u2205", "&varphi;": "\u03D5", "&varpi;": "\u03D6", "&varpropto;": "\u221D", "&varr;": "\u2195", "&varrho;": "\u03F1", "&varsigma;": "\u03C2", "&varsubsetneq;": "\u228A\uFE00", "&varsubsetneqq;": "\u2ACB\uFE00", "&varsupsetneq;": "\u228B\uFE00", "&varsupsetneqq;": "\u2ACC\uFE00", "&vartheta;": "\u03D1", "&vartriangleleft;": "\u22B2", "&vartriangleright;": "\u22B3", "&vcy;": "\u0432", "&vdash;": "\u22A2", "&vee;": "\u2228", "&veebar;": "\u22BB", "&veeeq;": "\u225A", "&vellip;": "\u22EE", "&verbar;": "|", "&vert;": "|", "&vfr;": "\u{1D533}", "&vltri;": "\u22B2", "&vnsub;": "\u2282\u20D2", "&vnsup;": "\u2283\u20D2", "&vopf;": "\u{1D567}", "&vprop;": "\u221D", "&vrtri;": "\u22B3", "&vscr;": "\u{1D4CB}", "&vsubnE;": "\u2ACB\uFE00", "&vsubne;": "\u228A\uFE00", "&vsupnE;": "\u2ACC\uFE00", "&vsupne;": "\u228B\uFE00", "&vzigzag;": "\u299A", "&wcirc;": "\u0175", "&wedbar;": "\u2A5F", "&wedge;": "\u2227", "&wedgeq;": "\u2259", "&weierp;": "\u2118", "&wfr;": "\u{1D534}", "&wopf;": "\u{1D568}", "&wp;": "\u2118", "&wr;": "\u2240", "&wreath;": "\u2240", "&wscr;": "\u{1D4CC}", "&xcap;": "\u22C2", "&xcirc;": "\u25EF", "&xcup;": "\u22C3", "&xdtri;": "\u25BD", "&xfr;": "\u{1D535}", "&xhArr;": "\u27FA", "&xharr;": "\u27F7", "&xi;": "\u03BE", "&xlArr;": "\u27F8", "&xlarr;": "\u27F5", "&xmap;": "\u27FC", "&xnis;": "\u22FB", "&xodot;": "\u2A00", "&xopf;": "\u{1D569}", "&xoplus;": "\u2A01", "&xotime;": "\u2A02", "&xrArr;": "\u27F9", "&xrarr;": "\u27F6", "&xscr;": "\u{1D4CD}", "&xsqcup;": "\u2A06", "&xuplus;": "\u2A04", "&xutri;": "\u25B3", "&xvee;": "\u22C1", "&xwedge;": "\u22C0", "&yacute": "\xFD", "&yacute;": "\xFD", "&yacy;": "\u044F", "&ycirc;": "\u0177", "&ycy;": "\u044B", "&yen": "\xA5", "&yen;": "\xA5", "&yfr;": "\u{1D536}", "&yicy;": "\u0457", "&yopf;": "\u{1D56A}", "&yscr;": "\u{1D4CE}", "&yucy;": "\u044E", "&yuml": "\xFF", "&yuml;": "\xFF", "&zacute;": "\u017A", "&zcaron;": "\u017E", "&zcy;": "\u0437", "&zdot;": "\u017C", "&zeetrf;": "\u2128", "&zeta;": "\u03B6", "&zfr;": "\u{1D537}", "&zhcy;": "\u0436", "&zigrarr;": "\u21DD", "&zopf;": "\u{1D56B}", "&zscr;": "\u{1D4CF}", "&zwj;": "\u200D", "&zwnj;": "\u200C" }, characters: { "\xC6": "&AElig;", "&": "&amp;", "\xC1": "&Aacute;", "\u0102": "&Abreve;", "\xC2": "&Acirc;", "\u0410": "&Acy;", "\u{1D504}": "&Afr;", "\xC0": "&Agrave;", "\u0391": "&Alpha;", "\u0100": "&Amacr;", "\u2A53": "&And;", "\u0104": "&Aogon;", "\u{1D538}": "&Aopf;", "\u2061": "&af;", "\xC5": "&angst;", "\u{1D49C}": "&Ascr;", "\u2254": "&coloneq;", "\xC3": "&Atilde;", "\xC4": "&Auml;", "\u2216": "&ssetmn;", "\u2AE7": "&Barv;", "\u2306": "&doublebarwedge;", "\u0411": "&Bcy;", "\u2235": "&because;", "\u212C": "&bernou;", "\u0392": "&Beta;", "\u{1D505}": "&Bfr;", "\u{1D539}": "&Bopf;", "\u02D8": "&breve;", "\u224E": "&bump;", "\u0427": "&CHcy;", "\xA9": "&copy;", "\u0106": "&Cacute;", "\u22D2": "&Cap;", "\u2145": "&DD;", "\u212D": "&Cfr;", "\u010C": "&Ccaron;", "\xC7": "&Ccedil;", "\u0108": "&Ccirc;", "\u2230": "&Cconint;", "\u010A": "&Cdot;", "\xB8": "&cedil;", "\xB7": "&middot;", "\u03A7": "&Chi;", "\u2299": "&odot;", "\u2296": "&ominus;", "\u2295": "&oplus;", "\u2297": "&otimes;", "\u2232": "&cwconint;", "\u201D": "&rdquor;", "\u2019": "&rsquor;", "\u2237": "&Proportion;", "\u2A74": "&Colone;", "\u2261": "&equiv;", "\u222F": "&DoubleContourIntegral;", "\u222E": "&oint;", "\u2102": "&complexes;", "\u2210": "&coprod;", "\u2233": "&awconint;", "\u2A2F": "&Cross;", "\u{1D49E}": "&Cscr;", "\u22D3": "&Cup;", "\u224D": "&asympeq;", "\u2911": "&DDotrahd;", "\u0402": "&DJcy;", "\u0405": "&DScy;", "\u040F": "&DZcy;", "\u2021": "&ddagger;", "\u21A1": "&Darr;", "\u2AE4": "&DoubleLeftTee;", "\u010E": "&Dcaron;", "\u0414": "&Dcy;", "\u2207": "&nabla;", "\u0394": "&Delta;", "\u{1D507}": "&Dfr;", "\xB4": "&acute;", "\u02D9": "&dot;", "\u02DD": "&dblac;", "`": "&grave;", "\u02DC": "&tilde;", "\u22C4": "&diamond;", "\u2146": "&dd;", "\u{1D53B}": "&Dopf;", "\xA8": "&uml;", "\u20DC": "&DotDot;", "\u2250": "&esdot;", "\u21D3": "&dArr;", "\u21D0": "&lArr;", "\u21D4": "&iff;", "\u27F8": "&xlArr;", "\u27FA": "&xhArr;", "\u27F9": "&xrArr;", "\u21D2": "&rArr;", "\u22A8": "&vDash;", "\u21D1": "&uArr;", "\u21D5": "&vArr;", "\u2225": "&spar;", "\u2193": "&downarrow;", "\u2913": "&DownArrowBar;", "\u21F5": "&duarr;", "\u0311": "&DownBreve;", "\u2950": "&DownLeftRightVector;", "\u295E": "&DownLeftTeeVector;", "\u21BD": "&lhard;", "\u2956": "&DownLeftVectorBar;", "\u295F": "&DownRightTeeVector;", "\u21C1": "&rightharpoondown;", "\u2957": "&DownRightVectorBar;", "\u22A4": "&top;", "\u21A7": "&mapstodown;", "\u{1D49F}": "&Dscr;", "\u0110": "&Dstrok;", "\u014A": "&ENG;", "\xD0": "&ETH;", "\xC9": "&Eacute;", "\u011A": "&Ecaron;", "\xCA": "&Ecirc;", "\u042D": "&Ecy;", "\u0116": "&Edot;", "\u{1D508}": "&Efr;", "\xC8": "&Egrave;", "\u2208": "&isinv;", "\u0112": "&Emacr;", "\u25FB": "&EmptySmallSquare;", "\u25AB": "&EmptyVerySmallSquare;", "\u0118": "&Eogon;", "\u{1D53C}": "&Eopf;", "\u0395": "&Epsilon;", "\u2A75": "&Equal;", "\u2242": "&esim;", "\u21CC": "&rlhar;", "\u2130": "&expectation;", "\u2A73": "&Esim;", "\u0397": "&Eta;", "\xCB": "&Euml;", "\u2203": "&exist;", "\u2147": "&exponentiale;", "\u0424": "&Fcy;", "\u{1D509}": "&Ffr;", "\u25FC": "&FilledSmallSquare;", "\u25AA": "&squf;", "\u{1D53D}": "&Fopf;", "\u2200": "&forall;", "\u2131": "&Fscr;", "\u0403": "&GJcy;", ">": "&gt;", "\u0393": "&Gamma;", "\u03DC": "&Gammad;", "\u011E": "&Gbreve;", "\u0122": "&Gcedil;", "\u011C": "&Gcirc;", "\u0413": "&Gcy;", "\u0120": "&Gdot;", "\u{1D50A}": "&Gfr;", "\u22D9": "&ggg;", "\u{1D53E}": "&Gopf;", "\u2265": "&geq;", "\u22DB": "&gtreqless;", "\u2267": "&geqq;", "\u2AA2": "&GreaterGreater;", "\u2277": "&gtrless;", "\u2A7E": "&ges;", "\u2273": "&gtrsim;", "\u{1D4A2}": "&Gscr;", "\u226B": "&gg;", "\u042A": "&HARDcy;", "\u02C7": "&caron;", "^": "&Hat;", "\u0124": "&Hcirc;", "\u210C": "&Poincareplane;", "\u210B": "&hamilt;", "\u210D": "&quaternions;", "\u2500": "&boxh;", "\u0126": "&Hstrok;", "\u224F": "&bumpeq;", "\u0415": "&IEcy;", "\u0132": "&IJlig;", "\u0401": "&IOcy;", "\xCD": "&Iacute;", "\xCE": "&Icirc;", "\u0418": "&Icy;", "\u0130": "&Idot;", "\u2111": "&imagpart;", "\xCC": "&Igrave;", "\u012A": "&Imacr;", "\u2148": "&ii;", "\u222C": "&Int;", "\u222B": "&int;", "\u22C2": "&xcap;", "\u2063": "&ic;", "\u2062": "&it;", "\u012E": "&Iogon;", "\u{1D540}": "&Iopf;", "\u0399": "&Iota;", "\u2110": "&imagline;", "\u0128": "&Itilde;", "\u0406": "&Iukcy;", "\xCF": "&Iuml;", "\u0134": "&Jcirc;", "\u0419": "&Jcy;", "\u{1D50D}": "&Jfr;", "\u{1D541}": "&Jopf;", "\u{1D4A5}": "&Jscr;", "\u0408": "&Jsercy;", "\u0404": "&Jukcy;", "\u0425": "&KHcy;", "\u040C": "&KJcy;", "\u039A": "&Kappa;", "\u0136": "&Kcedil;", "\u041A": "&Kcy;", "\u{1D50E}": "&Kfr;", "\u{1D542}": "&Kopf;", "\u{1D4A6}": "&Kscr;", "\u0409": "&LJcy;", "<": "&lt;", "\u0139": "&Lacute;", "\u039B": "&Lambda;", "\u27EA": "&Lang;", "\u2112": "&lagran;", "\u219E": "&twoheadleftarrow;", "\u013D": "&Lcaron;", "\u013B": "&Lcedil;", "\u041B": "&Lcy;", "\u27E8": "&langle;", "\u2190": "&slarr;", "\u21E4": "&larrb;", "\u21C6": "&lrarr;", "\u2308": "&lceil;", "\u27E6": "&lobrk;", "\u2961": "&LeftDownTeeVector;", "\u21C3": "&downharpoonleft;", "\u2959": "&LeftDownVectorBar;", "\u230A": "&lfloor;", "\u2194": "&leftrightarrow;", "\u294E": "&LeftRightVector;", "\u22A3": "&dashv;", "\u21A4": "&mapstoleft;", "\u295A": "&LeftTeeVector;", "\u22B2": "&vltri;", "\u29CF": "&LeftTriangleBar;", "\u22B4": "&trianglelefteq;", "\u2951": "&LeftUpDownVector;", "\u2960": "&LeftUpTeeVector;", "\u21BF": "&upharpoonleft;", "\u2958": "&LeftUpVectorBar;", "\u21BC": "&lharu;", "\u2952": "&LeftVectorBar;", "\u22DA": "&lesseqgtr;", "\u2266": "&leqq;", "\u2276": "&lg;", "\u2AA1": "&LessLess;", "\u2A7D": "&les;", "\u2272": "&lsim;", "\u{1D50F}": "&Lfr;", "\u22D8": "&Ll;", "\u21DA": "&lAarr;", "\u013F": "&Lmidot;", "\u27F5": "&xlarr;", "\u27F7": "&xharr;", "\u27F6": "&xrarr;", "\u{1D543}": "&Lopf;", "\u2199": "&swarrow;", "\u2198": "&searrow;", "\u21B0": "&lsh;", "\u0141": "&Lstrok;", "\u226A": "&ll;", "\u2905": "&Map;", "\u041C": "&Mcy;", "\u205F": "&MediumSpace;", "\u2133": "&phmmat;", "\u{1D510}": "&Mfr;", "\u2213": "&mp;", "\u{1D544}": "&Mopf;", "\u039C": "&Mu;", "\u040A": "&NJcy;", "\u0143": "&Nacute;", "\u0147": "&Ncaron;", "\u0145": "&Ncedil;", "\u041D": "&Ncy;", "\u200B": "&ZeroWidthSpace;", "\n": "&NewLine;", "\u{1D511}": "&Nfr;", "\u2060": "&NoBreak;", "\xA0": "&nbsp;", "\u2115": "&naturals;", "\u2AEC": "&Not;", "\u2262": "&nequiv;", "\u226D": "&NotCupCap;", "\u2226": "&nspar;", "\u2209": "&notinva;", "\u2260": "&ne;", "\u2242\u0338": "&nesim;", "\u2204": "&nexists;", "\u226F": "&ngtr;", "\u2271": "&ngeq;", "\u2267\u0338": "&ngeqq;", "\u226B\u0338": "&nGtv;", "\u2279": "&ntgl;", "\u2A7E\u0338": "&nges;", "\u2275": "&ngsim;", "\u224E\u0338": "&nbump;", "\u224F\u0338": "&nbumpe;", "\u22EA": "&ntriangleleft;", "\u29CF\u0338": "&NotLeftTriangleBar;", "\u22EC": "&ntrianglelefteq;", "\u226E": "&nlt;", "\u2270": "&nleq;", "\u2278": "&ntlg;", "\u226A\u0338": "&nLtv;", "\u2A7D\u0338": "&nles;", "\u2274": "&nlsim;", "\u2AA2\u0338": "&NotNestedGreaterGreater;", "\u2AA1\u0338": "&NotNestedLessLess;", "\u2280": "&nprec;", "\u2AAF\u0338": "&npreceq;", "\u22E0": "&nprcue;", "\u220C": "&notniva;", "\u22EB": "&ntriangleright;", "\u29D0\u0338": "&NotRightTriangleBar;", "\u22ED": "&ntrianglerighteq;", "\u228F\u0338": "&NotSquareSubset;", "\u22E2": "&nsqsube;", "\u2290\u0338": "&NotSquareSuperset;", "\u22E3": "&nsqsupe;", "\u2282\u20D2": "&vnsub;", "\u2288": "&nsubseteq;", "\u2281": "&nsucc;", "\u2AB0\u0338": "&nsucceq;", "\u22E1": "&nsccue;", "\u227F\u0338": "&NotSucceedsTilde;", "\u2283\u20D2": "&vnsup;", "\u2289": "&nsupseteq;", "\u2241": "&nsim;", "\u2244": "&nsimeq;", "\u2247": "&ncong;", "\u2249": "&napprox;", "\u2224": "&nsmid;", "\u{1D4A9}": "&Nscr;", "\xD1": "&Ntilde;", "\u039D": "&Nu;", "\u0152": "&OElig;", "\xD3": "&Oacute;", "\xD4": "&Ocirc;", "\u041E": "&Ocy;", "\u0150": "&Odblac;", "\u{1D512}": "&Ofr;", "\xD2": "&Ograve;", "\u014C": "&Omacr;", "\u03A9": "&ohm;", "\u039F": "&Omicron;", "\u{1D546}": "&Oopf;", "\u201C": "&ldquo;", "\u2018": "&lsquo;", "\u2A54": "&Or;", "\u{1D4AA}": "&Oscr;", "\xD8": "&Oslash;", "\xD5": "&Otilde;", "\u2A37": "&Otimes;", "\xD6": "&Ouml;", "\u203E": "&oline;", "\u23DE": "&OverBrace;", "\u23B4": "&tbrk;", "\u23DC": "&OverParenthesis;", "\u2202": "&part;", "\u041F": "&Pcy;", "\u{1D513}": "&Pfr;", "\u03A6": "&Phi;", "\u03A0": "&Pi;", "\xB1": "&pm;", "\u2119": "&primes;", "\u2ABB": "&Pr;", "\u227A": "&prec;", "\u2AAF": "&preceq;", "\u227C": "&preccurlyeq;", "\u227E": "&prsim;", "\u2033": "&Prime;", "\u220F": "&prod;", "\u221D": "&vprop;", "\u{1D4AB}": "&Pscr;", "\u03A8": "&Psi;", '"': "&quot;", "\u{1D514}": "&Qfr;", "\u211A": "&rationals;", "\u{1D4AC}": "&Qscr;", "\u2910": "&drbkarow;", "\xAE": "&reg;", "\u0154": "&Racute;", "\u27EB": "&Rang;", "\u21A0": "&twoheadrightarrow;", "\u2916": "&Rarrtl;", "\u0158": "&Rcaron;", "\u0156": "&Rcedil;", "\u0420": "&Rcy;", "\u211C": "&realpart;", "\u220B": "&niv;", "\u21CB": "&lrhar;", "\u296F": "&duhar;", "\u03A1": "&Rho;", "\u27E9": "&rangle;", "\u2192": "&srarr;", "\u21E5": "&rarrb;", "\u21C4": "&rlarr;", "\u2309": "&rceil;", "\u27E7": "&robrk;", "\u295D": "&RightDownTeeVector;", "\u21C2": "&downharpoonright;", "\u2955": "&RightDownVectorBar;", "\u230B": "&rfloor;", "\u22A2": "&vdash;", "\u21A6": "&mapsto;", "\u295B": "&RightTeeVector;", "\u22B3": "&vrtri;", "\u29D0": "&RightTriangleBar;", "\u22B5": "&trianglerighteq;", "\u294F": "&RightUpDownVector;", "\u295C": "&RightUpTeeVector;", "\u21BE": "&upharpoonright;", "\u2954": "&RightUpVectorBar;", "\u21C0": "&rightharpoonup;", "\u2953": "&RightVectorBar;", "\u211D": "&reals;", "\u2970": "&RoundImplies;", "\u21DB": "&rAarr;", "\u211B": "&realine;", "\u21B1": "&rsh;", "\u29F4": "&RuleDelayed;", "\u0429": "&SHCHcy;", "\u0428": "&SHcy;", "\u042C": "&SOFTcy;", "\u015A": "&Sacute;", "\u2ABC": "&Sc;", "\u0160": "&Scaron;", "\u015E": "&Scedil;", "\u015C": "&Scirc;", "\u0421": "&Scy;", "\u{1D516}": "&Sfr;", "\u2191": "&uparrow;", "\u03A3": "&Sigma;", "\u2218": "&compfn;", "\u{1D54A}": "&Sopf;", "\u221A": "&radic;", "\u25A1": "&square;", "\u2293": "&sqcap;", "\u228F": "&sqsubset;", "\u2291": "&sqsubseteq;", "\u2290": "&sqsupset;", "\u2292": "&sqsupseteq;", "\u2294": "&sqcup;", "\u{1D4AE}": "&Sscr;", "\u22C6": "&sstarf;", "\u22D0": "&Subset;", "\u2286": "&subseteq;", "\u227B": "&succ;", "\u2AB0": "&succeq;", "\u227D": "&succcurlyeq;", "\u227F": "&succsim;", "\u2211": "&sum;", "\u22D1": "&Supset;", "\u2283": "&supset;", "\u2287": "&supseteq;", "\xDE": "&THORN;", "\u2122": "&trade;", "\u040B": "&TSHcy;", "\u0426": "&TScy;", "	": "&Tab;", "\u03A4": "&Tau;", "\u0164": "&Tcaron;", "\u0162": "&Tcedil;", "\u0422": "&Tcy;", "\u{1D517}": "&Tfr;", "\u2234": "&therefore;", "\u0398": "&Theta;", "\u205F\u200A": "&ThickSpace;", "\u2009": "&thinsp;", "\u223C": "&thksim;", "\u2243": "&simeq;", "\u2245": "&cong;", "\u2248": "&thkap;", "\u{1D54B}": "&Topf;", "\u20DB": "&tdot;", "\u{1D4AF}": "&Tscr;", "\u0166": "&Tstrok;", "\xDA": "&Uacute;", "\u219F": "&Uarr;", "\u2949": "&Uarrocir;", "\u040E": "&Ubrcy;", "\u016C": "&Ubreve;", "\xDB": "&Ucirc;", "\u0423": "&Ucy;", "\u0170": "&Udblac;", "\u{1D518}": "&Ufr;", "\xD9": "&Ugrave;", "\u016A": "&Umacr;", _: "&lowbar;", "\u23DF": "&UnderBrace;", "\u23B5": "&bbrk;", "\u23DD": "&UnderParenthesis;", "\u22C3": "&xcup;", "\u228E": "&uplus;", "\u0172": "&Uogon;", "\u{1D54C}": "&Uopf;", "\u2912": "&UpArrowBar;", "\u21C5": "&udarr;", "\u2195": "&varr;", "\u296E": "&udhar;", "\u22A5": "&perp;", "\u21A5": "&mapstoup;", "\u2196": "&nwarrow;", "\u2197": "&nearrow;", "\u03D2": "&upsih;", "\u03A5": "&Upsilon;", "\u016E": "&Uring;", "\u{1D4B0}": "&Uscr;", "\u0168": "&Utilde;", "\xDC": "&Uuml;", "\u22AB": "&VDash;", "\u2AEB": "&Vbar;", "\u0412": "&Vcy;", "\u22A9": "&Vdash;", "\u2AE6": "&Vdashl;", "\u22C1": "&xvee;", "\u2016": "&Vert;", "\u2223": "&smid;", "|": "&vert;", "\u2758": "&VerticalSeparator;", "\u2240": "&wreath;", "\u200A": "&hairsp;", "\u{1D519}": "&Vfr;", "\u{1D54D}": "&Vopf;", "\u{1D4B1}": "&Vscr;", "\u22AA": "&Vvdash;", "\u0174": "&Wcirc;", "\u22C0": "&xwedge;", "\u{1D51A}": "&Wfr;", "\u{1D54E}": "&Wopf;", "\u{1D4B2}": "&Wscr;", "\u{1D51B}": "&Xfr;", "\u039E": "&Xi;", "\u{1D54F}": "&Xopf;", "\u{1D4B3}": "&Xscr;", "\u042F": "&YAcy;", "\u0407": "&YIcy;", "\u042E": "&YUcy;", "\xDD": "&Yacute;", "\u0176": "&Ycirc;", "\u042B": "&Ycy;", "\u{1D51C}": "&Yfr;", "\u{1D550}": "&Yopf;", "\u{1D4B4}": "&Yscr;", "\u0178": "&Yuml;", "\u0416": "&ZHcy;", "\u0179": "&Zacute;", "\u017D": "&Zcaron;", "\u0417": "&Zcy;", "\u017B": "&Zdot;", "\u0396": "&Zeta;", "\u2128": "&zeetrf;", "\u2124": "&integers;", "\u{1D4B5}": "&Zscr;", "\xE1": "&aacute;", "\u0103": "&abreve;", "\u223E": "&mstpos;", "\u223E\u0333": "&acE;", "\u223F": "&acd;", "\xE2": "&acirc;", "\u0430": "&acy;", "\xE6": "&aelig;", "\u{1D51E}": "&afr;", "\xE0": "&agrave;", "\u2135": "&aleph;", "\u03B1": "&alpha;", "\u0101": "&amacr;", "\u2A3F": "&amalg;", "\u2227": "&wedge;", "\u2A55": "&andand;", "\u2A5C": "&andd;", "\u2A58": "&andslope;", "\u2A5A": "&andv;", "\u2220": "&angle;", "\u29A4": "&ange;", "\u2221": "&measuredangle;", "\u29A8": "&angmsdaa;", "\u29A9": "&angmsdab;", "\u29AA": "&angmsdac;", "\u29AB": "&angmsdad;", "\u29AC": "&angmsdae;", "\u29AD": "&angmsdaf;", "\u29AE": "&angmsdag;", "\u29AF": "&angmsdah;", "\u221F": "&angrt;", "\u22BE": "&angrtvb;", "\u299D": "&angrtvbd;", "\u2222": "&angsph;", "\u237C": "&angzarr;", "\u0105": "&aogon;", "\u{1D552}": "&aopf;", "\u2A70": "&apE;", "\u2A6F": "&apacir;", "\u224A": "&approxeq;", "\u224B": "&apid;", "'": "&apos;", "\xE5": "&aring;", "\u{1D4B6}": "&ascr;", "*": "&midast;", "\xE3": "&atilde;", "\xE4": "&auml;", "\u2A11": "&awint;", "\u2AED": "&bNot;", "\u224C": "&bcong;", "\u03F6": "&bepsi;", "\u2035": "&bprime;", "\u223D": "&bsim;", "\u22CD": "&bsime;", "\u22BD": "&barvee;", "\u2305": "&barwedge;", "\u23B6": "&bbrktbrk;", "\u0431": "&bcy;", "\u201E": "&ldquor;", "\u29B0": "&bemptyv;", "\u03B2": "&beta;", "\u2136": "&beth;", "\u226C": "&twixt;", "\u{1D51F}": "&bfr;", "\u25EF": "&xcirc;", "\u2A00": "&xodot;", "\u2A01": "&xoplus;", "\u2A02": "&xotime;", "\u2A06": "&xsqcup;", "\u2605": "&starf;", "\u25BD": "&xdtri;", "\u25B3": "&xutri;", "\u2A04": "&xuplus;", "\u290D": "&rbarr;", "\u29EB": "&lozf;", "\u25B4": "&utrif;", "\u25BE": "&dtrif;", "\u25C2": "&ltrif;", "\u25B8": "&rtrif;", "\u2423": "&blank;", "\u2592": "&blk12;", "\u2591": "&blk14;", "\u2593": "&blk34;", "\u2588": "&block;", "=\u20E5": "&bne;", "\u2261\u20E5": "&bnequiv;", "\u2310": "&bnot;", "\u{1D553}": "&bopf;", "\u22C8": "&bowtie;", "\u2557": "&boxDL;", "\u2554": "&boxDR;", "\u2556": "&boxDl;", "\u2553": "&boxDr;", "\u2550": "&boxH;", "\u2566": "&boxHD;", "\u2569": "&boxHU;", "\u2564": "&boxHd;", "\u2567": "&boxHu;", "\u255D": "&boxUL;", "\u255A": "&boxUR;", "\u255C": "&boxUl;", "\u2559": "&boxUr;", "\u2551": "&boxV;", "\u256C": "&boxVH;", "\u2563": "&boxVL;", "\u2560": "&boxVR;", "\u256B": "&boxVh;", "\u2562": "&boxVl;", "\u255F": "&boxVr;", "\u29C9": "&boxbox;", "\u2555": "&boxdL;", "\u2552": "&boxdR;", "\u2510": "&boxdl;", "\u250C": "&boxdr;", "\u2565": "&boxhD;", "\u2568": "&boxhU;", "\u252C": "&boxhd;", "\u2534": "&boxhu;", "\u229F": "&minusb;", "\u229E": "&plusb;", "\u22A0": "&timesb;", "\u255B": "&boxuL;", "\u2558": "&boxuR;", "\u2518": "&boxul;", "\u2514": "&boxur;", "\u2502": "&boxv;", "\u256A": "&boxvH;", "\u2561": "&boxvL;", "\u255E": "&boxvR;", "\u253C": "&boxvh;", "\u2524": "&boxvl;", "\u251C": "&boxvr;", "\xA6": "&brvbar;", "\u{1D4B7}": "&bscr;", "\u204F": "&bsemi;", "\\": "&bsol;", "\u29C5": "&bsolb;", "\u27C8": "&bsolhsub;", "\u2022": "&bullet;", "\u2AAE": "&bumpE;", "\u0107": "&cacute;", "\u2229": "&cap;", "\u2A44": "&capand;", "\u2A49": "&capbrcup;", "\u2A4B": "&capcap;", "\u2A47": "&capcup;", "\u2A40": "&capdot;", "\u2229\uFE00": "&caps;", "\u2041": "&caret;", "\u2A4D": "&ccaps;", "\u010D": "&ccaron;", "\xE7": "&ccedil;", "\u0109": "&ccirc;", "\u2A4C": "&ccups;", "\u2A50": "&ccupssm;", "\u010B": "&cdot;", "\u29B2": "&cemptyv;", "\xA2": "&cent;", "\u{1D520}": "&cfr;", "\u0447": "&chcy;", "\u2713": "&checkmark;", "\u03C7": "&chi;", "\u25CB": "&cir;", "\u29C3": "&cirE;", "\u02C6": "&circ;", "\u2257": "&cire;", "\u21BA": "&olarr;", "\u21BB": "&orarr;", "\u24C8": "&oS;", "\u229B": "&oast;", "\u229A": "&ocir;", "\u229D": "&odash;", "\u2A10": "&cirfnint;", "\u2AEF": "&cirmid;", "\u29C2": "&cirscir;", "\u2663": "&clubsuit;", ":": "&colon;", ",": "&comma;", "@": "&commat;", "\u2201": "&complement;", "\u2A6D": "&congdot;", "\u{1D554}": "&copf;", "\u2117": "&copysr;", "\u21B5": "&crarr;", "\u2717": "&cross;", "\u{1D4B8}": "&cscr;", "\u2ACF": "&csub;", "\u2AD1": "&csube;", "\u2AD0": "&csup;", "\u2AD2": "&csupe;", "\u22EF": "&ctdot;", "\u2938": "&cudarrl;", "\u2935": "&cudarrr;", "\u22DE": "&curlyeqprec;", "\u22DF": "&curlyeqsucc;", "\u21B6": "&curvearrowleft;", "\u293D": "&cularrp;", "\u222A": "&cup;", "\u2A48": "&cupbrcap;", "\u2A46": "&cupcap;", "\u2A4A": "&cupcup;", "\u228D": "&cupdot;", "\u2A45": "&cupor;", "\u222A\uFE00": "&cups;", "\u21B7": "&curvearrowright;", "\u293C": "&curarrm;", "\u22CE": "&cuvee;", "\u22CF": "&cuwed;", "\xA4": "&curren;", "\u2231": "&cwint;", "\u232D": "&cylcty;", "\u2965": "&dHar;", "\u2020": "&dagger;", "\u2138": "&daleth;", "\u2010": "&hyphen;", "\u290F": "&rBarr;", "\u010F": "&dcaron;", "\u0434": "&dcy;", "\u21CA": "&downdownarrows;", "\u2A77": "&eDDot;", "\xB0": "&deg;", "\u03B4": "&delta;", "\u29B1": "&demptyv;", "\u297F": "&dfisht;", "\u{1D521}": "&dfr;", "\u2666": "&diams;", "\u03DD": "&gammad;", "\u22F2": "&disin;", "\xF7": "&divide;", "\u22C7": "&divonx;", "\u0452": "&djcy;", "\u231E": "&llcorner;", "\u230D": "&dlcrop;", $: "&dollar;", "\u{1D555}": "&dopf;", "\u2251": "&eDot;", "\u2238": "&minusd;", "\u2214": "&plusdo;", "\u22A1": "&sdotb;", "\u231F": "&lrcorner;", "\u230C": "&drcrop;", "\u{1D4B9}": "&dscr;", "\u0455": "&dscy;", "\u29F6": "&dsol;", "\u0111": "&dstrok;", "\u22F1": "&dtdot;", "\u25BF": "&triangledown;", "\u29A6": "&dwangle;", "\u045F": "&dzcy;", "\u27FF": "&dzigrarr;", "\xE9": "&eacute;", "\u2A6E": "&easter;", "\u011B": "&ecaron;", "\u2256": "&eqcirc;", "\xEA": "&ecirc;", "\u2255": "&eqcolon;", "\u044D": "&ecy;", "\u0117": "&edot;", "\u2252": "&fallingdotseq;", "\u{1D522}": "&efr;", "\u2A9A": "&eg;", "\xE8": "&egrave;", "\u2A96": "&eqslantgtr;", "\u2A98": "&egsdot;", "\u2A99": "&el;", "\u23E7": "&elinters;", "\u2113": "&ell;", "\u2A95": "&eqslantless;", "\u2A97": "&elsdot;", "\u0113": "&emacr;", "\u2205": "&varnothing;", "\u2004": "&emsp13;", "\u2005": "&emsp14;", "\u2003": "&emsp;", "\u014B": "&eng;", "\u2002": "&ensp;", "\u0119": "&eogon;", "\u{1D556}": "&eopf;", "\u22D5": "&epar;", "\u29E3": "&eparsl;", "\u2A71": "&eplus;", "\u03B5": "&epsilon;", "\u03F5": "&varepsilon;", "=": "&equals;", "\u225F": "&questeq;", "\u2A78": "&equivDD;", "\u29E5": "&eqvparsl;", "\u2253": "&risingdotseq;", "\u2971": "&erarr;", "\u212F": "&escr;", "\u03B7": "&eta;", "\xF0": "&eth;", "\xEB": "&euml;", "\u20AC": "&euro;", "!": "&excl;", "\u0444": "&fcy;", "\u2640": "&female;", "\uFB03": "&ffilig;", "\uFB00": "&fflig;", "\uFB04": "&ffllig;", "\u{1D523}": "&ffr;", "\uFB01": "&filig;", fj: "&fjlig;", "\u266D": "&flat;", "\uFB02": "&fllig;", "\u25B1": "&fltns;", "\u0192": "&fnof;", "\u{1D557}": "&fopf;", "\u22D4": "&pitchfork;", "\u2AD9": "&forkv;", "\u2A0D": "&fpartint;", "\xBD": "&half;", "\u2153": "&frac13;", "\xBC": "&frac14;", "\u2155": "&frac15;", "\u2159": "&frac16;", "\u215B": "&frac18;", "\u2154": "&frac23;", "\u2156": "&frac25;", "\xBE": "&frac34;", "\u2157": "&frac35;", "\u215C": "&frac38;", "\u2158": "&frac45;", "\u215A": "&frac56;", "\u215D": "&frac58;", "\u215E": "&frac78;", "\u2044": "&frasl;", "\u2322": "&sfrown;", "\u{1D4BB}": "&fscr;", "\u2A8C": "&gtreqqless;", "\u01F5": "&gacute;", "\u03B3": "&gamma;", "\u2A86": "&gtrapprox;", "\u011F": "&gbreve;", "\u011D": "&gcirc;", "\u0433": "&gcy;", "\u0121": "&gdot;", "\u2AA9": "&gescc;", "\u2A80": "&gesdot;", "\u2A82": "&gesdoto;", "\u2A84": "&gesdotol;", "\u22DB\uFE00": "&gesl;", "\u2A94": "&gesles;", "\u{1D524}": "&gfr;", "\u2137": "&gimel;", "\u0453": "&gjcy;", "\u2A92": "&glE;", "\u2AA5": "&gla;", "\u2AA4": "&glj;", "\u2269": "&gneqq;", "\u2A8A": "&gnapprox;", "\u2A88": "&gneq;", "\u22E7": "&gnsim;", "\u{1D558}": "&gopf;", "\u210A": "&gscr;", "\u2A8E": "&gsime;", "\u2A90": "&gsiml;", "\u2AA7": "&gtcc;", "\u2A7A": "&gtcir;", "\u22D7": "&gtrdot;", "\u2995": "&gtlPar;", "\u2A7C": "&gtquest;", "\u2978": "&gtrarr;", "\u2269\uFE00": "&gvnE;", "\u044A": "&hardcy;", "\u2948": "&harrcir;", "\u21AD": "&leftrightsquigarrow;", "\u210F": "&plankv;", "\u0125": "&hcirc;", "\u2665": "&heartsuit;", "\u2026": "&mldr;", "\u22B9": "&hercon;", "\u{1D525}": "&hfr;", "\u2925": "&searhk;", "\u2926": "&swarhk;", "\u21FF": "&hoarr;", "\u223B": "&homtht;", "\u21A9": "&larrhk;", "\u21AA": "&rarrhk;", "\u{1D559}": "&hopf;", "\u2015": "&horbar;", "\u{1D4BD}": "&hscr;", "\u0127": "&hstrok;", "\u2043": "&hybull;", "\xED": "&iacute;", "\xEE": "&icirc;", "\u0438": "&icy;", "\u0435": "&iecy;", "\xA1": "&iexcl;", "\u{1D526}": "&ifr;", "\xEC": "&igrave;", "\u2A0C": "&qint;", "\u222D": "&tint;", "\u29DC": "&iinfin;", "\u2129": "&iiota;", "\u0133": "&ijlig;", "\u012B": "&imacr;", "\u0131": "&inodot;", "\u22B7": "&imof;", "\u01B5": "&imped;", "\u2105": "&incare;", "\u221E": "&infin;", "\u29DD": "&infintie;", "\u22BA": "&intercal;", "\u2A17": "&intlarhk;", "\u2A3C": "&iprod;", "\u0451": "&iocy;", "\u012F": "&iogon;", "\u{1D55A}": "&iopf;", "\u03B9": "&iota;", "\xBF": "&iquest;", "\u{1D4BE}": "&iscr;", "\u22F9": "&isinE;", "\u22F5": "&isindot;", "\u22F4": "&isins;", "\u22F3": "&isinsv;", "\u0129": "&itilde;", "\u0456": "&iukcy;", "\xEF": "&iuml;", "\u0135": "&jcirc;", "\u0439": "&jcy;", "\u{1D527}": "&jfr;", "\u0237": "&jmath;", "\u{1D55B}": "&jopf;", "\u{1D4BF}": "&jscr;", "\u0458": "&jsercy;", "\u0454": "&jukcy;", "\u03BA": "&kappa;", "\u03F0": "&varkappa;", "\u0137": "&kcedil;", "\u043A": "&kcy;", "\u{1D528}": "&kfr;", "\u0138": "&kgreen;", "\u0445": "&khcy;", "\u045C": "&kjcy;", "\u{1D55C}": "&kopf;", "\u{1D4C0}": "&kscr;", "\u291B": "&lAtail;", "\u290E": "&lBarr;", "\u2A8B": "&lesseqqgtr;", "\u2962": "&lHar;", "\u013A": "&lacute;", "\u29B4": "&laemptyv;", "\u03BB": "&lambda;", "\u2991": "&langd;", "\u2A85": "&lessapprox;", "\xAB": "&laquo;", "\u291F": "&larrbfs;", "\u291D": "&larrfs;", "\u21AB": "&looparrowleft;", "\u2939": "&larrpl;", "\u2973": "&larrsim;", "\u21A2": "&leftarrowtail;", "\u2AAB": "&lat;", "\u2919": "&latail;", "\u2AAD": "&late;", "\u2AAD\uFE00": "&lates;", "\u290C": "&lbarr;", "\u2772": "&lbbrk;", "{": "&lcub;", "[": "&lsqb;", "\u298B": "&lbrke;", "\u298F": "&lbrksld;", "\u298D": "&lbrkslu;", "\u013E": "&lcaron;", "\u013C": "&lcedil;", "\u043B": "&lcy;", "\u2936": "&ldca;", "\u2967": "&ldrdhar;", "\u294B": "&ldrushar;", "\u21B2": "&ldsh;", "\u2264": "&leq;", "\u21C7": "&llarr;", "\u22CB": "&lthree;", "\u2AA8": "&lescc;", "\u2A7F": "&lesdot;", "\u2A81": "&lesdoto;", "\u2A83": "&lesdotor;", "\u22DA\uFE00": "&lesg;", "\u2A93": "&lesges;", "\u22D6": "&ltdot;", "\u297C": "&lfisht;", "\u{1D529}": "&lfr;", "\u2A91": "&lgE;", "\u296A": "&lharul;", "\u2584": "&lhblk;", "\u0459": "&ljcy;", "\u296B": "&llhard;", "\u25FA": "&lltri;", "\u0140": "&lmidot;", "\u23B0": "&lmoustache;", "\u2268": "&lneqq;", "\u2A89": "&lnapprox;", "\u2A87": "&lneq;", "\u22E6": "&lnsim;", "\u27EC": "&loang;", "\u21FD": "&loarr;", "\u27FC": "&xmap;", "\u21AC": "&rarrlp;", "\u2985": "&lopar;", "\u{1D55D}": "&lopf;", "\u2A2D": "&loplus;", "\u2A34": "&lotimes;", "\u2217": "&lowast;", "\u25CA": "&lozenge;", "(": "&lpar;", "\u2993": "&lparlt;", "\u296D": "&lrhard;", "\u200E": "&lrm;", "\u22BF": "&lrtri;", "\u2039": "&lsaquo;", "\u{1D4C1}": "&lscr;", "\u2A8D": "&lsime;", "\u2A8F": "&lsimg;", "\u201A": "&sbquo;", "\u0142": "&lstrok;", "\u2AA6": "&ltcc;", "\u2A79": "&ltcir;", "\u22C9": "&ltimes;", "\u2976": "&ltlarr;", "\u2A7B": "&ltquest;", "\u2996": "&ltrPar;", "\u25C3": "&triangleleft;", "\u294A": "&lurdshar;", "\u2966": "&luruhar;", "\u2268\uFE00": "&lvnE;", "\u223A": "&mDDot;", "\xAF": "&strns;", "\u2642": "&male;", "\u2720": "&maltese;", "\u25AE": "&marker;", "\u2A29": "&mcomma;", "\u043C": "&mcy;", "\u2014": "&mdash;", "\u{1D52A}": "&mfr;", "\u2127": "&mho;", "\xB5": "&micro;", "\u2AF0": "&midcir;", "\u2212": "&minus;", "\u2A2A": "&minusdu;", "\u2ADB": "&mlcp;", "\u22A7": "&models;", "\u{1D55E}": "&mopf;", "\u{1D4C2}": "&mscr;", "\u03BC": "&mu;", "\u22B8": "&mumap;", "\u22D9\u0338": "&nGg;", "\u226B\u20D2": "&nGt;", "\u21CD": "&nlArr;", "\u21CE": "&nhArr;", "\u22D8\u0338": "&nLl;", "\u226A\u20D2": "&nLt;", "\u21CF": "&nrArr;", "\u22AF": "&nVDash;", "\u22AE": "&nVdash;", "\u0144": "&nacute;", "\u2220\u20D2": "&nang;", "\u2A70\u0338": "&napE;", "\u224B\u0338": "&napid;", "\u0149": "&napos;", "\u266E": "&natural;", "\u2A43": "&ncap;", "\u0148": "&ncaron;", "\u0146": "&ncedil;", "\u2A6D\u0338": "&ncongdot;", "\u2A42": "&ncup;", "\u043D": "&ncy;", "\u2013": "&ndash;", "\u21D7": "&neArr;", "\u2924": "&nearhk;", "\u2250\u0338": "&nedot;", "\u2928": "&toea;", "\u{1D52B}": "&nfr;", "\u21AE": "&nleftrightarrow;", "\u2AF2": "&nhpar;", "\u22FC": "&nis;", "\u22FA": "&nisd;", "\u045A": "&njcy;", "\u2266\u0338": "&nleqq;", "\u219A": "&nleftarrow;", "\u2025": "&nldr;", "\u{1D55F}": "&nopf;", "\xAC": "&not;", "\u22F9\u0338": "&notinE;", "\u22F5\u0338": "&notindot;", "\u22F7": "&notinvb;", "\u22F6": "&notinvc;", "\u22FE": "&notnivb;", "\u22FD": "&notnivc;", "\u2AFD\u20E5": "&nparsl;", "\u2202\u0338": "&npart;", "\u2A14": "&npolint;", "\u219B": "&nrightarrow;", "\u2933\u0338": "&nrarrc;", "\u219D\u0338": "&nrarrw;", "\u{1D4C3}": "&nscr;", "\u2284": "&nsub;", "\u2AC5\u0338": "&nsubseteqq;", "\u2285": "&nsup;", "\u2AC6\u0338": "&nsupseteqq;", "\xF1": "&ntilde;", "\u03BD": "&nu;", "#": "&num;", "\u2116": "&numero;", "\u2007": "&numsp;", "\u22AD": "&nvDash;", "\u2904": "&nvHarr;", "\u224D\u20D2": "&nvap;", "\u22AC": "&nvdash;", "\u2265\u20D2": "&nvge;", ">\u20D2": "&nvgt;", "\u29DE": "&nvinfin;", "\u2902": "&nvlArr;", "\u2264\u20D2": "&nvle;", "<\u20D2": "&nvlt;", "\u22B4\u20D2": "&nvltrie;", "\u2903": "&nvrArr;", "\u22B5\u20D2": "&nvrtrie;", "\u223C\u20D2": "&nvsim;", "\u21D6": "&nwArr;", "\u2923": "&nwarhk;", "\u2927": "&nwnear;", "\xF3": "&oacute;", "\xF4": "&ocirc;", "\u043E": "&ocy;", "\u0151": "&odblac;", "\u2A38": "&odiv;", "\u29BC": "&odsold;", "\u0153": "&oelig;", "\u29BF": "&ofcir;", "\u{1D52C}": "&ofr;", "\u02DB": "&ogon;", "\xF2": "&ograve;", "\u29C1": "&ogt;", "\u29B5": "&ohbar;", "\u29BE": "&olcir;", "\u29BB": "&olcross;", "\u29C0": "&olt;", "\u014D": "&omacr;", "\u03C9": "&omega;", "\u03BF": "&omicron;", "\u29B6": "&omid;", "\u{1D560}": "&oopf;", "\u29B7": "&opar;", "\u29B9": "&operp;", "\u2228": "&vee;", "\u2A5D": "&ord;", "\u2134": "&oscr;", "\xAA": "&ordf;", "\xBA": "&ordm;", "\u22B6": "&origof;", "\u2A56": "&oror;", "\u2A57": "&orslope;", "\u2A5B": "&orv;", "\xF8": "&oslash;", "\u2298": "&osol;", "\xF5": "&otilde;", "\u2A36": "&otimesas;", "\xF6": "&ouml;", "\u233D": "&ovbar;", "\xB6": "&para;", "\u2AF3": "&parsim;", "\u2AFD": "&parsl;", "\u043F": "&pcy;", "%": "&percnt;", ".": "&period;", "\u2030": "&permil;", "\u2031": "&pertenk;", "\u{1D52D}": "&pfr;", "\u03C6": "&phi;", "\u03D5": "&varphi;", "\u260E": "&phone;", "\u03C0": "&pi;", "\u03D6": "&varpi;", "\u210E": "&planckh;", "+": "&plus;", "\u2A23": "&plusacir;", "\u2A22": "&pluscir;", "\u2A25": "&plusdu;", "\u2A72": "&pluse;", "\u2A26": "&plussim;", "\u2A27": "&plustwo;", "\u2A15": "&pointint;", "\u{1D561}": "&popf;", "\xA3": "&pound;", "\u2AB3": "&prE;", "\u2AB7": "&precapprox;", "\u2AB9": "&prnap;", "\u2AB5": "&prnE;", "\u22E8": "&prnsim;", "\u2032": "&prime;", "\u232E": "&profalar;", "\u2312": "&profline;", "\u2313": "&profsurf;", "\u22B0": "&prurel;", "\u{1D4C5}": "&pscr;", "\u03C8": "&psi;", "\u2008": "&puncsp;", "\u{1D52E}": "&qfr;", "\u{1D562}": "&qopf;", "\u2057": "&qprime;", "\u{1D4C6}": "&qscr;", "\u2A16": "&quatint;", "?": "&quest;", "\u291C": "&rAtail;", "\u2964": "&rHar;", "\u223D\u0331": "&race;", "\u0155": "&racute;", "\u29B3": "&raemptyv;", "\u2992": "&rangd;", "\u29A5": "&range;", "\xBB": "&raquo;", "\u2975": "&rarrap;", "\u2920": "&rarrbfs;", "\u2933": "&rarrc;", "\u291E": "&rarrfs;", "\u2945": "&rarrpl;", "\u2974": "&rarrsim;", "\u21A3": "&rightarrowtail;", "\u219D": "&rightsquigarrow;", "\u291A": "&ratail;", "\u2236": "&ratio;", "\u2773": "&rbbrk;", "}": "&rcub;", "]": "&rsqb;", "\u298C": "&rbrke;", "\u298E": "&rbrksld;", "\u2990": "&rbrkslu;", "\u0159": "&rcaron;", "\u0157": "&rcedil;", "\u0440": "&rcy;", "\u2937": "&rdca;", "\u2969": "&rdldhar;", "\u21B3": "&rdsh;", "\u25AD": "&rect;", "\u297D": "&rfisht;", "\u{1D52F}": "&rfr;", "\u296C": "&rharul;", "\u03C1": "&rho;", "\u03F1": "&varrho;", "\u21C9": "&rrarr;", "\u22CC": "&rthree;", "\u02DA": "&ring;", "\u200F": "&rlm;", "\u23B1": "&rmoustache;", "\u2AEE": "&rnmid;", "\u27ED": "&roang;", "\u21FE": "&roarr;", "\u2986": "&ropar;", "\u{1D563}": "&ropf;", "\u2A2E": "&roplus;", "\u2A35": "&rotimes;", ")": "&rpar;", "\u2994": "&rpargt;", "\u2A12": "&rppolint;", "\u203A": "&rsaquo;", "\u{1D4C7}": "&rscr;", "\u22CA": "&rtimes;", "\u25B9": "&triangleright;", "\u29CE": "&rtriltri;", "\u2968": "&ruluhar;", "\u211E": "&rx;", "\u015B": "&sacute;", "\u2AB4": "&scE;", "\u2AB8": "&succapprox;", "\u0161": "&scaron;", "\u015F": "&scedil;", "\u015D": "&scirc;", "\u2AB6": "&succneqq;", "\u2ABA": "&succnapprox;", "\u22E9": "&succnsim;", "\u2A13": "&scpolint;", "\u0441": "&scy;", "\u22C5": "&sdot;", "\u2A66": "&sdote;", "\u21D8": "&seArr;", "\xA7": "&sect;", ";": "&semi;", "\u2929": "&tosa;", "\u2736": "&sext;", "\u{1D530}": "&sfr;", "\u266F": "&sharp;", "\u0449": "&shchcy;", "\u0448": "&shcy;", "\xAD": "&shy;", "\u03C3": "&sigma;", "\u03C2": "&varsigma;", "\u2A6A": "&simdot;", "\u2A9E": "&simg;", "\u2AA0": "&simgE;", "\u2A9D": "&siml;", "\u2A9F": "&simlE;", "\u2246": "&simne;", "\u2A24": "&simplus;", "\u2972": "&simrarr;", "\u2A33": "&smashp;", "\u29E4": "&smeparsl;", "\u2323": "&ssmile;", "\u2AAA": "&smt;", "\u2AAC": "&smte;", "\u2AAC\uFE00": "&smtes;", "\u044C": "&softcy;", "/": "&sol;", "\u29C4": "&solb;", "\u233F": "&solbar;", "\u{1D564}": "&sopf;", "\u2660": "&spadesuit;", "\u2293\uFE00": "&sqcaps;", "\u2294\uFE00": "&sqcups;", "\u{1D4C8}": "&sscr;", "\u2606": "&star;", "\u2282": "&subset;", "\u2AC5": "&subseteqq;", "\u2ABD": "&subdot;", "\u2AC3": "&subedot;", "\u2AC1": "&submult;", "\u2ACB": "&subsetneqq;", "\u228A": "&subsetneq;", "\u2ABF": "&subplus;", "\u2979": "&subrarr;", "\u2AC7": "&subsim;", "\u2AD5": "&subsub;", "\u2AD3": "&subsup;", "\u266A": "&sung;", "\xB9": "&sup1;", "\xB2": "&sup2;", "\xB3": "&sup3;", "\u2AC6": "&supseteqq;", "\u2ABE": "&supdot;", "\u2AD8": "&supdsub;", "\u2AC4": "&supedot;", "\u27C9": "&suphsol;", "\u2AD7": "&suphsub;", "\u297B": "&suplarr;", "\u2AC2": "&supmult;", "\u2ACC": "&supsetneqq;", "\u228B": "&supsetneq;", "\u2AC0": "&supplus;", "\u2AC8": "&supsim;", "\u2AD4": "&supsub;", "\u2AD6": "&supsup;", "\u21D9": "&swArr;", "\u292A": "&swnwar;", "\xDF": "&szlig;", "\u2316": "&target;", "\u03C4": "&tau;", "\u0165": "&tcaron;", "\u0163": "&tcedil;", "\u0442": "&tcy;", "\u2315": "&telrec;", "\u{1D531}": "&tfr;", "\u03B8": "&theta;", "\u03D1": "&vartheta;", "\xFE": "&thorn;", "\xD7": "&times;", "\u2A31": "&timesbar;", "\u2A30": "&timesd;", "\u2336": "&topbot;", "\u2AF1": "&topcir;", "\u{1D565}": "&topf;", "\u2ADA": "&topfork;", "\u2034": "&tprime;", "\u25B5": "&utri;", "\u225C": "&trie;", "\u25EC": "&tridot;", "\u2A3A": "&triminus;", "\u2A39": "&triplus;", "\u29CD": "&trisb;", "\u2A3B": "&tritime;", "\u23E2": "&trpezium;", "\u{1D4C9}": "&tscr;", "\u0446": "&tscy;", "\u045B": "&tshcy;", "\u0167": "&tstrok;", "\u2963": "&uHar;", "\xFA": "&uacute;", "\u045E": "&ubrcy;", "\u016D": "&ubreve;", "\xFB": "&ucirc;", "\u0443": "&ucy;", "\u0171": "&udblac;", "\u297E": "&ufisht;", "\u{1D532}": "&ufr;", "\xF9": "&ugrave;", "\u2580": "&uhblk;", "\u231C": "&ulcorner;", "\u230F": "&ulcrop;", "\u25F8": "&ultri;", "\u016B": "&umacr;", "\u0173": "&uogon;", "\u{1D566}": "&uopf;", "\u03C5": "&upsilon;", "\u21C8": "&uuarr;", "\u231D": "&urcorner;", "\u230E": "&urcrop;", "\u016F": "&uring;", "\u25F9": "&urtri;", "\u{1D4CA}": "&uscr;", "\u22F0": "&utdot;", "\u0169": "&utilde;", "\xFC": "&uuml;", "\u29A7": "&uwangle;", "\u2AE8": "&vBar;", "\u2AE9": "&vBarv;", "\u299C": "&vangrt;", "\u228A\uFE00": "&vsubne;", "\u2ACB\uFE00": "&vsubnE;", "\u228B\uFE00": "&vsupne;", "\u2ACC\uFE00": "&vsupnE;", "\u0432": "&vcy;", "\u22BB": "&veebar;", "\u225A": "&veeeq;", "\u22EE": "&vellip;", "\u{1D533}": "&vfr;", "\u{1D567}": "&vopf;", "\u{1D4CB}": "&vscr;", "\u299A": "&vzigzag;", "\u0175": "&wcirc;", "\u2A5F": "&wedbar;", "\u2259": "&wedgeq;", "\u2118": "&wp;", "\u{1D534}": "&wfr;", "\u{1D568}": "&wopf;", "\u{1D4CC}": "&wscr;", "\u{1D535}": "&xfr;", "\u03BE": "&xi;", "\u22FB": "&xnis;", "\u{1D569}": "&xopf;", "\u{1D4CD}": "&xscr;", "\xFD": "&yacute;", "\u044F": "&yacy;", "\u0177": "&ycirc;", "\u044B": "&ycy;", "\xA5": "&yen;", "\u{1D536}": "&yfr;", "\u0457": "&yicy;", "\u{1D56A}": "&yopf;", "\u{1D4CE}": "&yscr;", "\u044E": "&yucy;", "\xFF": "&yuml;", "\u017A": "&zacute;", "\u017E": "&zcaron;", "\u0437": "&zcy;", "\u017C": "&zdot;", "\u03B6": "&zeta;", "\u{1D537}": "&zfr;", "\u0436": "&zhcy;", "\u21DD": "&zigrarr;", "\u{1D56B}": "&zopf;", "\u{1D4CF}": "&zscr;", "\u200D": "&zwj;", "\u200C": "&zwnj;" } } };
  }
});

// node_modules/html-entities/lib/numeric-unicode-map.js
var require_numeric_unicode_map = __commonJS({
  "node_modules/html-entities/lib/numeric-unicode-map.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numericUnicodeMap = { 0: 65533, 128: 8364, 130: 8218, 131: 402, 132: 8222, 133: 8230, 134: 8224, 135: 8225, 136: 710, 137: 8240, 138: 352, 139: 8249, 140: 338, 142: 381, 145: 8216, 146: 8217, 147: 8220, 148: 8221, 149: 8226, 150: 8211, 151: 8212, 152: 732, 153: 8482, 154: 353, 155: 8250, 156: 339, 158: 382, 159: 376 };
  }
});

// node_modules/html-entities/lib/surrogate-pairs.js
var require_surrogate_pairs = __commonJS({
  "node_modules/html-entities/lib/surrogate-pairs.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromCodePoint = String.fromCodePoint || function(astralCodePoint) {
      return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);
    };
    exports.getCodePoint = String.prototype.codePointAt ? function(input, position) {
      return input.codePointAt(position);
    } : function(input, position) {
      return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;
    };
    exports.highSurrogateFrom = 55296;
    exports.highSurrogateTo = 56319;
  }
});

// node_modules/html-entities/lib/index.js
var require_lib = __commonJS({
  "node_modules/html-entities/lib/index.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var named_references_1 = require_named_references();
    var numeric_unicode_map_1 = require_numeric_unicode_map();
    var surrogate_pairs_1 = require_surrogate_pairs();
    var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), { all: named_references_1.namedReferences.html5 });
    function replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {
      macroRegExp.lastIndex = 0;
      var replaceMatch = macroRegExp.exec(macroText);
      var replaceResult;
      if (replaceMatch) {
        replaceResult = "";
        var replaceLastIndex = 0;
        do {
          if (replaceLastIndex !== replaceMatch.index) {
            replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);
          }
          var replaceInput = replaceMatch[0];
          replaceResult += macroReplacer(replaceInput);
          replaceLastIndex = replaceMatch.index + replaceInput.length;
        } while (replaceMatch = macroRegExp.exec(macroText));
        if (replaceLastIndex !== macroText.length) {
          replaceResult += macroText.substring(replaceLastIndex);
        }
      } else {
        replaceResult = macroText;
      }
      return replaceResult;
    }
    var encodeRegExps = { specialChars: /[<>'"&]/g, nonAscii: /[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g, nonAsciiPrintable: /[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g, nonAsciiPrintableOnly: /[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g, extensive: /[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g };
    var defaultEncodeOptions = { mode: "specialChars", level: "all", numeric: "decimal" };
    function encode(text, _a) {
      var _b = _a === void 0 ? defaultEncodeOptions : _a, _c = _b.mode, mode = _c === void 0 ? "specialChars" : _c, _d = _b.numeric, numeric = _d === void 0 ? "decimal" : _d, _e = _b.level, level = _e === void 0 ? "all" : _e;
      if (!text) {
        return "";
      }
      var encodeRegExp = encodeRegExps[mode];
      var references = allNamedReferences[level].characters;
      var isHex = numeric === "hexadecimal";
      return replaceUsingRegExp(text, encodeRegExp, function(input) {
        var result = references[input];
        if (!result) {
          var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);
          result = (isHex ? "&#x" + code.toString(16) : "&#" + code) + ";";
        }
        return result;
      });
    }
    exports.encode = encode;
    var defaultDecodeOptions = { scope: "body", level: "all" };
    var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
    var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
    var baseDecodeRegExps = { xml: { strict, attribute, body: named_references_1.bodyRegExps.xml }, html4: { strict, attribute, body: named_references_1.bodyRegExps.html4 }, html5: { strict, attribute, body: named_references_1.bodyRegExps.html5 } };
    var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), { all: baseDecodeRegExps.html5 });
    var fromCharCode = String.fromCharCode;
    var outOfBoundsChar = fromCharCode(65533);
    var defaultDecodeEntityOptions = { level: "all" };
    function getDecodedEntity(entity, references, isAttribute, isStrict) {
      var decodeResult = entity;
      var decodeEntityLastChar = entity[entity.length - 1];
      if (isAttribute && decodeEntityLastChar === "=") {
        decodeResult = entity;
      } else if (isStrict && decodeEntityLastChar !== ";") {
        decodeResult = entity;
      } else {
        var decodeResultByReference = references[entity];
        if (decodeResultByReference) {
          decodeResult = decodeResultByReference;
        } else if (entity[0] === "&" && entity[1] === "#") {
          var decodeSecondChar = entity[2];
          var decodeCode = decodeSecondChar == "x" || decodeSecondChar == "X" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));
          decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);
        }
      }
      return decodeResult;
    }
    function decodeEntity(entity, _a) {
      var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level, level = _b === void 0 ? "all" : _b;
      if (!entity) {
        return "";
      }
      return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);
    }
    exports.decodeEntity = decodeEntity;
    function decode2(text, _a) {
      var _b = _a === void 0 ? defaultDecodeOptions : _a, _c = _b.level, level = _c === void 0 ? "all" : _c, _d = _b.scope, scope = _d === void 0 ? level === "xml" ? "strict" : "body" : _d;
      if (!text) {
        return "";
      }
      var decodeRegExp = decodeRegExps[level][scope];
      var references = allNamedReferences[level].entities;
      var isAttribute = scope === "attribute";
      var isStrict = scope === "strict";
      return replaceUsingRegExp(text, decodeRegExp, function(entity) {
        return getDecodedEntity(entity, references, isAttribute, isStrict);
      });
    }
    exports.decode = decode2;
  }
});

// snippets/snippets.json
var require_snippets = __commonJS({
  "snippets/snippets.json"(exports, module2) {
    module2.exports = {
      component: {
        prefix: "component \u2026",
        body: [
          "$2",
          "component$1 {",
          "	$0",
          "}"
        ],
        description: "Component definition",
        scope: "cfml",
        context: "script"
      },
      function: {
        prefix: "function \u2026",
        body: [
          "$0",
          "${1|access,public,package,private,remote|} ${2|returnType,any,array,binary,boolean,component,date,function,guid,numeric,query,string,struct,uuid,variableName,void,xml|} function ${3:name}($4) {",
          "	$5",
          "}"
        ],
        description: "Function definition",
        scope: "cfml",
        context: "script"
      },
      argument: {
        prefix: "arg \u2026",
        body: "${1:required }${2|any,array,binary,boolean,component,date,function,guid,numeric,query,string,struct,uuid,variableName,void,xml|} ${3:name}$0",
        description: "Argument",
        context: "script"
      },
      switch: {
        prefix: "switch \u2026",
        body: [
          "switch (${1:expression}) {",
          "	case ${2:value}:",
          "		${3}",
          "		break;${4}",
          "	default:",
          "		${5}",
          "}$0"
        ],
        description: "Switch block",
        scope: "cfml",
        context: "script"
      },
      case: {
        prefix: "case \u2026",
        body: [
          "case ${1:value}:",
          "	${2}",
          "	break;$0"
        ],
        description: "Case block",
        scope: "cfml",
        context: "script"
      },
      dowhile: {
        prefix: "do while \u2026",
        body: [
          "do {",
          "	${1}",
          "} while (${2:condition});$0"
        ],
        description: "Do-While loop",
        scope: "cfml",
        context: "script"
      },
      while: {
        prefix: "while \u2026",
        body: [
          "while (${1:condition}) {",
          "	${2}",
          "}$0"
        ],
        description: "While loop",
        scope: "cfml",
        context: "script"
      },
      if: {
        prefix: "if \u2026",
        body: [
          "if (${1:condition}) {",
          "	${2}",
          "}$0"
        ],
        description: "If block",
        scope: "cfml",
        context: "script"
      },
      "if else": {
        prefix: "ifelse \u2026",
        body: [
          "if (${1:condition}) {",
          "	${2}",
          "} else {",
          "	${3}",
          "}$0"
        ],
        description: "If-Else block",
        scope: "cfml",
        context: "script"
      },
      else: {
        prefix: "else \u2026",
        body: [
          "else {",
          "	${1}",
          "}$0"
        ],
        description: "Else block",
        scope: "cfml",
        context: "script"
      },
      elseif: {
        prefix: "elseif \u2026",
        body: [
          "else if (${1:condition}) {",
          "	${2}",
          "}$0"
        ],
        description: "Else-if block",
        scope: "cfml",
        context: "script"
      },
      for: {
        prefix: "for \u2026",
        body: [
          "for (${1:i} = ${2:1}; ${1:i} < $3; ${1:i}++) {",
          "	${4}",
          "}$0"
        ],
        description: "For loop",
        scope: "cfml",
        context: "script"
      },
      foreach: {
        prefix: "foreach \u2026",
        body: [
          "for (${1:variable} in ${2:collection}) {",
          "	${3}",
          "}$0"
        ],
        description: "For-each loop",
        scope: "cfml",
        context: "script"
      },
      trycatch: {
        prefix: "try \u2026",
        body: [
          "try {",
          "	${1}",
          "} catch (${2:exType} ${3:exName}) {",
          "	${4}",
          "}$0"
        ],
        description: "Try-catch block",
        scope: "cfml",
        context: "script"
      },
      trycatchfinally: {
        prefix: "tryfinally \u2026",
        body: [
          "try {",
          "	${1}",
          "} catch (${2:exType} ${3:exName}) {",
          "	${4}",
          "} finally {",
          "	${5}",
          "}$0"
        ],
        description: "Try-catch-finally block",
        scope: "cfml",
        context: "script"
      },
      catch: {
        prefix: "catch \u2026",
        body: [
          "catch (${2:exType} ${3:exName}) {",
          "	${4}",
          "}$0"
        ],
        description: "Catch block",
        scope: "cfml",
        context: "script"
      }
    };
  }
});

// src/cfmlMain.ts
var cfmlMain_exports = {};
__export(cfmlMain_exports, {
  LANGUAGE_CFS_ID: () => LANGUAGE_CFS_ID,
  LANGUAGE_ID: () => LANGUAGE_ID,
  activate: () => activate,
  deactivate: () => deactivate,
  extensionContext: () => extensionContext,
  getBulkCaching: () => getBulkCaching,
  getConfigurationTarget: () => getConfigurationTarget,
  setBulkCaching: () => setBulkCaching
});
module.exports = __toCommonJS(cfmlMain_exports);
init_process();
init_buffer();
var import_micromatch = __toESM(require_micromatch());
var import_vscode35 = require("vscode");

// src/entities/component.ts
init_process();
init_buffer();
var import_vscode16 = require("vscode");

// src/features/cachedEntities.ts
init_process();
init_buffer();
var import_vscode14 = require("vscode");

// src/utils/LSTextDocument.ts
init_process();
init_buffer();
var import_vscode = require("vscode");

// node_modules/vscode-languageserver-textdocument/lib/esm/main.js
init_process();
init_buffer();
var FullTextDocument = class _FullTextDocument {
  constructor(uri, languageId, version2, content) {
    this._uri = uri;
    this._languageId = languageId;
    this._version = version2;
    this._content = content;
    this._lineOffsets = void 0;
  }
  get uri() {
    return this._uri;
  }
  get languageId() {
    return this._languageId;
  }
  get version() {
    return this._version;
  }
  getText(range) {
    if (range) {
      const start = this.offsetAt(range.start);
      const end = this.offsetAt(range.end);
      return this._content.substring(start, end);
    }
    return this._content;
  }
  update(changes, version2) {
    for (const change of changes) {
      if (_FullTextDocument.isIncremental(change)) {
        const range = getWellformedRange(change.range);
        const startOffset = this.offsetAt(range.start);
        const endOffset = this.offsetAt(range.end);
        this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
        const startLine = Math.max(range.start.line, 0);
        const endLine = Math.max(range.end.line, 0);
        let lineOffsets = this._lineOffsets;
        const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
        if (endLine - startLine === addedLineOffsets.length) {
          for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
            lineOffsets[i + startLine + 1] = addedLineOffsets[i];
          }
        } else {
          if (addedLineOffsets.length < 1e4) {
            lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
          } else {
            this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
          }
        }
        const diff = change.text.length - (endOffset - startOffset);
        if (diff !== 0) {
          for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
            lineOffsets[i] = lineOffsets[i] + diff;
          }
        }
      } else if (_FullTextDocument.isFull(change)) {
        this._content = change.text;
        this._lineOffsets = void 0;
      } else {
        throw new Error("Unknown change event received");
      }
    }
    this._version = version2;
  }
  getLineOffsets() {
    if (this._lineOffsets === void 0) {
      this._lineOffsets = computeLineOffsets(this._content, true);
    }
    return this._lineOffsets;
  }
  positionAt(offset) {
    offset = Math.max(Math.min(offset, this._content.length), 0);
    const lineOffsets = this.getLineOffsets();
    let low = 0, high = lineOffsets.length;
    if (high === 0) {
      return { line: 0, character: offset };
    }
    while (low < high) {
      const mid = Math.floor((low + high) / 2);
      if (lineOffsets[mid] > offset) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    const line = low - 1;
    offset = this.ensureBeforeEOL(offset, lineOffsets[line]);
    return { line, character: offset - lineOffsets[line] };
  }
  offsetAt(position) {
    const lineOffsets = this.getLineOffsets();
    if (position.line >= lineOffsets.length) {
      return this._content.length;
    } else if (position.line < 0) {
      return 0;
    }
    const lineOffset = lineOffsets[position.line];
    if (position.character <= 0) {
      return lineOffset;
    }
    const nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
    const offset = Math.min(lineOffset + position.character, nextLineOffset);
    return this.ensureBeforeEOL(offset, lineOffset);
  }
  ensureBeforeEOL(offset, lineOffset) {
    while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {
      offset--;
    }
    return offset;
  }
  get lineCount() {
    return this.getLineOffsets().length;
  }
  static isIncremental(event) {
    const candidate = event;
    return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
  }
  static isFull(event) {
    const candidate = event;
    return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
  }
};
var TextDocument;
(function(TextDocument31) {
  function create(uri, languageId, version2, content) {
    return new FullTextDocument(uri, languageId, version2, content);
  }
  TextDocument31.create = create;
  function update(document2, changes, version2) {
    if (document2 instanceof FullTextDocument) {
      document2.update(changes, version2);
      return document2;
    } else {
      throw new Error("TextDocument.update: document must be created by TextDocument.create");
    }
  }
  TextDocument31.update = update;
  function applyEdits(document2, edits) {
    const text = document2.getText();
    const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {
      const diff = a.range.start.line - b.range.start.line;
      if (diff === 0) {
        return a.range.start.character - b.range.start.character;
      }
      return diff;
    });
    let lastModifiedOffset = 0;
    const spans = [];
    for (const e of sortedEdits) {
      const startOffset = document2.offsetAt(e.range.start);
      if (startOffset < lastModifiedOffset) {
        throw new Error("Overlapping edit");
      } else if (startOffset > lastModifiedOffset) {
        spans.push(text.substring(lastModifiedOffset, startOffset));
      }
      if (e.newText.length) {
        spans.push(e.newText);
      }
      lastModifiedOffset = document2.offsetAt(e.range.end);
    }
    spans.push(text.substr(lastModifiedOffset));
    return spans.join("");
  }
  TextDocument31.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare3) {
  if (data.length <= 1) {
    return data;
  }
  const p = data.length / 2 | 0;
  const left = data.slice(0, p);
  const right = data.slice(p);
  mergeSort(left, compare3);
  mergeSort(right, compare3);
  let leftIdx = 0;
  let rightIdx = 0;
  let i = 0;
  while (leftIdx < left.length && rightIdx < right.length) {
    const ret = compare3(left[leftIdx], right[rightIdx]);
    if (ret <= 0) {
      data[i++] = left[leftIdx++];
    } else {
      data[i++] = right[rightIdx++];
    }
  }
  while (leftIdx < left.length) {
    data[i++] = left[leftIdx++];
  }
  while (rightIdx < right.length) {
    data[i++] = right[rightIdx++];
  }
  return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
  const result = isAtLineStart ? [textOffset] : [];
  for (let i = 0; i < text.length; i++) {
    const ch = text.charCodeAt(i);
    if (isEOL(ch)) {
      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
        i++;
      }
      result.push(textOffset + i + 1);
    }
  }
  return result;
}
function isEOL(char) {
  return char === 13 || char === 10;
}
function getWellformedRange(range) {
  const start = range.start;
  const end = range.end;
  if (start.line > end.line || start.line === end.line && start.character > end.character) {
    return { start: end, end: start };
  }
  return range;
}
function getWellformedEdit(textEdit) {
  const range = getWellformedRange(textEdit.range);
  if (range !== textEdit.range) {
    return { newText: textEdit.newText, range };
  }
  return textEdit;
}

// src/utils/wordHelpers.ts
init_process();
init_buffer();
var maxLen = 1e3;
var timeBudget = 150;
var windowSize = 15;
function getWordAtText(column, wordDefinition, text) {
  let textOffset = 0;
  if (text.length > maxLen) {
    let start = column - maxLen / 2;
    if (start < 0) {
      start = 0;
    } else {
      textOffset += start;
    }
    text = text.substring(start, column + maxLen / 2);
  }
  const t1 = Date.now();
  const pos = column - 1 - textOffset;
  let prevRegexIndex = -1;
  let match = null;
  for (let i = 1; ; i++) {
    if (Date.now() - t1 >= timeBudget) {
      break;
    }
    const regexIndex = pos - windowSize * i;
    wordDefinition.lastIndex = Math.max(0, regexIndex);
    const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);
    if (!thisMatch && match) {
      break;
    }
    match = thisMatch;
    if (regexIndex <= 0) {
      break;
    }
    prevRegexIndex = regexIndex;
  }
  if (match) {
    const result = {
      word: match[0],
      startColumn: textOffset + 1 + match.index,
      endColumn: textOffset + 1 + match.index + match[0].length
    };
    wordDefinition.lastIndex = 0;
    return result;
  }
  return null;
}
function _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {
  let match;
  while (match = wordDefinition.exec(text)) {
    if (match.index <= pos && wordDefinition.lastIndex >= pos) {
      break;
    } else if (stopPos > 0 && match.index > stopPos) {
      match = null;
      break;
    }
  }
  return match;
}

// src/utils/LSTextDocument.ts
var LSTextDocument = class _LSTextDocument {
  constructor(uri, languageId, version2, content) {
    // These are fixed as this implementation is not open for editing
    this.isUntitled = false;
    this.version = 1;
    this.isDirty = false;
    this.isClosed = false;
    let lineEnding = "\n";
    const lineEndingMatch = content.match(/\r\n|\r|\n/g);
    if (lineEndingMatch) {
      lineEnding = lineEndingMatch[0];
      if (lineEnding === "\r") {
        lineEnding = "\r\n";
      }
      content = content.replaceAll(/\r\n|\r|\n/g, lineEnding);
    }
    this.textDocument = TextDocument.create(uri.toString(), languageId, version2, content);
    this.uri = uri;
    this.fileName = uri.fsPath;
    this.eol = lineEnding === "\r\n" ? import_vscode.EndOfLine.CRLF : import_vscode.EndOfLine.LF;
  }
  // Pass these through to the actual text document
  get languageId() {
    return this.textDocument.languageId;
  }
  get lineCount() {
    return this.textDocument.lineCount;
  }
  static async openTextDocument(uri, languageId = "plaintext") {
    const contentBytes = await import_vscode.workspace.fs.readFile(uri);
    const content = new TextDecoder("utf-8").decode(contentBytes);
    const version2 = 1;
    return new _LSTextDocument(uri, languageId, version2, content);
  }
  save() {
    throw new Error("Method not implemented.");
  }
  lineAt(lineOrPosition) {
    if (typeof lineOrPosition === "number") {
      return this._lineAt(new import_vscode.Position(lineOrPosition, 0));
    } else {
      return this._lineAt(lineOrPosition);
    }
  }
  _lineAt(position) {
    const lineText = this.textDocument.getText({
      start: { line: position.line, character: 0 },
      end: { line: position.line, character: Number.MAX_SAFE_INTEGER }
    });
    return {
      lineNumber: position.line,
      text: lineText,
      range: new import_vscode.Range(new import_vscode.Position(position.line, 0), new import_vscode.Position(position.line, lineText.length)),
      rangeIncludingLineBreak: new import_vscode.Range(new import_vscode.Position(position.line, 0), new import_vscode.Position(position.line + 1, 0)),
      firstNonWhitespaceCharacterIndex: lineText.search(/\S|$/),
      isEmptyOrWhitespace: lineText.trim().length === 0
    };
  }
  offsetAt(position) {
    return this.textDocument.offsetAt(position);
  }
  positionAt(offset) {
    const pos = this.textDocument.positionAt(offset);
    return new import_vscode.Position(pos.line, pos.character);
  }
  getText(range) {
    return this.textDocument.getText(range);
  }
  // See: https://github.com/microsoft/deoptexplorer-vscode/blob/9a6bc239bf88a6c26a52a517d41e1a00e1d96353/src/third-party-derived/vscode/textDocumentLike.ts#L262
  getWordRangeAtPosition(position, regex) {
    position = this.validatePosition(position);
    if (!regex) {
      regex = DEFAULT_WORD_REGEXP;
    } else {
      regex.lastIndex = 0;
      if (regex.test("") && regex.lastIndex === 0) {
        throw new Error("Ignoring custom regexp because it matches the empty string.");
      }
      if (!regex.global || regex.sticky) {
        let flags = "g";
        if (regex.ignoreCase) flags += "i";
        if (regex.multiline) flags += "m";
        if (regex.unicode) flags += "u";
        regex = new RegExp(regex.source, flags);
      }
    }
    const wordAtText = getWordAtText(
      position.character + 1,
      regex,
      this.lineAt(position).text
    );
    if (wordAtText) {
      return new import_vscode.Range(position.line, wordAtText.startColumn - 1, position.line, wordAtText.endColumn - 1);
    }
    return void 0;
  }
  validateRange(range) {
    const start = this.positionAt(this.textDocument.offsetAt(range.start));
    const end = this.positionAt(this.textDocument.offsetAt(range.end));
    return new import_vscode.Range(start, end);
  }
  validatePosition(position) {
    const validOffset = this.textDocument.offsetAt(position);
    const pos = this.textDocument.positionAt(validOffset);
    return new import_vscode.Position(pos.line, pos.character);
  }
};
var DEFAULT_WORD_REGEXP = /(-?\d*\.\d\w*)|([^\`\~\!\@\#\$\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g;

// src/entities/scope.ts
init_process();
init_buffer();
var Scope = /* @__PURE__ */ ((Scope2) => {
  Scope2["Application"] = "application";
  Scope2["Arguments"] = "arguments";
  Scope2["Attributes"] = "attributes";
  Scope2["Caller"] = "caller";
  Scope2["Cffile"] = "cffile";
  Scope2["CGI"] = "cgi";
  Scope2["Client"] = "client";
  Scope2["Cookie"] = "cookie";
  Scope2["Flash"] = "flash";
  Scope2["Form"] = "form";
  Scope2["Local"] = "local";
  Scope2["Request"] = "request";
  Scope2["Server"] = "server";
  Scope2["Session"] = "session";
  Scope2["Static"] = "static";
  Scope2["This"] = "this";
  Scope2["ThisTag"] = "thistag";
  Scope2["Thread"] = "thread";
  Scope2["ThreadLocal"] = "threadlocal";
  Scope2["URL"] = "url";
  Scope2["Unknown"] = "unknown";
  Scope2["Variables"] = "variables";
  return Scope2;
})(Scope || {});
((Scope2) => {
  function valueOf(scope) {
    switch (scope.toLowerCase()) {
      case "application":
        return "application" /* Application */;
      case "arguments":
        return "arguments" /* Arguments */;
      case "attributes":
        return "attributes" /* Attributes */;
      case "caller":
        return "caller" /* Caller */;
      case "cffile":
        return "cffile" /* Cffile */;
      case "cgi":
        return "cgi" /* CGI */;
      case "client":
        return "client" /* Client */;
      case "cookie":
        return "cookie" /* Cookie */;
      case "flash":
        return "flash" /* Flash */;
      case "form":
        return "form" /* Form */;
      case "local":
        return "local" /* Local */;
      case "request":
        return "request" /* Request */;
      case "server":
        return "server" /* Server */;
      case "session":
        return "session" /* Session */;
      case "static":
        return "static" /* Static */;
      case "this":
        return "this" /* This */;
      case "thistag":
        return "thistag" /* ThisTag */;
      case "thread":
        return "thread" /* Thread */;
      case "url":
        return "url" /* URL */;
      case "variables":
        return "variables" /* Variables */;
      default:
        return "unknown" /* Unknown */;
    }
  }
  Scope2.valueOf = valueOf;
})(Scope || (Scope = {}));
var allScopes = [
  "application" /* Application */,
  "arguments" /* Arguments */,
  "attributes" /* Attributes */,
  "caller" /* Caller */,
  "cffile" /* Cffile */,
  "cgi" /* CGI */,
  "client" /* Client */,
  "cookie" /* Cookie */,
  "flash" /* Flash */,
  "form" /* Form */,
  "local" /* Local */,
  "request" /* Request */,
  "server" /* Server */,
  "session" /* Session */,
  "static" /* Static */,
  "this" /* This */,
  "thistag" /* ThisTag */,
  "thread" /* Thread */,
  "url" /* URL */,
  "variables" /* Variables */
];
var unscopedPrecedence = [
  "local" /* Local */,
  "arguments" /* Arguments */,
  "threadlocal" /* ThreadLocal */,
  // Query (not a true scope; variables in query loops)
  "thread" /* Thread */,
  "variables" /* Variables */,
  "cgi" /* CGI */,
  "cffile" /* Cffile */,
  "url" /* URL */,
  "form" /* Form */,
  "cookie" /* Cookie */,
  "client" /* Client */
];
var scopes = {
  "application": {
    detail: "(scope) application",
    description: "Contains variables that are associated with one, named application on a server. The cfapplication tag name attribute or the Application.cfc This.name variable setting specifies the application name.",
    prefixRequired: true
  },
  "arguments": {
    detail: "(scope) arguments",
    description: "Variables passed in a call to a user-defined function or ColdFusion component method.",
    prefixRequired: false
  },
  "attributes": {
    detail: "(scope) attributes",
    description: "Used only in custom tag pages and threads. Contains the values passed by the calling page or cfthread tag in the tag's attributes.",
    prefixRequired: true
  },
  "caller": {
    detail: "(scope) caller",
    description: "Used only in custom tag pages. The custom tag's Caller scope is a reference to the calling page's Variables scope. Any variables that you create or change in the custom tag page using the Caller scope are visible in the calling page's Variables scope.",
    prefixRequired: false
  },
  "cffile": {
    detail: "(scope) cffile",
    description: "Used to access the properties of a cffile object after an invocation of cffile.",
    prefixRequired: true
  },
  "cgi": {
    detail: "(scope) cgi",
    description: "Contains environment variables identifying the context in which a page was requested. The variables available depend on the browser and server software.",
    prefixRequired: true
  },
  "client": {
    detail: "(scope) client",
    description: "Contains variables that are associated with one client. Client variables let you maintain state as a user moves from page to page in an application, and are available across browser sessions. By default, Client variables are stored in the system registry, but you can store them in a cookie or a database. Client variables cannot be complex data types and can include periods in their names.",
    prefixRequired: false
  },
  "cookie": {
    detail: "(scope) cookie",
    description: "Contains variables maintained in a user's browser as cookies. Cookies are typically stored in a file on the browser, so they are available across browser sessions and applications. You can create memory-only Cookie variables, which are not available after the user closes the browser. Cookie scope variable names can include periods.",
    prefixRequired: false
  },
  "flash": {
    detail: "(scope) flash",
    description: "Variables sent by a SWF movie to ColdFusion and returned by ColdFusion to the movie. For more information, see Using the Flash Remoting Service.",
    prefixRequired: true
  },
  "form": {
    detail: "(scope) form",
    description: "Contains variables passed from a Form page to its action page as the result of submitting the form. (If you use the HTML form tag, you must use post method.)",
    prefixRequired: false
  },
  "local": {
    detail: "(scope) local",
    description: "Contains variables that are declared inside a user-defined function or ColdFusion component method and exist only while a function executes.",
    prefixRequired: false
  },
  "request": {
    detail: "(scope) request",
    description: "Used to hold data that must be available for the duration of one HTTP request. The Request scope is available to all pages, including custom tags and nested custom tags, that are processed in response to the request. This scope is useful for nested (child/parent) tags. This scope can often be used in place of the Application scope, to avoid the need for locking variables.",
    prefixRequired: true
  },
  "server": {
    detail: "(scope) server",
    description: "Contains variables that are associated with the current ColdFusion server. This scope lets you define variables that are available to all your ColdFusion pages, across multiple applications.",
    prefixRequired: true
  },
  "session": {
    detail: "(scope) session",
    description: "Contains variables that are associated with one client and persist only as long as the client maintains a session. They are stored in the server's memory and can be set to time out after a period of inactivity.",
    prefixRequired: true
  },
  // Lucee-only
  "static": {
    detail: "(scope) static",
    description: "(Lucee-only) For use with functions and variables within a ColdFusion component that do not belong to an instantiated object.",
    prefixRequired: true
  },
  "this": {
    detail: "(scope) this",
    description: "Exists only in ColdFusion components or cffunction tags that are part of a containing object such as a ColdFusion Struct. Exists for the duration of the component instance or containing object. Data in the This scope is accessible from outside the component or container by using the instance or object name as a prefix.",
    prefixRequired: true
  },
  "thisTag": {
    detail: "(scope) thisTag",
    description: "Used only in custom tag pages. The ThisTag scope is active for the current invocation of the tag. If a custom tag contains a nested tag, any ThisTag scope values you set before calling the nested tag are preserved when the nested tag returns to the calling tag. The ThisTag scope includes three built-in variables that identify the tag's execution mode, contain the tag's generated contents, and indicate whether the tag has an end tag.A nested custom tag can use the cfassociate tag to return values to the calling tag's ThisTag scope.",
    prefixRequired: true
  },
  "thread": {
    detail: "(scope) thread",
    description: "Variables that are created and changed inside a ColdFusion thread, but can be read by all code on the page that creates the thread. Each thread has a Thread scope that is a subscope of a cfthread scope.",
    prefixRequired: false
  },
  "url": {
    detail: "(scope) url",
    description: "Contains parameters passed to the current page in the URL that is used to call it. The parameters are appended to the URL in the format ?variablename1=value&variablename2=value...",
    prefixRequired: false
  },
  "variables": {
    detail: "(scope) variables",
    description: "The default scope for variables of any type that are created with the cfset and cfparam tags. A Variables scope variable is available only on the page on which it is created and any included pages (see also the Caller scope). Variables scope variables created in a CFC are available only to the component and its functions, and not to the page that instantiates the component or calls its functions.",
    prefixRequired: false
  }
};
function getValidScopesPrefixPattern(scopes2, optionalScope = true) {
  const validScopes = scopes2.join("|");
  let pattern = `(?:^|[^.\\s])\\s*(?:\\b(${validScopes})\\s*\\.\\s*)`;
  if (optionalScope) {
    pattern += "?";
  }
  return new RegExp(pattern + "$", "i");
}
function getVariableScopePrefixPattern() {
  return getValidScopesPrefixPattern(allScopes, true);
}

// src/entities/variable.ts
init_process();
init_buffer();

// src/entities/dataType.ts
init_process();
init_buffer();

// src/utils/textUtil.ts
init_process();
init_buffer();
var import_vscode8 = require("vscode");

// src/utils/contextUtil.ts
init_process();
init_buffer();
var import_vscode7 = require("vscode");

// src/entities/tag.ts
init_process();
init_buffer();
var import_vscode5 = require("vscode");

// src/utils/documentUtil.ts
init_process();
init_buffer();
var import_vscode3 = require("vscode");

// src/utils/cfdocs/cfmlEngine.ts
init_process();
init_buffer();
var import_semver = __toESM(require_semver2());
var import_vscode2 = require("vscode");
var CFMLEngineName = /* @__PURE__ */ ((CFMLEngineName2) => {
  CFMLEngineName2["ColdFusion"] = "coldfusion";
  CFMLEngineName2["Lucee"] = "lucee";
  CFMLEngineName2["Railo"] = "railo";
  CFMLEngineName2["OpenBD"] = "openbd";
  CFMLEngineName2["Unknown"] = "unknown";
  return CFMLEngineName2;
})(CFMLEngineName || {});
((CFMLEngineName2) => {
  function valueOf(name) {
    switch (name.toLowerCase()) {
      case "coldfusion":
        return "coldfusion" /* ColdFusion */;
      case "lucee":
        return "lucee" /* Lucee */;
      case "railo":
        return "railo" /* Railo */;
      case "openbd":
        return "openbd" /* OpenBD */;
      default:
        return "unknown" /* Unknown */;
    }
  }
  CFMLEngineName2.valueOf = valueOf;
})(CFMLEngineName || (CFMLEngineName = {}));
var CFMLEngine = class _CFMLEngine {
  /**
   *
   * @param name
   * @param version
   */
  constructor(name, version2) {
    this.name = name;
    if (version2 !== void 0 && version2 !== "" && (0, import_semver.valid)(version2, true)) {
      this.version = (0, import_semver.valid)(version2, true);
    } else {
      this.version = _CFMLEngine.toSemVer(version2);
    }
  }
  /**
   * Getter for CFML engine name
   * @returns
   */
  getName() {
    return this.name;
  }
  /**
   * Getter for CFML engine version
   * @returns
   */
  getVersion() {
    return this.version;
  }
  /**
   * Check if this engine is equal to `other`.
   * @param other A CFML engine.
   * @returns
   */
  equals(other) {
    if (this.name === "unknown" /* Unknown */ || other.name === "unknown" /* Unknown */) {
      return false;
    }
    if (this.name === other.name) {
      if (!this.version && !other.version) {
        return true;
      } else if (!this.version || !other.version) {
        return false;
      } else {
        return (0, import_semver.eq)(this.version, other.version);
      }
    }
    return false;
  }
  /**
   * Check if this engine is older than `other`. Returns undefined if they have different name.
   * @param other A CFML engine.
   * @returns
   */
  isOlder(other) {
    if (this.name === "unknown" /* Unknown */ || other.name === "unknown" /* Unknown */ || this.name !== other.name || !this.version || !other.version) {
      return void 0;
    }
    return (0, import_semver.lt)(this.version, other.version);
  }
  /**
   * Check if this engine is older than or equals `other`. Returns undefined if they have different name.
   * @param other A CFML engine.
   * @returns
   */
  isOlderOrEquals(other) {
    if (this.name === "unknown" /* Unknown */ || other.name === "unknown" /* Unknown */ || this.name !== other.name || !this.version || !other.version) {
      return void 0;
    }
    return (0, import_semver.lte)(this.version, other.version);
  }
  /**
   * Check if this engine is newer than `other`. Returns undefined if they have different name.
   * @param other A CFML engine.
   * @returns
   */
  isNewer(other) {
    if (this.name === "unknown" /* Unknown */ || other.name === "unknown" /* Unknown */ || this.name !== other.name || !this.version || !other.version) {
      return void 0;
    }
    return (0, import_semver.gt)(this.version, other.version);
  }
  /**
   * Check if this engine is newer than or equals `other`. Returns undefined if they have different name.
   * @param other A CFML engine.
   * @returns
   */
  isNewerOrEquals(other) {
    if (this.name === "unknown" /* Unknown */ || other.name === "unknown" /* Unknown */ || this.name !== other.name || !this.version || !other.version) {
      return void 0;
    }
    return (0, import_semver.gte)(this.version, other.version);
  }
  /**
   * Returns whether this engine supports tags in script format
   * @returns
   */
  supportsScriptTags() {
    return this.name === "unknown" /* Unknown */ || this.name === "coldfusion" /* ColdFusion */ && (0, import_semver.gte)(this.version, "11.0.0") || this.name === "lucee" /* Lucee */ || this.name === "railo" /* Railo */ && (0, import_semver.gte)(this.version, "4.2.0");
  }
  /**
   * Returns whether this engine supports named parameters for global functions
   * @returns
   */
  supportsGlobalFunctionNamedParams() {
    return this.name === "unknown" /* Unknown */ || this.name === "coldfusion" /* ColdFusion */ && (0, import_semver.gte)(this.version, "2018.0.0") || this.name === "lucee" /* Lucee */ || this.name === "railo" /* Railo */ && (0, import_semver.gte)(this.version, "3.3.0");
  }
  /**
   * Attempts to transform versionStr into a valid semver version
   * @param versionStr A version string.
   * @returns
   */
  static toSemVer(versionStr) {
    if (versionStr !== "" && (0, import_semver.clean)(versionStr, true)) {
      return (0, import_semver.clean)(versionStr, true);
    } else if (DataType.isNumeric(versionStr)) {
      const splitVer = versionStr.split(".");
      while (splitVer.length < 3) {
        splitVer.push("0");
      }
      const reconstructedVer = splitVer.join(".");
      if ((0, import_semver.valid)(reconstructedVer, true)) {
        return (0, import_semver.valid)(reconstructedVer, true);
      }
    }
    return void 0;
  }
  /**
   * Gets the CFML engine icon URI
   * @param name CFMLEngineName
   * @returns
   */
  static getIconUri(name) {
    return import_vscode2.Uri.joinPath(extensionContext.extensionUri, `images/${name}.png`);
  }
};

// src/utils/documentUtil.ts
function getDocumentStateContext(document2, fast = false, replaceComments = false, _token, exclDocumentRanges = false) {
  const cfmlEngineSettings = import_vscode3.workspace.getConfiguration("cfml.engine");
  const userEngineName = CFMLEngineName.valueOf(cfmlEngineSettings.get("name"));
  const userEngine = new CFMLEngine(userEngineName, cfmlEngineSettings.get("version"));
  const docIsCfcFile = isCfcFile(document2, _token);
  const docIsCfmFile = isCfmFile(document2, _token);
  const docIsCfsFile = isCfsFile(document2, _token);
  const thisComponent = getComponent(document2.uri, _token);
  const docIsScript = docIsCfcFile && isScriptComponent(document2, _token) || docIsCfsFile;
  const documentRanges = getDocumentContextRanges(document2, docIsScript, void 0, fast, _token, exclDocumentRanges);
  const commentRanges = documentRanges.commentRanges;
  const stringRanges = documentRanges.stringRanges;
  const stringEmbeddedCfmlRanges = documentRanges.stringEmbeddedCfmlRanges;
  const sanitizedDocumentText = getSanitizedDocumentText(document2, commentRanges, replaceComments, _token);
  return {
    document: document2,
    isCfmFile: docIsCfmFile,
    isCfcFile: docIsCfcFile,
    docIsScript,
    commentRanges,
    stringRanges,
    stringEmbeddedCfmlRanges,
    sanitizedDocumentText,
    component: thisComponent,
    userEngine
  };
}
function getDocumentPositionStateContext(document2, position, fast = false, replaceComments = false, _token, exclDocumentRanges = false) {
  const documentStateContext = getDocumentStateContext(document2, fast, replaceComments, _token, exclDocumentRanges);
  const docIsScript = documentStateContext.docIsScript;
  const positionInComment = isInRanges(documentStateContext.commentRanges, position, false, _token);
  const cfscriptRanges = getCfScriptRanges(document2, null, _token);
  const positionIsScript = docIsScript || isInRanges(cfscriptRanges, position, false, _token);
  let wordRange = document2.getWordRangeAtPosition(position);
  const currentWord = wordRange ? document2.getText(wordRange) : "";
  if (!wordRange) {
    wordRange = new import_vscode3.Range(position, position);
  }
  const docPrefix = documentStateContext.sanitizedDocumentText.slice(0, document2.offsetAt(wordRange.start));
  const documentPositionStateContext = Object.assign(
    documentStateContext,
    {
      position,
      positionIsScript,
      positionInComment,
      docPrefix,
      wordRange,
      currentWord,
      isContinuingExpression: isContinuingExpression(docPrefix, _token),
      isMemberExpression: isMemberExpression(docPrefix)
    }
  );
  return documentPositionStateContext;
}

// src/entities/attribute.ts
init_process();
init_buffer();
var import_vscode4 = require("vscode");

// src/utils/collections.ts
init_process();
init_buffer();
var MyMap = class _MyMap extends Map {
  /**
   * Creates a new `MyMap` with all elements that pass the test implemented by the provided function.
   * @param callbackfn A predicate to test each key-value pair of the map
   * @returns
   */
  filter(callbackfn) {
    const myMap = new _MyMap();
    this.forEach((value, key) => {
      if (callbackfn(value, key, this)) {
        myMap.set(key, value);
      }
    });
    return myMap;
  }
};
var MySet = class _MySet extends Set {
  /**
   * Creates a new `MySet` with all elements that pass the test implemented by the provided function.
   * @param callbackfn A predicate to test each element of the set
   * @returns
   */
  filter(callbackfn) {
    const mySet = new _MySet();
    this.forEach((value, value2) => {
      if (callbackfn(value, value2, this)) {
        mySet.add(value);
      }
    });
    return mySet;
  }
};
function stringArrayIncludesIgnoreCase(arr, str) {
  return arr.some((val) => {
    return equalsIgnoreCase(val, str);
  });
}

// src/entities/attribute.ts
var ATTRIBUTES_PATTERN = /\b([\w:-]+)\b(?:(\s*(?:=|:)\s*)(?:(['"])(.*?)\3|([\w$:.]+)))?/gi;
var VALUE_PATTERN = /\b([\w:-]+)\s*(?:=|:)\s*(?:(['"])?((?:(?!\2).)*)|([\S]*))$/;
var Attributes = class extends MyMap {
};
function parseAttributes(document2, attributeRange, validAttributeNames) {
  const attributeStr = document2.getText(attributeRange);
  const attributes = new Attributes();
  let attributeMatch = null;
  while (attributeMatch = ATTRIBUTES_PATTERN.exec(attributeStr)) {
    const attributeName = attributeMatch[1];
    if (validAttributeNames && !validAttributeNames.has(attributeName.toLowerCase())) {
      continue;
    }
    const separator = attributeMatch[2];
    const quotedValue = attributeMatch[4];
    const unquotedValue = attributeMatch[5];
    const attributeValue = quotedValue !== void 0 ? quotedValue : unquotedValue;
    let attributeValueOffset;
    let attributeValueRange;
    if (attributeValue) {
      attributeValueOffset = document2.offsetAt(attributeRange.start) + attributeMatch.index + attributeName.length + separator.length + (quotedValue !== void 0 ? 1 : 0);
      attributeValueRange = new import_vscode4.Range(
        document2.positionAt(attributeValueOffset),
        document2.positionAt(attributeValueOffset + attributeValue.length)
      );
    }
    attributes.set(attributeName.toLowerCase(), {
      name: attributeName,
      value: attributeValue,
      valueRange: attributeValueRange
    });
  }
  return attributes;
}

// src/entities/html/htmlTag.ts
init_process();
init_buffer();

// src/entities/html/languageFacts.ts
init_process();
init_buffer();

// src/entities/html/dataProvider.ts
init_process();
init_buffer();
var HTMLDataProvider = class {
  /**
   * Currently, unversioned data uses the V1 implementation
   * In the future when the provider handles multiple versions of HTML custom data,
   * use the latest implementation for unversioned data
   * @param id
   * @param customData
   */
  constructor(id, customData) {
    this.id = id;
    this._tagMap = {};
    this._attributeMap = {};
    this._valueSetMap = {};
    this._tags = customData.tags || [];
    this._globalAttributes = customData.globalAttributes || [];
    this._tags.forEach((t) => {
      this._tagMap[t.name] = t;
      t.attributes.forEach((a) => {
        this._attributeMap[a.name] = a;
      });
    });
    this._globalAttributes.forEach((a) => {
      this._attributeMap[a.name] = a;
    });
    if (customData.valueSets) {
      customData.valueSets.forEach((vs) => {
        this._valueSetMap[vs.name] = vs.values;
      });
    }
  }
  isApplicable() {
    return true;
  }
  getId() {
    return this.id;
  }
  provideTags() {
    return this._tags;
  }
  provideAttributes(tag) {
    const attributes = [];
    const processAttribute = (a) => {
      attributes.push({
        name: a.name,
        description: a.description,
        valueSet: a.valueSet
      });
    };
    if (this._tagMap[tag]) {
      this._tagMap[tag].attributes.forEach((a) => {
        processAttribute(a);
      });
    }
    this._globalAttributes.forEach((ga) => {
      processAttribute(ga);
    });
    return attributes;
  }
  provideValues(tag, attribute) {
    const values2 = [];
    const processAttributes2 = (attributes) => {
      attributes.forEach((a) => {
        if (a.name === attribute) {
          if (a.values) {
            a.values.forEach((v) => {
              values2.push(v);
            });
          }
          if (a.valueSet) {
            if (this._valueSetMap[a.valueSet]) {
              this._valueSetMap[a.valueSet].forEach((v) => {
                values2.push(v);
              });
            }
          }
        }
      });
    };
    if (!this._tagMap[tag]) {
      return [];
    }
    processAttributes2(this._tagMap[tag].attributes);
    processAttributes2(this._globalAttributes);
    return values2;
  }
};

// src/entities/html/data/html5.ts
init_process();
init_buffer();
var HTML5_TAGS = [
  {
    name: "html",
    description: "The html element represents the root of an HTML document.",
    attributes: [
      {
        name: "manifest"
      }
    ]
  },
  {
    name: "head",
    description: "The head element represents a collection of metadata for the Document.",
    attributes: []
  },
  {
    name: "title",
    description: "The title element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.",
    attributes: []
  },
  {
    name: "base",
    description: "The base element allows authors to specify the document base URL for the purposes of resolving relative URLs, and the name of the default browsing context for the purposes of following hyperlinks. The element does not represent any content beyond this information.",
    attributes: [
      {
        name: "href"
      },
      {
        name: "target"
      }
    ]
  },
  {
    name: "link",
    description: "The link element allows authors to link their document to other resources.",
    attributes: [
      {
        name: "href"
      },
      {
        name: "crossorigin",
        valueSet: "xo"
      },
      {
        name: "rel"
      },
      {
        name: "media"
      },
      {
        name: "hreflang"
      },
      {
        name: "type"
      },
      {
        name: "sizes"
      }
    ]
  },
  {
    name: "meta",
    description: "The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements.",
    attributes: [
      {
        name: "name"
      },
      {
        name: "http-equiv"
      },
      {
        name: "content"
      },
      {
        name: "charset"
      }
    ]
  },
  {
    name: "style",
    description: "The style element allows authors to embed style information in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user.",
    attributes: [
      {
        name: "media"
      },
      {
        name: "nonce"
      },
      {
        name: "type"
      },
      {
        name: "scoped",
        valueSet: "v"
      }
    ]
  },
  {
    name: "body",
    description: "The body element represents the content of the document.",
    attributes: [
      {
        name: "onafterprint"
      },
      {
        name: "onbeforeprint"
      },
      {
        name: "onbeforeunload"
      },
      {
        name: "onhashchange"
      },
      {
        name: "onlanguagechange"
      },
      {
        name: "onmessage"
      },
      {
        name: "onoffline"
      },
      {
        name: "ononline"
      },
      {
        name: "onpagehide"
      },
      {
        name: "onpageshow"
      },
      {
        name: "onpopstate"
      },
      {
        name: "onstorage"
      },
      {
        name: "onunload"
      }
    ]
  },
  {
    name: "article",
    description: "The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. Each article should be identified, typically by including a heading (h1\u2013h6 element) as a child of the article element.",
    attributes: []
  },
  {
    name: "section",
    description: "The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content. Each section should be identified, typically by including a heading ( h1- h6 element) as a child of the section element.",
    attributes: []
  },
  {
    name: "nav",
    description: "The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.",
    attributes: []
  },
  {
    name: "aside",
    description: "The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.",
    attributes: []
  },
  {
    name: "h1",
    description: "The h1 element represents a section heading.",
    attributes: []
  },
  {
    name: "h2",
    description: "The h2 element represents a section heading.",
    attributes: []
  },
  {
    name: "h3",
    description: "The h3 element represents a section heading.",
    attributes: []
  },
  {
    name: "h4",
    description: "The h4 element represents a section heading.",
    attributes: []
  },
  {
    name: "h5",
    description: "The h5 element represents a section heading.",
    attributes: []
  },
  {
    name: "h6",
    description: "The h6 element represents a section heading.",
    attributes: []
  },
  {
    name: "header",
    description: "The header element represents introductory content for its nearest ancestor sectioning content or sectioning root element. A header typically contains a group of introductory or navigational aids. When the nearest ancestor sectioning content or sectioning root element is the body element, then it applies to the whole page.",
    attributes: []
  },
  {
    name: "footer",
    description: "The footer element represents a footer for its nearest ancestor sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.",
    attributes: []
  },
  {
    name: "address",
    description: "The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole.",
    attributes: []
  },
  {
    name: "p",
    description: "The p element represents a paragraph.",
    attributes: []
  },
  {
    name: "hr",
    description: "The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book.",
    attributes: []
  },
  {
    name: "pre",
    description: "The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.",
    attributes: []
  },
  {
    name: "blockquote",
    description: "The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.",
    attributes: [
      {
        name: "cite"
      }
    ]
  },
  {
    name: "ol",
    description: "The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document.",
    attributes: [
      {
        name: "reversed",
        valueSet: "v"
      },
      {
        name: "start"
      },
      {
        name: "type",
        valueSet: "lt"
      }
    ]
  },
  {
    name: "ul",
    description: "The ul element represents a list of items, where the order of the items is not important \u2014 that is, where changing the order would not materially change the meaning of the document.",
    attributes: []
  },
  {
    name: "li",
    description: "The li element represents a list item. If its parent element is an ol, ul, or menu element, then the element is an item of the parent element's list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other li element.",
    attributes: [
      {
        name: "value"
      }
    ]
  },
  {
    name: "dl",
    description: "The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements) followed by one or more values (dd elements), ignoring any nodes other than dt and dd elements. Within a single dl element, there should not be more than one dt element for each name.",
    attributes: []
  },
  {
    name: "dt",
    description: "The dt element represents the term, or name, part of a term-description group in a description list (dl element).",
    attributes: []
  },
  {
    name: "dd",
    description: "The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element).",
    attributes: []
  },
  {
    name: "figure",
    description: "The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document.",
    attributes: []
  },
  {
    name: "figcaption",
    description: "The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any.",
    attributes: []
  },
  {
    name: "main",
    description: "The main element represents the main content of the body of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application.",
    attributes: []
  },
  {
    name: "div",
    description: "The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements.",
    attributes: []
  },
  {
    name: "a",
    description: "If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.",
    attributes: [
      {
        name: "href"
      },
      {
        name: "target"
      },
      {
        name: "download"
      },
      {
        name: "ping"
      },
      {
        name: "rel"
      },
      {
        name: "hreflang"
      },
      {
        name: "type"
      }
    ]
  },
  {
    name: "em",
    description: "The em element represents stress emphasis of its contents.",
    attributes: []
  },
  {
    name: "strong",
    description: "The strong element represents strong importance, seriousness, or urgency for its contents.",
    attributes: []
  },
  {
    name: "small",
    description: "The small element represents side comments such as small print.",
    attributes: []
  },
  {
    name: "s",
    description: "The s element represents contents that are no longer accurate or no longer relevant.",
    attributes: []
  },
  {
    name: "cite",
    description: "The cite element represents a reference to a creative work. It must include the title of the work or the name of the author(person, people or organization) or an URL reference, or a reference in abbreviated form as per the conventions used for the addition of citation metadata.",
    attributes: []
  },
  {
    name: "q",
    description: "The q element represents some phrasing content quoted from another source.",
    attributes: [
      {
        name: "cite"
      }
    ]
  },
  {
    name: "dfn",
    description: "The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element.",
    attributes: []
  },
  {
    name: "abbr",
    description: "The abbr element represents an abbreviation or acronym, optionally with its expansion. The title attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else.",
    attributes: []
  },
  {
    name: "ruby",
    description: "The ruby element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana. Ruby text can appear on either side, and sometimes both sides, of the base text, and it is possible to control its position using CSS. A more complete introduction to ruby can be found in the Use Cases & Exploratory Approaches for Ruby Markup document as well as in CSS Ruby Module Level 1. [RUBY-UC] [CSSRUBY]",
    attributes: []
  },
  {
    name: "rb",
    description: "The rb element marks the base text component of a ruby annotation. When it is the child of a ruby element, it doesn't represent anything itself, but its parent ruby element uses it as part of determining what it represents.",
    attributes: []
  },
  {
    name: "rt",
    description: "The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element or of an rtc element that is itself the child of a ruby element, it doesn't represent anything itself, but its ancestor ruby element uses it as part of determining what it represents.",
    attributes: []
  },
  {
    name: "rp",
    description: "The rp element is used to provide fallback text to be shown by user agents that don't support ruby annotations. One widespread convention is to provide parentheses around the ruby text component of a ruby annotation.",
    attributes: []
  },
  {
    name: "time",
    description: "The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.",
    attributes: [
      {
        name: "datetime"
      }
    ]
  },
  {
    name: "code",
    description: "The code element represents a fragment of computer code. This could be an XML element name, a file name, a computer program, or any other string that a computer would recognize.",
    attributes: []
  },
  {
    name: "var",
    description: "The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.",
    attributes: []
  },
  {
    name: "samp",
    description: "The samp element represents sample or quoted output from another program or computing system.",
    attributes: []
  },
  {
    name: "kbd",
    description: "The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).",
    attributes: []
  },
  {
    name: "sub",
    description: "The sub element represents a subscript.",
    attributes: []
  },
  {
    name: "sup",
    description: "The sup element represents a superscript.",
    attributes: []
  },
  {
    name: "i",
    description: "The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.",
    attributes: []
  },
  {
    name: "b",
    description: "The b element represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede.",
    attributes: []
  },
  {
    name: "u",
    description: "The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.",
    attributes: []
  },
  {
    name: "mark",
    description: "The mark element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader's attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user's current activity.",
    attributes: []
  },
  {
    name: "bdi",
    description: "The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]",
    attributes: []
  },
  {
    name: "dbo",
    description: "The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]",
    attributes: []
  },
  {
    name: "span",
    description: "The span element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.",
    attributes: []
  },
  {
    name: "br",
    description: "The br element represents a line break.",
    attributes: []
  },
  {
    name: "wbr",
    description: "The wbr element represents a line break opportunity.",
    attributes: []
  },
  {
    name: "ins",
    description: "The ins element represents an addition to the document.",
    attributes: []
  },
  {
    name: "del",
    description: "The del element represents a removal from the document.",
    attributes: [
      {
        name: "cite"
      },
      {
        name: "datetime"
      }
    ]
  },
  {
    name: "picture",
    description: "The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children.",
    attributes: []
  },
  {
    name: "img",
    description: "An img element represents an image.",
    attributes: [
      {
        name: "alt"
      },
      {
        name: "src"
      },
      {
        name: "srcset"
      },
      {
        name: "crossorigin",
        valueSet: "xo"
      },
      {
        name: "usemap"
      },
      {
        name: "ismap",
        valueSet: "v"
      },
      {
        name: "width"
      },
      {
        name: "height"
      }
    ]
  },
  {
    name: "iframe",
    description: "The iframe element represents a nested browsing context.",
    attributes: [
      {
        name: "src"
      },
      {
        name: "srcdoc"
      },
      {
        name: "name"
      },
      {
        name: "sandbox",
        valueSet: "sb"
      },
      {
        name: "seamless",
        valueSet: "v"
      },
      {
        name: "allowfullscreen",
        valueSet: "v"
      },
      {
        name: "width"
      },
      {
        name: "height"
      }
    ]
  },
  {
    name: "embed",
    description: "The embed element provides an integration point for an external (typically non-HTML) application or interactive content.",
    attributes: [
      {
        name: "src"
      },
      {
        name: "type"
      },
      {
        name: "width"
      },
      {
        name: "height"
      }
    ]
  },
  {
    name: "object",
    description: "The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image, as a nested browsing context, or as an external resource to be processed by a plugin.",
    attributes: [
      {
        name: "data"
      },
      {
        name: "type"
      },
      {
        name: "typemustmatch",
        valueSet: "v"
      },
      {
        name: "name"
      },
      {
        name: "usemap"
      },
      {
        name: "form"
      },
      {
        name: "width"
      },
      {
        name: "height"
      }
    ]
  },
  {
    name: "param",
    description: "The param element defines parameters for plugins invoked by object elements. It does not represent anything on its own.",
    attributes: [
      {
        name: "name"
      },
      {
        name: "value"
      }
    ]
  },
  {
    name: "video",
    description: "A video element is used for playing videos or movies, and audio files with captions.",
    attributes: [
      {
        name: "src"
      },
      {
        name: "crossorigin",
        valueSet: "xo"
      },
      {
        name: "poster"
      },
      {
        name: "preload",
        valueSet: "pl"
      },
      {
        name: "autoplay",
        valueSet: "v"
      },
      {
        name: "mediagroup"
      },
      {
        name: "loop",
        valueSet: "v"
      },
      {
        name: "muted",
        valueSet: "v"
      },
      {
        name: "controls",
        valueSet: "v"
      },
      {
        name: "width"
      },
      {
        name: "height"
      }
    ]
  },
  {
    name: "audio",
    description: "An audio element represents a sound or audio stream.",
    attributes: [
      {
        name: "src"
      },
      {
        name: "crossorigin",
        valueSet: "xo"
      },
      {
        name: "preload",
        valueSet: "pl"
      },
      {
        name: "autoplay",
        valueSet: "v"
      },
      {
        name: "mediagroup"
      },
      {
        name: "loop",
        valueSet: "v"
      },
      {
        name: "muted",
        valueSet: "v"
      },
      {
        name: "controls",
        valueSet: "v"
      }
    ]
  },
  {
    name: "source",
    description: "The source element allows authors to specify multiple alternative media resources for media elements. It does not represent anything on its own.",
    attributes: [
      {
        name: "src"
      },
      {
        name: "type"
      }
    ]
  },
  {
    name: "track",
    description: "The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own.",
    attributes: [
      {
        name: "default",
        valueSet: "v"
      },
      {
        name: "kind",
        valueSet: "tk"
      },
      {
        name: "label"
      },
      {
        name: "src"
      },
      {
        name: "srclang"
      }
    ]
  },
  {
    name: "map",
    description: "The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children.",
    attributes: [
      {
        name: "name"
      }
    ]
  },
  {
    name: "area",
    description: "The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.",
    attributes: [
      {
        name: "alt"
      },
      {
        name: "coords"
      },
      {
        name: "shape",
        valueSet: "sh"
      },
      {
        name: "href"
      },
      {
        name: "target"
      },
      {
        name: "download"
      },
      {
        name: "ping"
      },
      {
        name: "rel"
      },
      {
        name: "hreflang"
      },
      {
        name: "type"
      }
    ]
  },
  {
    name: "table",
    description: "The table element represents data with more than one dimension, in the form of a table.",
    attributes: [
      {
        name: "sortable",
        valueSet: "v"
      },
      {
        name: "border"
      }
    ]
  },
  {
    name: "caption",
    description: "The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.",
    attributes: []
  },
  {
    name: "colgroup",
    description: "The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element.",
    attributes: [
      {
        name: "span"
      }
    ]
  },
  {
    name: "col",
    description: "If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup.",
    attributes: [
      {
        name: "span"
      }
    ]
  },
  {
    name: "tbody",
    description: "The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.",
    attributes: []
  },
  {
    name: "thead",
    description: "The thead element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table.",
    attributes: []
  },
  {
    name: "tfoot",
    description: "The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.",
    attributes: []
  },
  {
    name: "tr",
    description: "The tr element represents a row of cells in a table.",
    attributes: []
  },
  {
    name: "td",
    description: "The td element represents a data cell in a table.",
    attributes: [
      {
        name: "colspan"
      },
      {
        name: "rowspan"
      },
      {
        name: "headers"
      }
    ]
  },
  {
    name: "th",
    description: "The th element represents a header cell in a table.",
    attributes: [
      {
        name: "colspan"
      },
      {
        name: "rowspan"
      },
      {
        name: "headers"
      },
      {
        name: "scope",
        valueSet: "s"
      },
      {
        name: "sorted"
      },
      {
        name: "abbr"
      }
    ]
  },
  {
    name: "form",
    description: "The form element represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.",
    attributes: [
      {
        name: "accept-charset"
      },
      {
        name: "action"
      },
      {
        name: "autocomplete",
        valueSet: "o"
      },
      {
        name: "enctype",
        valueSet: "et"
      },
      {
        name: "method",
        valueSet: "m"
      },
      {
        name: "name"
      },
      {
        name: "novalidate",
        valueSet: "v"
      },
      {
        name: "target"
      }
    ]
  },
  {
    name: "label",
    description: "The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element's labeled control, either using the for attribute, or by putting the form control inside the label element itself.",
    attributes: [
      {
        name: "form"
      },
      {
        name: "for"
      }
    ]
  },
  {
    name: "input",
    description: "The input element represents a typed data field, usually with a form control to allow the user to edit the data.",
    attributes: [
      {
        name: "accept"
      },
      {
        name: "alt"
      },
      {
        name: "autocomplete",
        valueSet: "inputautocomplete"
      },
      {
        name: "autofocus",
        valueSet: "v"
      },
      {
        name: "checked",
        valueSet: "v"
      },
      {
        name: "dirname"
      },
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "form"
      },
      {
        name: "formaction"
      },
      {
        name: "formenctype",
        valueSet: "et"
      },
      {
        name: "formmethod",
        valueSet: "fm"
      },
      {
        name: "formnovalidate",
        valueSet: "v"
      },
      {
        name: "formtarget"
      },
      {
        name: "height"
      },
      {
        name: "inputmode",
        valueSet: "im"
      },
      {
        name: "list"
      },
      {
        name: "max"
      },
      {
        name: "maxlength"
      },
      {
        name: "min"
      },
      {
        name: "minlength"
      },
      {
        name: "multiple",
        valueSet: "v"
      },
      {
        name: "name"
      },
      {
        name: "pattern"
      },
      {
        name: "placeholder"
      },
      {
        name: "readonly",
        valueSet: "v"
      },
      {
        name: "required",
        valueSet: "v"
      },
      {
        name: "size"
      },
      {
        name: "src"
      },
      {
        name: "step"
      },
      {
        name: "type",
        valueSet: "t"
      },
      {
        name: "value"
      },
      {
        name: "width"
      }
    ]
  },
  {
    name: "button",
    description: "The button element represents a button labeled by its contents.",
    attributes: [
      {
        name: "autofocus",
        valueSet: "v"
      },
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "form"
      },
      {
        name: "formaction"
      },
      {
        name: "formenctype",
        valueSet: "et"
      },
      {
        name: "formmethod",
        valueSet: "fm"
      },
      {
        name: "formnovalidate",
        valueSet: "v"
      },
      {
        name: "formtarget"
      },
      {
        name: "name"
      },
      {
        name: "type",
        valueSet: "bt"
      },
      {
        name: "value"
      }
    ]
  },
  {
    name: "select",
    description: "The select element represents a control for selecting amongst a set of options.",
    attributes: [
      {
        name: "autocomplete",
        valueSet: "inputautocomplete"
      },
      {
        name: "autofocus",
        valueSet: "v"
      },
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "form"
      },
      {
        name: "multiple",
        valueSet: "v"
      },
      {
        name: "name"
      },
      {
        name: "required",
        valueSet: "v"
      },
      {
        name: "size"
      }
    ]
  },
  {
    name: "datalist",
    description: "The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden.",
    attributes: []
  },
  {
    name: "optgroup",
    description: "The optgroup element represents a group of option elements with a common label.",
    attributes: [
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "label"
      }
    ]
  },
  {
    name: "option",
    description: "The option element represents an option in a select element or as part of a list of suggestions in a datalist element.",
    attributes: [
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "label"
      },
      {
        name: "selected",
        valueSet: "v"
      },
      {
        name: "value"
      }
    ]
  },
  {
    name: "textarea",
    description: "The textarea element represents a multiline plain text edit control for the element's raw value. The contents of the control represent the control's default value.",
    attributes: [
      {
        name: "autocomplete",
        valueSet: "inputautocomplete"
      },
      {
        name: "autofocus",
        valueSet: "v"
      },
      {
        name: "cols"
      },
      {
        name: "dirname"
      },
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "form"
      },
      {
        name: "inputmode",
        valueSet: "im"
      },
      {
        name: "maxlength"
      },
      {
        name: "minlength"
      },
      {
        name: "name"
      },
      {
        name: "placeholder"
      },
      {
        name: "readonly",
        valueSet: "v"
      },
      {
        name: "required",
        valueSet: "v"
      },
      {
        name: "rows"
      },
      {
        name: "wrap",
        valueSet: "w"
      }
    ]
  },
  {
    name: "output",
    description: "The output element represents the result of a calculation performed by the application, or the result of a user action.",
    attributes: [
      {
        name: "for"
      },
      {
        name: "form"
      },
      {
        name: "name"
      }
    ]
  },
  {
    name: "progress",
    description: "The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.",
    attributes: [
      {
        name: "value"
      },
      {
        name: "max"
      }
    ]
  },
  {
    name: "meter",
    description: "The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate.",
    attributes: [
      {
        name: "value"
      },
      {
        name: "min"
      },
      {
        name: "max"
      },
      {
        name: "low"
      },
      {
        name: "high"
      },
      {
        name: "optimum"
      }
    ]
  },
  {
    name: "fieldset",
    description: "The fieldset element represents a set of form controls optionally grouped under a common name.",
    attributes: [
      {
        name: "disabled",
        valueSet: "v"
      },
      {
        name: "form"
      },
      {
        name: "name"
      }
    ]
  },
  {
    name: "legend",
    description: "The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any.",
    attributes: []
  },
  {
    name: "details",
    description: "The details element represents a disclosure widget from which the user can obtain additional information or controls.",
    attributes: [
      {
        name: "open",
        valueSet: "v"
      }
    ]
  },
  {
    name: "summary",
    description: "The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.",
    attributes: []
  },
  {
    name: "dialog",
    description: "The dialog element represents a part of an application that a user interacts with to perform a task, for example a dialog box, inspector, or window.",
    attributes: []
  },
  {
    name: "script",
    description: "The script element allows authors to include dynamic script and data blocks in their documents. The element does not represent content for the user.",
    attributes: [
      {
        name: "src"
      },
      {
        name: "type"
      },
      {
        name: "charset"
      },
      {
        name: "async",
        valueSet: "v"
      },
      {
        name: "defer",
        valueSet: "v"
      },
      {
        name: "crossorigin",
        valueSet: "xo"
      },
      {
        name: "nonce"
      }
    ]
  },
  {
    name: "noscript",
    description: "The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don't support scripting, by affecting how the document is parsed.",
    attributes: []
  },
  {
    name: "template",
    description: "The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script.",
    attributes: []
  },
  {
    name: "canvas",
    description: "The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.",
    attributes: [
      {
        name: "width"
      },
      {
        name: "height"
      }
    ]
  }
];
var HTML5_GLOBAL_ATTRIBUTES = [
  {
    name: "aria-activedescendant"
  },
  {
    name: "aria-atomic",
    valueSet: "b"
  },
  {
    name: "aria-autocomplete",
    valueSet: "autocomplete"
  },
  {
    name: "aria-busy",
    valueSet: "b"
  },
  {
    name: "aria-checked",
    valueSet: "tristate"
  },
  {
    name: "aria-colcount"
  },
  {
    name: "aria-colindex"
  },
  {
    name: "aria-colspan"
  },
  {
    name: "aria-controls"
  },
  {
    name: "aria-current",
    valueSet: "current"
  },
  {
    name: "aria-describedat"
  },
  {
    name: "aria-describedby"
  },
  {
    name: "aria-disabled",
    valueSet: "b"
  },
  {
    name: "aria-dropeffect",
    valueSet: "dropeffect"
  },
  {
    name: "aria-errormessage"
  },
  {
    name: "aria-expanded",
    valueSet: "u"
  },
  {
    name: "aria-flowto"
  },
  {
    name: "aria-grabbed",
    valueSet: "u"
  },
  {
    name: "aria-haspopup",
    valueSet: "b"
  },
  {
    name: "aria-hidden",
    valueSet: "b"
  },
  {
    name: "aria-invalid",
    valueSet: "invalid"
  },
  {
    name: "aria-kbdshortcuts"
  },
  {
    name: "aria-label"
  },
  {
    name: "aria-labelledby"
  },
  {
    name: "aria-level"
  },
  {
    name: "aria-live",
    valueSet: "live"
  },
  {
    name: "aria-modal",
    valueSet: "b"
  },
  {
    name: "aria-multiline",
    valueSet: "b"
  },
  {
    name: "aria-multiselectable",
    valueSet: "b"
  },
  {
    name: "aria-orientation",
    valueSet: "orientation"
  },
  {
    name: "aria-owns"
  },
  {
    name: "aria-placeholder"
  },
  {
    name: "aria-posinset"
  },
  {
    name: "aria-pressed",
    valueSet: "tristate"
  },
  {
    name: "aria-readonly",
    valueSet: "b"
  },
  {
    name: "aria-relevant",
    valueSet: "relevant"
  },
  {
    name: "aria-required",
    valueSet: "b"
  },
  {
    name: "aria-roledescription"
  },
  {
    name: "aria-rowcount"
  },
  {
    name: "aria-rowindex"
  },
  {
    name: "aria-rowspan"
  },
  {
    name: "aria-selected",
    valueSet: "u"
  },
  {
    name: "aria-setsize"
  },
  {
    name: "aria-sort",
    valueSet: "sort"
  },
  {
    name: "aria-valuemax"
  },
  {
    name: "aria-valuemin"
  },
  {
    name: "aria-valuenow"
  },
  {
    name: "aria-valuetext"
  },
  {
    name: "accesskey"
  },
  {
    name: "class"
  },
  {
    name: "contenteditable",
    valueSet: "b"
  },
  {
    name: "contextmenu"
  },
  {
    name: "dir",
    valueSet: "d"
  },
  {
    name: "draggable",
    valueSet: "b"
  },
  {
    name: "dropzone"
  },
  {
    name: "hidden",
    valueSet: "v"
  },
  {
    name: "id"
  },
  {
    name: "itemid"
  },
  {
    name: "itemprop"
  },
  {
    name: "itemref"
  },
  {
    name: "itemscope",
    valueSet: "v"
  },
  {
    name: "itemtype"
  },
  {
    name: "lang"
  },
  {
    name: "role",
    valueSet: "roles"
  },
  {
    name: "spellcheck",
    valueSet: "b"
  },
  {
    name: "style"
  },
  {
    name: "tabindex"
  },
  {
    name: "title"
  },
  {
    name: "translate",
    valueSet: "y"
  }
];
var HTML5_EVENTS = [
  { name: "onabort" },
  { name: "onblur" },
  { name: "oncanplay" },
  { name: "oncanplaythrough" },
  { name: "onchange" },
  { name: "onclick" },
  { name: "oncontextmenu" },
  { name: "ondblclick" },
  { name: "ondrag" },
  { name: "ondragend" },
  { name: "ondragenter" },
  { name: "ondragleave" },
  { name: "ondragover" },
  { name: "ondragstart" },
  { name: "ondrop" },
  { name: "ondurationchange" },
  { name: "onemptied" },
  { name: "onended" },
  { name: "onerror" },
  { name: "onfocus" },
  { name: "onformchange" },
  { name: "onforminput" },
  { name: "oninput" },
  { name: "oninvalid" },
  { name: "onkeydown" },
  { name: "onkeypress" },
  { name: "onkeyup" },
  { name: "onload" },
  { name: "onloadeddata" },
  { name: "onloadedmetadata" },
  { name: "onloadstart" },
  { name: "onmousedown" },
  { name: "onmousemove" },
  { name: "onmouseout" },
  { name: "onmouseover" },
  { name: "onmouseup" },
  { name: "onmousewheel" },
  { name: "onpause" },
  { name: "onplay" },
  { name: "onplaying" },
  { name: "onprogress" },
  { name: "onratechange" },
  { name: "onreset" },
  { name: "onresize" },
  { name: "onreadystatechange" },
  { name: "onscroll" },
  { name: "onseeked" },
  { name: "onseeking" },
  { name: "onselect" },
  { name: "onshow" },
  { name: "onstalled" },
  { name: "onsubmit" },
  { name: "onsuspend" },
  { name: "ontimeupdate" },
  { name: "onvolumechange" },
  { name: "onwaiting" }
];
var HTML5_VALUE_MAP = [
  {
    name: "b",
    values: [
      {
        name: "true"
      },
      {
        name: "false"
      }
    ]
  },
  {
    name: "u",
    values: [
      {
        name: "true"
      },
      {
        name: "false"
      },
      {
        name: "undefined"
      }
    ]
  },
  {
    name: "o",
    values: [
      {
        name: "on"
      },
      {
        name: "off"
      }
    ]
  },
  {
    name: "y",
    values: [
      {
        name: "yes"
      },
      {
        name: "no"
      }
    ]
  },
  {
    name: "w",
    values: [
      {
        name: "soft"
      },
      {
        name: "hard"
      }
    ]
  },
  {
    name: "d",
    values: [
      {
        name: "ltr"
      },
      {
        name: "rtl"
      },
      {
        name: "auto"
      }
    ]
  },
  {
    name: "m",
    values: [
      {
        name: "GET"
      },
      {
        name: "POST"
      },
      {
        name: "dialog"
      }
    ]
  },
  {
    name: "fm",
    values: [
      {
        name: "GET"
      },
      {
        name: "POST"
      }
    ]
  },
  {
    name: "s",
    values: [
      {
        name: "row"
      },
      {
        name: "col"
      },
      {
        name: "rowgroup"
      },
      {
        name: "colgroup"
      }
    ]
  },
  {
    name: "t",
    values: [
      {
        name: "hidden"
      },
      {
        name: "text"
      },
      {
        name: "search"
      },
      {
        name: "tel"
      },
      {
        name: "url"
      },
      {
        name: "email"
      },
      {
        name: "password"
      },
      {
        name: "datetime"
      },
      {
        name: "date"
      },
      {
        name: "month"
      },
      {
        name: "week"
      },
      {
        name: "time"
      },
      {
        name: "datetime-local"
      },
      {
        name: "number"
      },
      {
        name: "range"
      },
      {
        name: "color"
      },
      {
        name: "checkbox"
      },
      {
        name: "radio"
      },
      {
        name: "file"
      },
      {
        name: "submit"
      },
      {
        name: "image"
      },
      {
        name: "reset"
      },
      {
        name: "button"
      }
    ]
  },
  {
    name: "im",
    values: [
      {
        name: "verbatim"
      },
      {
        name: "latin"
      },
      {
        name: "latin-name"
      },
      {
        name: "latin-prose"
      },
      {
        name: "full-width-latin"
      },
      {
        name: "kana"
      },
      {
        name: "kana-name"
      },
      {
        name: "katakana"
      },
      {
        name: "numeric"
      },
      {
        name: "tel"
      },
      {
        name: "email"
      },
      {
        name: "url"
      }
    ]
  },
  {
    name: "bt",
    values: [
      {
        name: "button"
      },
      {
        name: "submit"
      },
      {
        name: "reset"
      },
      {
        name: "menu"
      }
    ]
  },
  {
    name: "lt",
    values: [
      {
        name: "1"
      },
      {
        name: "a"
      },
      {
        name: "A"
      },
      {
        name: "i"
      },
      {
        name: "I"
      }
    ]
  },
  {
    name: "mt",
    values: [
      {
        name: "context"
      },
      {
        name: "toolbar"
      }
    ]
  },
  {
    name: "mit",
    values: [
      {
        name: "command"
      },
      {
        name: "checkbox"
      },
      {
        name: "radio"
      }
    ]
  },
  {
    name: "et",
    values: [
      {
        name: "application/x-www-form-urlencoded"
      },
      {
        name: "multipart/form-data"
      },
      {
        name: "text/plain"
      }
    ]
  },
  {
    name: "tk",
    values: [
      {
        name: "subtitles"
      },
      {
        name: "captions"
      },
      {
        name: "descriptions"
      },
      {
        name: "chapters"
      },
      {
        name: "metadata"
      }
    ]
  },
  {
    name: "pl",
    values: [
      {
        name: "none"
      },
      {
        name: "metadata"
      },
      {
        name: "auto"
      }
    ]
  },
  {
    name: "sh",
    values: [
      {
        name: "circle"
      },
      {
        name: "default"
      },
      {
        name: "poly"
      },
      {
        name: "rect"
      }
    ]
  },
  {
    name: "xo",
    values: [
      {
        name: "anonymous"
      },
      {
        name: "use-credentials"
      }
    ]
  },
  {
    name: "sb",
    values: [
      {
        name: "allow-forms"
      },
      {
        name: "allow-modals"
      },
      {
        name: "allow-pointer-lock"
      },
      {
        name: "allow-popups"
      },
      {
        name: "allow-popups-to-escape-sandbox"
      },
      {
        name: "allow-same-origin"
      },
      {
        name: "allow-scripts"
      },
      {
        name: "allow-top-navigation"
      }
    ]
  },
  {
    name: "tristate",
    values: [
      {
        name: "true"
      },
      {
        name: "false"
      },
      {
        name: "mixed"
      },
      {
        name: "undefined"
      }
    ]
  },
  {
    name: "inputautocomplete",
    values: [
      {
        name: "additional-name"
      },
      {
        name: "address-level1"
      },
      {
        name: "address-level2"
      },
      {
        name: "address-level3"
      },
      {
        name: "address-level4"
      },
      {
        name: "address-line1"
      },
      {
        name: "address-line2"
      },
      {
        name: "address-line3"
      },
      {
        name: "bday"
      },
      {
        name: "bday-year"
      },
      {
        name: "bday-day"
      },
      {
        name: "bday-month"
      },
      {
        name: "billing"
      },
      {
        name: "cc-additional-name"
      },
      {
        name: "cc-csc"
      },
      {
        name: "cc-exp"
      },
      {
        name: "cc-exp-month"
      },
      {
        name: "cc-exp-year"
      },
      {
        name: "cc-family-name"
      },
      {
        name: "cc-given-name"
      },
      {
        name: "cc-name"
      },
      {
        name: "cc-number"
      },
      {
        name: "cc-type"
      },
      {
        name: "country"
      },
      {
        name: "country-name"
      },
      {
        name: "current-password"
      },
      {
        name: "email"
      },
      {
        name: "family-name"
      },
      {
        name: "fax"
      },
      {
        name: "given-name"
      },
      {
        name: "home"
      },
      {
        name: "honorific-prefix"
      },
      {
        name: "honorific-suffix"
      },
      {
        name: "impp"
      },
      {
        name: "language"
      },
      {
        name: "mobile"
      },
      {
        name: "name"
      },
      {
        name: "new-password"
      },
      {
        name: "nickname"
      },
      {
        name: "organization"
      },
      {
        name: "organization-title"
      },
      {
        name: "pager"
      },
      {
        name: "photo"
      },
      {
        name: "postal-code"
      },
      {
        name: "sex"
      },
      {
        name: "shipping"
      },
      {
        name: "street-address"
      },
      {
        name: "tel-area-code"
      },
      {
        name: "tel"
      },
      {
        name: "tel-country-code"
      },
      {
        name: "tel-extension"
      },
      {
        name: "tel-local"
      },
      {
        name: "tel-local-prefix"
      },
      {
        name: "tel-local-suffix"
      },
      {
        name: "tel-national"
      },
      {
        name: "transaction-amount"
      },
      {
        name: "transaction-currency"
      },
      {
        name: "url"
      },
      {
        name: "username"
      },
      {
        name: "work"
      }
    ]
  },
  {
    name: "autocomplete",
    values: [
      {
        name: "inline"
      },
      {
        name: "list"
      },
      {
        name: "both"
      },
      {
        name: "none"
      }
    ]
  },
  {
    name: "current",
    values: [
      {
        name: "page"
      },
      {
        name: "step"
      },
      {
        name: "location"
      },
      {
        name: "date"
      },
      {
        name: "time"
      },
      {
        name: "true"
      },
      {
        name: "false"
      }
    ]
  },
  {
    name: "dropeffect",
    values: [
      {
        name: "copy"
      },
      {
        name: "move"
      },
      {
        name: "link"
      },
      {
        name: "execute"
      },
      {
        name: "popup"
      },
      {
        name: "none"
      }
    ]
  },
  {
    name: "invalid",
    values: [
      {
        name: "grammar"
      },
      {
        name: "false"
      },
      {
        name: "spelling"
      },
      {
        name: "true"
      }
    ]
  },
  {
    name: "live",
    values: [
      {
        name: "off"
      },
      {
        name: "polite"
      },
      {
        name: "assertive"
      }
    ]
  },
  {
    name: "orientation",
    values: [
      {
        name: "vertical"
      },
      {
        name: "horizontal"
      },
      {
        name: "undefined"
      }
    ]
  },
  {
    name: "relevant",
    values: [
      {
        name: "additions"
      },
      {
        name: "removals"
      },
      {
        name: "text"
      },
      {
        name: "all"
      },
      {
        name: "additions text"
      }
    ]
  },
  {
    name: "sort",
    values: [
      {
        name: "ascending"
      },
      {
        name: "descending"
      },
      {
        name: "none"
      },
      {
        name: "other"
      }
    ]
  },
  {
    name: "roles",
    values: [
      {
        name: "alert"
      },
      {
        name: "alertdialog"
      },
      {
        name: "button"
      },
      {
        name: "checkbox"
      },
      {
        name: "dialog"
      },
      {
        name: "gridcell"
      },
      {
        name: "link"
      },
      {
        name: "log"
      },
      {
        name: "marquee"
      },
      {
        name: "menuitem"
      },
      {
        name: "menuitemcheckbox"
      },
      {
        name: "menuitemradio"
      },
      {
        name: "option"
      },
      {
        name: "progressbar"
      },
      {
        name: "radio"
      },
      {
        name: "scrollbar"
      },
      {
        name: "searchbox"
      },
      {
        name: "slider"
      },
      {
        name: "spinbutton"
      },
      {
        name: "status"
      },
      {
        name: "switch"
      },
      {
        name: "tab"
      },
      {
        name: "tabpanel"
      },
      {
        name: "textbox"
      },
      {
        name: "timer"
      },
      {
        name: "tooltip"
      },
      {
        name: "treeitem"
      },
      {
        name: "combobox"
      },
      {
        name: "grid"
      },
      {
        name: "listbox"
      },
      {
        name: "menu"
      },
      {
        name: "menubar"
      },
      {
        name: "radiogroup"
      },
      {
        name: "tablist"
      },
      {
        name: "tree"
      },
      {
        name: "treegrid"
      },
      {
        name: "application"
      },
      {
        name: "article"
      },
      {
        name: "cell"
      },
      {
        name: "columnheader"
      },
      {
        name: "definition"
      },
      {
        name: "directory"
      },
      {
        name: "document"
      },
      {
        name: "feed"
      },
      {
        name: "figure"
      },
      {
        name: "group"
      },
      {
        name: "heading"
      },
      {
        name: "img"
      },
      {
        name: "list"
      },
      {
        name: "listitem"
      },
      {
        name: "math"
      },
      {
        name: "none"
      },
      {
        name: "note"
      },
      {
        name: "presentation"
      },
      {
        name: "region"
      },
      {
        name: "row"
      },
      {
        name: "rowgroup"
      },
      {
        name: "rowheader"
      },
      {
        name: "separator"
      },
      {
        name: "table"
      },
      {
        name: "term"
      },
      {
        name: "text"
      },
      {
        name: "toolbar"
      },
      {
        name: "banner"
      },
      {
        name: "complementary"
      },
      {
        name: "contentinfo"
      },
      {
        name: "form"
      },
      {
        name: "main"
      },
      {
        name: "navigation"
      },
      {
        name: "region"
      },
      {
        name: "search"
      },
      {
        name: "doc-abstract"
      },
      {
        name: "doc-acknowledgments"
      },
      {
        name: "doc-afterword"
      },
      {
        name: "doc-appendix"
      },
      {
        name: "doc-backlink"
      },
      {
        name: "doc-biblioentry"
      },
      {
        name: "doc-bibliography"
      },
      {
        name: "doc-biblioref"
      },
      {
        name: "doc-chapter"
      },
      {
        name: "doc-colophon"
      },
      {
        name: "doc-conclusion"
      },
      {
        name: "doc-cover"
      },
      {
        name: "doc-credit"
      },
      {
        name: "doc-credits"
      },
      {
        name: "doc-dedication"
      },
      {
        name: "doc-endnote"
      },
      {
        name: "doc-endnotes"
      },
      {
        name: "doc-epigraph"
      },
      {
        name: "doc-epilogue"
      },
      {
        name: "doc-errata"
      },
      {
        name: "doc-example"
      },
      {
        name: "doc-footnote"
      },
      {
        name: "doc-foreword"
      },
      {
        name: "doc-glossary"
      },
      {
        name: "doc-glossref"
      },
      {
        name: "doc-index"
      },
      {
        name: "doc-introduction"
      },
      {
        name: "doc-noteref"
      },
      {
        name: "doc-notice"
      },
      {
        name: "doc-pagebreak"
      },
      {
        name: "doc-pagelist"
      },
      {
        name: "doc-part"
      },
      {
        name: "doc-preface"
      },
      {
        name: "doc-prologue"
      },
      {
        name: "doc-pullquote"
      },
      {
        name: "doc-qna"
      },
      {
        name: "doc-subtitle"
      },
      {
        name: "doc-tip"
      },
      {
        name: "doc-toc"
      }
    ]
  },
  {
    name: "metanames",
    values: [
      {
        name: "application-name"
      },
      {
        name: "author"
      },
      {
        name: "description"
      },
      {
        name: "format-detection"
      },
      {
        name: "generator"
      },
      {
        name: "keywords"
      },
      {
        name: "publisher"
      },
      {
        name: "referrer"
      },
      {
        name: "robots"
      },
      {
        name: "theme-color"
      },
      {
        name: "viewport"
      }
    ]
  }
];

// src/entities/html/languageFacts.ts
var htmlDataProvider = new HTMLDataProvider("html5", {
  version: 1,
  tags: HTML5_TAGS,
  globalAttributes: HTML5_GLOBAL_ATTRIBUTES.concat(HTML5_EVENTS),
  valueSets: HTML5_VALUE_MAP
});
var htmlTagMap = {};
HTML5_TAGS.forEach((t) => {
  htmlTagMap[t.name] = t;
});
function isKnownTag(name) {
  return name.toLowerCase() in htmlTagMap;
}
function getTag(name) {
  return htmlTagMap[name.toLowerCase()];
}
function getAttribute(tagName, attributeName) {
  return htmlDataProvider.provideAttributes(tagName.toLowerCase()).find((attr) => {
    return equalsIgnoreCase(attr.name, attributeName);
  });
}

// src/entities/html/htmlTag.ts
var HTML_EMPTY_ELEMENTS = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"];
function constructHTMLAttributeSnippet(tagName, attributeName, attributeQuoteType = "double" /* Double */) {
  const attribute = getAttribute(tagName, attributeName);
  if (!attribute) {
    return "";
  }
  if (attribute.valueSet === "v") {
    return attributeName;
  }
  const quoteStr = getQuote(attributeQuoteType);
  return `${attributeName}=${quoteStr}\${1}${quoteStr}`;
}

// src/entities/tag.ts
var tagAttributePattern = /<(([a-z_]+)\s+)([^<>]*)$/i;
var cfTagAttributePattern = /<((cf[a-z_]+)\s+)([^<>]*)$/i;
var cfScriptTagAttributePattern = /\b((cf[a-z_]+)\s*\(\s*)([^)]*)$/i;
var tagPrefixPattern = /<\s*(\/)?\s*$/;
var nonClosingCfmlTags = [
  "cfabort",
  "cfapplication",
  "cfargument",
  "cfassociate",
  "cfbreak",
  "cfchartdata",
  "cfcollection",
  "cfcontent",
  "cfcontinue",
  "cfcookie",
  "cfdirectory",
  "cfdump",
  "cfelse",
  "cfelseif",
  "cferror",
  "cfexecute",
  "cfexit",
  "cffile",
  "cfflush",
  "cfheader",
  "cfhttpparam",
  "cfimage",
  "cfimport",
  "cfinclude",
  "cfindex",
  "cfinput",
  "cfinvokeargument",
  "cflocation",
  "cflog",
  "cfloginuser",
  "cflogout",
  "cfmailparam",
  "cfobject",
  "cfobjectcache",
  "cfparam",
  "cfpop",
  "cfprocessingdirective",
  "cfprocparam",
  "cfprocresult",
  "cfproperty",
  "cfqueryparam",
  "cfregistry",
  "cfreportparam",
  "cfrethrow",
  "cfreturn",
  "cfschedule",
  "cfspreadsheet",
  "cfsearch",
  "cfset",
  "cfsetting",
  "cfthrow",
  "cfwddx"
];
var nonClosingTags = nonClosingCfmlTags.concat(HTML_EMPTY_ELEMENTS);
var nonIndentingTags = [
  // HTML
  "area",
  "base",
  "br",
  "col",
  "command",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr",
  // CFML
  "cfabort",
  "cfapplication",
  "cfargument",
  "cfassociate",
  "cfbreak",
  "cfchartdata",
  "cfcollection",
  "cfcontent",
  "cfcontinue",
  "cfcookie",
  "cfdirectory",
  "cfdump",
  "cferror",
  "cfexecute",
  "cfexit",
  "cffile",
  "cfflush",
  "cfheader",
  "cfhttpparam",
  "cfimage",
  "cfimport",
  "cfinclude",
  "cfindex",
  "cfinput",
  "cfinvokeargument",
  "cflocation",
  "cflog",
  "cfloginuser",
  "cflogout",
  "cfmailparam",
  "cfobject",
  "cfobjectcache",
  "cfparam",
  "cfpop",
  "cfprocessingdirective",
  "cfprocparam",
  "cfprocresult",
  "cfproperty",
  "cfqueryparam",
  "cfregistry",
  "cfreportparam",
  "cfrethrow",
  "cfreturn",
  "cfschedule",
  "cfspreadsheet",
  "cfsearch",
  "cfset",
  "cfsetting",
  "cfthrow",
  "cfwddx"
];
var decreasingIndentingTags = [
  "cfelse",
  "cfelseif"
];
var expressionCfmlTags = ["cfset", "cfif", "cfelseif", "cfreturn"];
var componentPathAttributes = {
  "cfargument": [
    "type"
  ],
  // Handling cfcomponent extends/implements elsewhere
  "cffunction": [
    "returntype"
  ],
  "cfproperty": [
    "type"
  ]
};
function getComponentPathAttributes() {
  return componentPathAttributes;
}
function getTagAttributePattern() {
  return tagAttributePattern;
}
function getCfTagAttributePattern() {
  return cfTagAttributePattern;
}
function getCfScriptTagAttributePattern() {
  return cfScriptTagAttributePattern;
}
function getTagPrefixPattern() {
  return tagPrefixPattern;
}
function getTagPattern(tagName) {
  return new RegExp(`(<${tagName}\\b\\s*)([^>]*?)(?:>([\\s\\S]*?)<\\/${tagName}>|\\/?>)`, "gi");
}
function getStartTagPattern(tagName) {
  return new RegExp(`(<${tagName}\\b\\s*)([^>]*?)(\\/)?>`, "gi");
}
function getStartScriptTagPattern(tagName) {
  return new RegExp(`\\b(${tagName}\\s*\\(\\s*)([^)]*)\\)(;)?`, "gi");
}
function getCfStartTagPattern() {
  return /(<(cf[a-z_]+)\s*)([^>]*?)>/gi;
}
function getCfScriptTagPatternIgnoreBody() {
  return /\b((cf[a-z_]+)\s*\(\s*)([^)]*)\)/gi;
}
function getNonClosingCfmlTags() {
  return nonClosingCfmlTags;
}
function parseTags(documentStateContext, tagName, range, _token) {
  const tags = [];
  const document2 = documentStateContext.document;
  let textOffset = 0;
  let documentText = documentStateContext.sanitizedDocumentText;
  if (range && document2.validateRange(range)) {
    textOffset = document2.offsetAt(range.start);
    documentText = documentText.slice(textOffset, document2.offsetAt(range.end));
  }
  const thisTagPattern = getTagPattern(tagName);
  let thisTagMatch = null;
  while (thisTagMatch = thisTagPattern.exec(documentText)) {
    const tagStart = thisTagMatch[1];
    const tagAttributes = thisTagMatch[2];
    const tagBodyText = thisTagMatch[3];
    const attributeStartOffset = textOffset + thisTagMatch.index + tagStart.length;
    const attributeRange = new import_vscode5.Range(
      document2.positionAt(attributeStartOffset),
      document2.positionAt(attributeStartOffset + tagAttributes.length)
    );
    let tagBodyRange;
    if (tagBodyText !== void 0) {
      const thisBodyStartOffset = attributeStartOffset + tagAttributes.length + 1;
      tagBodyRange = new import_vscode5.Range(
        document2.positionAt(thisBodyStartOffset),
        document2.positionAt(thisBodyStartOffset + tagBodyText.length)
      );
    }
    tags.push({
      name: tagName,
      attributes: parseAttributes(document2, attributeRange),
      tagRange: new import_vscode5.Range(
        document2.positionAt(thisTagMatch.index),
        document2.positionAt(thisTagMatch.index + thisTagMatch[0].length)
      ),
      bodyRange: tagBodyRange,
      isScript: false
    });
  }
  return tags;
}
function parseStartTags(documentStateContext, tagName, isScript, range, _token) {
  const startTags = [];
  const document2 = documentStateContext.document;
  let textOffset = 0;
  let documentText = documentStateContext.sanitizedDocumentText;
  if (range && document2.validateRange(range)) {
    textOffset = document2.offsetAt(range.start);
    documentText = documentText.slice(textOffset, document2.offsetAt(range.end));
  }
  const thisTagPattern = isScript ? getStartScriptTagPattern(tagName) : getStartTagPattern(tagName);
  let thisTagMatch = null;
  while (thisTagMatch = thisTagPattern.exec(documentText)) {
    const fullMatch = thisTagMatch[0];
    const tagStart = thisTagMatch[1];
    const tagAttributes = thisTagMatch[2];
    const thisTagStartOffset = textOffset + thisTagMatch.index;
    const startTagRange = new import_vscode5.Range(
      document2.positionAt(thisTagStartOffset),
      document2.positionAt(thisTagStartOffset + fullMatch.length)
    );
    const attributeStartOffset = thisTagStartOffset + tagStart.length;
    const attributeRange = new import_vscode5.Range(
      document2.positionAt(attributeStartOffset),
      document2.positionAt(attributeStartOffset + tagAttributes.length)
    );
    startTags.push({
      name: tagName,
      attributes: parseAttributes(document2, attributeRange),
      tagRange: startTagRange
    });
  }
  return startTags;
}
function getCfTags(documentStateContext, isScript = false, docRange) {
  const tags = [];
  const unclosedTags = [];
  const document2 = documentStateContext.document;
  const documentText = documentStateContext.sanitizedDocumentText;
  let textOffsetStart = 0;
  let textOffsetEnd = documentText.length;
  if (docRange && document2.validateRange(docRange)) {
    textOffsetStart = document2.offsetAt(docRange.start);
    textOffsetEnd = document2.offsetAt(docRange.end);
  }
  let tagContext = {
    inStartTag: false,
    inEndTag: false,
    name: void 0,
    startOffset: void 0
  };
  let stringContext = {
    inString: false,
    activeStringDelimiter: void 0,
    start: void 0,
    embeddedCFML: false
  };
  const nonClosingCfmlTags2 = getNonClosingCfmlTags();
  const tagOpeningChar = "<";
  const tagClosingChar = ">";
  const embeddedCFMLDelimiter = "#";
  let characterAtPreviousPosition;
  for (let offset = textOffsetStart; offset < textOffsetEnd; offset++) {
    const characterAtPosition = documentText.charAt(offset);
    if (stringContext.inString) {
      if (characterAtPosition === embeddedCFMLDelimiter) {
        stringContext.embeddedCFML = !stringContext.embeddedCFML;
      } else if (!stringContext.embeddedCFML && characterAtPosition === stringContext.activeStringDelimiter) {
        stringContext = {
          inString: false,
          activeStringDelimiter: void 0,
          start: void 0,
          embeddedCFML: false
        };
      }
    } else if (tagContext.inStartTag) {
      if (characterAtPosition === tagClosingChar) {
        const globalTag = getGlobalTag(tagContext.name);
        let attributes;
        if (!globalTag || globalTag.signatures.length > 0 && globalTag.signatures[0].parameters.length > 0) {
          const attributeRange = new import_vscode5.Range(
            document2.positionAt(tagContext.startOffset + tagContext.name.length + 1),
            document2.positionAt(offset)
          );
          attributes = parseAttributes(document2, attributeRange);
        }
        const tagRange = new import_vscode5.Range(document2.positionAt(tagContext.startOffset), document2.positionAt(offset + 1));
        if (nonClosingCfmlTags2.includes(tagContext.name) || characterAtPreviousPosition === "/") {
          tags.push({
            name: tagContext.name,
            attributes,
            tagRange,
            isScript: false
          });
        } else {
          unclosedTags.push({
            name: tagContext.name,
            attributes,
            tagRange
          });
        }
        tagContext = {
          inStartTag: false,
          inEndTag: false,
          name: void 0,
          startOffset: void 0
        };
      } else if (isStringDelimiter(characterAtPosition)) {
        stringContext = {
          inString: true,
          activeStringDelimiter: characterAtPosition,
          start: document2.positionAt(offset),
          embeddedCFML: false
        };
      }
    } else if (tagContext.inEndTag) {
      if (characterAtPosition === tagClosingChar) {
        const unclosedTag = unclosedTags.pop();
        const bodyRange = new import_vscode5.Range(unclosedTag.tagRange.end.translate(0, 1), document2.positionAt(tagContext.startOffset));
        tags.push({
          name: unclosedTag.name,
          attributes: unclosedTag.attributes,
          tagRange: new import_vscode5.Range(unclosedTag.tagRange.start, document2.positionAt(offset + 1)),
          bodyRange,
          isScript: false
        });
        tagContext = {
          inStartTag: false,
          inEndTag: false,
          name: void 0,
          startOffset: void 0
        };
      }
    } else if (isScript) {
      if (isStringDelimiter(characterAtPosition)) {
        const currentPosition = document2.positionAt(offset);
        stringContext = {
          inString: true,
          activeStringDelimiter: characterAtPosition,
          start: currentPosition,
          embeddedCFML: false
        };
      }
    } else if (characterAtPreviousPosition === "c" && characterAtPosition === "f") {
      const currentPosition = document2.positionAt(offset);
      const prefixStartPosition = document2.positionAt(offset - 2);
      const prefixEndPosition = document2.positionAt(offset - 1);
      let prefixText = document2.getText(new import_vscode5.Range(prefixStartPosition, prefixEndPosition));
      if (prefixText === tagOpeningChar) {
        const tagName = document2.getText(document2.getWordRangeAtPosition(currentPosition));
        tagContext = {
          inStartTag: true,
          inEndTag: false,
          name: tagName,
          startOffset: offset - 2
        };
      } else {
        const beforePrefixPosition = document2.positionAt(offset - 3);
        prefixText = document2.getText(new import_vscode5.Range(beforePrefixPosition, prefixEndPosition));
        if (prefixText === "</") {
          const tagName = document2.getText(document2.getWordRangeAtPosition(currentPosition));
          const lastUnclosedTag = unclosedTags.slice(-1)[0];
          if (lastUnclosedTag && lastUnclosedTag.name === tagName) {
            tagContext = {
              inStartTag: false,
              inEndTag: true,
              name: tagName,
              startOffset: offset - 3
            };
          }
        }
      }
    }
    characterAtPreviousPosition = characterAtPosition;
  }
  return tags;
}
function goToMatchingTag(editor, edit, _token = null) {
  const position = editor.selection.active;
  const documentUri = editor.document.uri;
  const cfmlCompletionSettings = import_vscode5.workspace.getConfiguration("cfml.suggest", documentUri);
  const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
  const documentPositionStateContext = getDocumentPositionStateContext(editor.document, position, false, replaceComments, _token, false);
  const currentWord = documentPositionStateContext.currentWord;
  let globalTag = getGlobalTag(currentWord);
  if (!globalTag) {
    const cfTagAttributePattern2 = documentPositionStateContext.positionIsScript ? getCfScriptTagAttributePattern() : getCfTagAttributePattern();
    const cfTagAttributeMatch = cfTagAttributePattern2.exec(documentPositionStateContext.docPrefix);
    if (cfTagAttributeMatch) {
      const tagName = cfTagAttributeMatch[2];
      globalTag = getGlobalTag(tagName);
    }
  }
  if (globalTag) {
    const nonClosingCfmlTags2 = getNonClosingCfmlTags();
    if (!nonClosingCfmlTags2.includes(globalTag.name)) {
      const tags = getCfTags(documentPositionStateContext, documentPositionStateContext.docIsScript);
      const foundTag = tags.find((tag) => {
        return tag.bodyRange && !tag.bodyRange.contains(position) && tag.tagRange.contains(position);
      });
      if (foundTag) {
        let newPosition;
        if (position.isBeforeOrEqual(foundTag.bodyRange.start)) {
          newPosition = foundTag.bodyRange.end.translate(0, 2);
        } else {
          newPosition = foundTag.tagRange.start.translate(0, 1);
        }
        editor.selection = new import_vscode5.Selection(newPosition, newPosition);
        editor.revealRange(editor.selection);
        return;
      }
    }
  }
  import_vscode5.window.showInformationMessage("No matching tag was found");
}

// src/features/comment.ts
init_process();
init_buffer();
var import_vscode6 = require("vscode");
var cfmlCommentRules = {
  scriptBlockComment: ["/*", "*/"],
  scriptLineComment: "//",
  tagBlockComment: ["<!---", "--->"]
};
function isTagComment(document2, startPosition, _token) {
  const docIsScript = isCfcFile(document2, _token) && hasComponent(document2.uri, _token) && getComponent(document2.uri, _token).isScript;
  return !docIsScript && !isInCfScript(document2, startPosition, _token);
}
function getCommentCommand(commentType) {
  let command = "";
  if (commentType === 0 /* Line */) {
    command = "editor.action.commentLine";
  } else {
    command = "editor.action.blockComment";
  }
  return command;
}
function toggleComment(commentType, _token) {
  return (editor) => {
    if (editor) {
      let languageConfig = {
        comments: {
          lineComment: cfmlCommentRules.scriptLineComment,
          blockComment: cfmlCommentRules.scriptBlockComment
        }
      };
      const cfsLanguageConfig = {
        comments: {
          lineComment: cfmlCommentRules.scriptLineComment,
          blockComment: cfmlCommentRules.scriptBlockComment
        }
      };
      if (isTagComment(editor.document, editor.selection.start, _token)) {
        languageConfig = {
          comments: {
            blockComment: cfmlCommentRules.tagBlockComment
          }
        };
      }
      import_vscode6.languages.setLanguageConfiguration(LANGUAGE_ID, languageConfig);
      import_vscode6.languages.setLanguageConfiguration(LANGUAGE_CFS_ID, cfsLanguageConfig);
      const command = getCommentCommand(commentType);
      import_vscode6.commands.executeCommand(command);
    } else {
      import_vscode6.window.showInformationMessage("No editor is active");
    }
  };
}

// node_modules/vscode-uri/lib/esm/index.mjs
init_process();
init_buffer();
var LIB;
(() => {
  "use strict";
  var t = { 975: (t2) => {
    function e2(t3) {
      if ("string" != typeof t3) throw new TypeError("Path must be a string. Received " + JSON.stringify(t3));
    }
    function r2(t3, e3) {
      for (var r3, n3 = "", i2 = 0, o2 = -1, s2 = 0, h2 = 0; h2 <= t3.length; ++h2) {
        if (h2 < t3.length) r3 = t3.charCodeAt(h2);
        else {
          if (47 === r3) break;
          r3 = 47;
        }
        if (47 === r3) {
          if (o2 === h2 - 1 || 1 === s2) ;
          else if (o2 !== h2 - 1 && 2 === s2) {
            if (n3.length < 2 || 2 !== i2 || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {
              if (n3.length > 2) {
                var a2 = n3.lastIndexOf("/");
                if (a2 !== n3.length - 1) {
                  -1 === a2 ? (n3 = "", i2 = 0) : i2 = (n3 = n3.slice(0, a2)).length - 1 - n3.lastIndexOf("/"), o2 = h2, s2 = 0;
                  continue;
                }
              } else if (2 === n3.length || 1 === n3.length) {
                n3 = "", i2 = 0, o2 = h2, s2 = 0;
                continue;
              }
            }
            e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", i2 = 2);
          } else n3.length > 0 ? n3 += "/" + t3.slice(o2 + 1, h2) : n3 = t3.slice(o2 + 1, h2), i2 = h2 - o2 - 1;
          o2 = h2, s2 = 0;
        } else 46 === r3 && -1 !== s2 ? ++s2 : s2 = -1;
      }
      return n3;
    }
    var n2 = { resolve: function() {
      for (var t3, n3 = "", i2 = false, o2 = arguments.length - 1; o2 >= -1 && !i2; o2--) {
        var s2;
        o2 >= 0 ? s2 = arguments[o2] : (void 0 === t3 && (t3 = process.cwd()), s2 = t3), e2(s2), 0 !== s2.length && (n3 = s2 + "/" + n3, i2 = 47 === s2.charCodeAt(0));
      }
      return n3 = r2(n3, !i2), i2 ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
    }, normalize: function(t3) {
      if (e2(t3), 0 === t3.length) return ".";
      var n3 = 47 === t3.charCodeAt(0), i2 = 47 === t3.charCodeAt(t3.length - 1);
      return 0 !== (t3 = r2(t3, !n3)).length || n3 || (t3 = "."), t3.length > 0 && i2 && (t3 += "/"), n3 ? "/" + t3 : t3;
    }, isAbsolute: function(t3) {
      return e2(t3), t3.length > 0 && 47 === t3.charCodeAt(0);
    }, join: function() {
      if (0 === arguments.length) return ".";
      for (var t3, r3 = 0; r3 < arguments.length; ++r3) {
        var i2 = arguments[r3];
        e2(i2), i2.length > 0 && (void 0 === t3 ? t3 = i2 : t3 += "/" + i2);
      }
      return void 0 === t3 ? "." : n2.normalize(t3);
    }, relative: function(t3, r3) {
      if (e2(t3), e2(r3), t3 === r3) return "";
      if ((t3 = n2.resolve(t3)) === (r3 = n2.resolve(r3))) return "";
      for (var i2 = 1; i2 < t3.length && 47 === t3.charCodeAt(i2); ++i2) ;
      for (var o2 = t3.length, s2 = o2 - i2, h2 = 1; h2 < r3.length && 47 === r3.charCodeAt(h2); ++h2) ;
      for (var a2 = r3.length - h2, c2 = s2 < a2 ? s2 : a2, f2 = -1, u2 = 0; u2 <= c2; ++u2) {
        if (u2 === c2) {
          if (a2 > c2) {
            if (47 === r3.charCodeAt(h2 + u2)) return r3.slice(h2 + u2 + 1);
            if (0 === u2) return r3.slice(h2 + u2);
          } else s2 > c2 && (47 === t3.charCodeAt(i2 + u2) ? f2 = u2 : 0 === u2 && (f2 = 0));
          break;
        }
        var l2 = t3.charCodeAt(i2 + u2);
        if (l2 !== r3.charCodeAt(h2 + u2)) break;
        47 === l2 && (f2 = u2);
      }
      var g2 = "";
      for (u2 = i2 + f2 + 1; u2 <= o2; ++u2) u2 !== o2 && 47 !== t3.charCodeAt(u2) || (0 === g2.length ? g2 += ".." : g2 += "/..");
      return g2.length > 0 ? g2 + r3.slice(h2 + f2) : (h2 += f2, 47 === r3.charCodeAt(h2) && ++h2, r3.slice(h2));
    }, _makeLong: function(t3) {
      return t3;
    }, dirname: function(t3) {
      if (e2(t3), 0 === t3.length) return ".";
      for (var r3 = t3.charCodeAt(0), n3 = 47 === r3, i2 = -1, o2 = true, s2 = t3.length - 1; s2 >= 1; --s2) if (47 === (r3 = t3.charCodeAt(s2))) {
        if (!o2) {
          i2 = s2;
          break;
        }
      } else o2 = false;
      return -1 === i2 ? n3 ? "/" : "." : n3 && 1 === i2 ? "//" : t3.slice(0, i2);
    }, basename: function(t3, r3) {
      if (void 0 !== r3 && "string" != typeof r3) throw new TypeError('"ext" argument must be a string');
      e2(t3);
      var n3, i2 = 0, o2 = -1, s2 = true;
      if (void 0 !== r3 && r3.length > 0 && r3.length <= t3.length) {
        if (r3.length === t3.length && r3 === t3) return "";
        var h2 = r3.length - 1, a2 = -1;
        for (n3 = t3.length - 1; n3 >= 0; --n3) {
          var c2 = t3.charCodeAt(n3);
          if (47 === c2) {
            if (!s2) {
              i2 = n3 + 1;
              break;
            }
          } else -1 === a2 && (s2 = false, a2 = n3 + 1), h2 >= 0 && (c2 === r3.charCodeAt(h2) ? -1 == --h2 && (o2 = n3) : (h2 = -1, o2 = a2));
        }
        return i2 === o2 ? o2 = a2 : -1 === o2 && (o2 = t3.length), t3.slice(i2, o2);
      }
      for (n3 = t3.length - 1; n3 >= 0; --n3) if (47 === t3.charCodeAt(n3)) {
        if (!s2) {
          i2 = n3 + 1;
          break;
        }
      } else -1 === o2 && (s2 = false, o2 = n3 + 1);
      return -1 === o2 ? "" : t3.slice(i2, o2);
    }, extname: function(t3) {
      e2(t3);
      for (var r3 = -1, n3 = 0, i2 = -1, o2 = true, s2 = 0, h2 = t3.length - 1; h2 >= 0; --h2) {
        var a2 = t3.charCodeAt(h2);
        if (47 !== a2) -1 === i2 && (o2 = false, i2 = h2 + 1), 46 === a2 ? -1 === r3 ? r3 = h2 : 1 !== s2 && (s2 = 1) : -1 !== r3 && (s2 = -1);
        else if (!o2) {
          n3 = h2 + 1;
          break;
        }
      }
      return -1 === r3 || -1 === i2 || 0 === s2 || 1 === s2 && r3 === i2 - 1 && r3 === n3 + 1 ? "" : t3.slice(r3, i2);
    }, format: function(t3) {
      if (null === t3 || "object" != typeof t3) throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t3);
      return function(t4, e3) {
        var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
        return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
      }(0, t3);
    }, parse: function(t3) {
      e2(t3);
      var r3 = { root: "", dir: "", base: "", ext: "", name: "" };
      if (0 === t3.length) return r3;
      var n3, i2 = t3.charCodeAt(0), o2 = 47 === i2;
      o2 ? (r3.root = "/", n3 = 1) : n3 = 0;
      for (var s2 = -1, h2 = 0, a2 = -1, c2 = true, f2 = t3.length - 1, u2 = 0; f2 >= n3; --f2) if (47 !== (i2 = t3.charCodeAt(f2))) -1 === a2 && (c2 = false, a2 = f2 + 1), 46 === i2 ? -1 === s2 ? s2 = f2 : 1 !== u2 && (u2 = 1) : -1 !== s2 && (u2 = -1);
      else if (!c2) {
        h2 = f2 + 1;
        break;
      }
      return -1 === s2 || -1 === a2 || 0 === u2 || 1 === u2 && s2 === a2 - 1 && s2 === h2 + 1 ? -1 !== a2 && (r3.base = r3.name = 0 === h2 && o2 ? t3.slice(1, a2) : t3.slice(h2, a2)) : (0 === h2 && o2 ? (r3.name = t3.slice(1, s2), r3.base = t3.slice(1, a2)) : (r3.name = t3.slice(h2, s2), r3.base = t3.slice(h2, a2)), r3.ext = t3.slice(s2, a2)), h2 > 0 ? r3.dir = t3.slice(0, h2 - 1) : o2 && (r3.dir = "/"), r3;
    }, sep: "/", delimiter: ":", win32: null, posix: null };
    n2.posix = n2, t2.exports = n2;
  } }, e = {};
  function r(n2) {
    var i2 = e[n2];
    if (void 0 !== i2) return i2.exports;
    var o2 = e[n2] = { exports: {} };
    return t[n2](o2, o2.exports, r), o2.exports;
  }
  r.d = (t2, e2) => {
    for (var n2 in e2) r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: e2[n2] });
  }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
  };
  var n = {};
  let i;
  if (r.r(n), r.d(n, { URI: () => l, Utils: () => I }), "object" == typeof process) i = "win32" === process.platform;
  else if ("object" == typeof navigator) {
    let t2 = navigator.userAgent;
    i = t2.indexOf("Windows") >= 0;
  }
  const o = /^\w[\w\d+.-]*$/, s = /^\//, h = /^\/\//;
  function a(t2, e2) {
    if (!t2.scheme && e2) throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t2.authority}", path: "${t2.path}", query: "${t2.query}", fragment: "${t2.fragment}"}`);
    if (t2.scheme && !o.test(t2.scheme)) throw new Error("[UriError]: Scheme contains illegal characters.");
    if (t2.path) {
      if (t2.authority) {
        if (!s.test(t2.path)) throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
      } else if (h.test(t2.path)) throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
    }
  }
  const c = "", f = "/", u = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
  class l {
    static isUri(t2) {
      return t2 instanceof l || !!t2 && "string" == typeof t2.authority && "string" == typeof t2.fragment && "string" == typeof t2.path && "string" == typeof t2.query && "string" == typeof t2.scheme && "string" == typeof t2.fsPath && "function" == typeof t2.with && "function" == typeof t2.toString;
    }
    scheme;
    authority;
    path;
    query;
    fragment;
    constructor(t2, e2, r2, n2, i2, o2 = false) {
      "object" == typeof t2 ? (this.scheme = t2.scheme || c, this.authority = t2.authority || c, this.path = t2.path || c, this.query = t2.query || c, this.fragment = t2.fragment || c) : (this.scheme = /* @__PURE__ */ function(t3, e3) {
        return t3 || e3 ? t3 : "file";
      }(t2, o2), this.authority = e2 || c, this.path = function(t3, e3) {
        switch (t3) {
          case "https":
          case "http":
          case "file":
            e3 ? e3[0] !== f && (e3 = f + e3) : e3 = f;
        }
        return e3;
      }(this.scheme, r2 || c), this.query = n2 || c, this.fragment = i2 || c, a(this, o2));
    }
    get fsPath() {
      return v(this, false);
    }
    with(t2) {
      if (!t2) return this;
      let { scheme: e2, authority: r2, path: n2, query: i2, fragment: o2 } = t2;
      return void 0 === e2 ? e2 = this.scheme : null === e2 && (e2 = c), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = c), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = c), void 0 === i2 ? i2 = this.query : null === i2 && (i2 = c), void 0 === o2 ? o2 = this.fragment : null === o2 && (o2 = c), e2 === this.scheme && r2 === this.authority && n2 === this.path && i2 === this.query && o2 === this.fragment ? this : new d(e2, r2, n2, i2, o2);
    }
    static parse(t2, e2 = false) {
      const r2 = u.exec(t2);
      return r2 ? new d(r2[2] || c, w(r2[4] || c), w(r2[5] || c), w(r2[7] || c), w(r2[9] || c), e2) : new d(c, c, c, c, c);
    }
    static file(t2) {
      let e2 = c;
      if (i && (t2 = t2.replace(/\\/g, f)), t2[0] === f && t2[1] === f) {
        const r2 = t2.indexOf(f, 2);
        -1 === r2 ? (e2 = t2.substring(2), t2 = f) : (e2 = t2.substring(2, r2), t2 = t2.substring(r2) || f);
      }
      return new d("file", e2, t2, c, c);
    }
    static from(t2) {
      const e2 = new d(t2.scheme, t2.authority, t2.path, t2.query, t2.fragment);
      return a(e2, true), e2;
    }
    toString(t2 = false) {
      return b(this, t2);
    }
    toJSON() {
      return this;
    }
    static revive(t2) {
      if (t2) {
        if (t2 instanceof l) return t2;
        {
          const e2 = new d(t2);
          return e2._formatted = t2.external, e2._fsPath = t2._sep === g ? t2.fsPath : null, e2;
        }
      }
      return t2;
    }
  }
  const g = i ? 1 : void 0;
  class d extends l {
    _formatted = null;
    _fsPath = null;
    get fsPath() {
      return this._fsPath || (this._fsPath = v(this, false)), this._fsPath;
    }
    toString(t2 = false) {
      return t2 ? b(this, true) : (this._formatted || (this._formatted = b(this, false)), this._formatted);
    }
    toJSON() {
      const t2 = { $mid: 1 };
      return this._fsPath && (t2.fsPath = this._fsPath, t2._sep = g), this._formatted && (t2.external = this._formatted), this.path && (t2.path = this.path), this.scheme && (t2.scheme = this.scheme), this.authority && (t2.authority = this.authority), this.query && (t2.query = this.query), this.fragment && (t2.fragment = this.fragment), t2;
    }
  }
  const p = { 58: "%3A", 47: "%2F", 63: "%3F", 35: "%23", 91: "%5B", 93: "%5D", 64: "%40", 33: "%21", 36: "%24", 38: "%26", 39: "%27", 40: "%28", 41: "%29", 42: "%2A", 43: "%2B", 44: "%2C", 59: "%3B", 61: "%3D", 32: "%20" };
  function m(t2, e2, r2) {
    let n2, i2 = -1;
    for (let o2 = 0; o2 < t2.length; o2++) {
      const s2 = t2.charCodeAt(o2);
      if (s2 >= 97 && s2 <= 122 || s2 >= 65 && s2 <= 90 || s2 >= 48 && s2 <= 57 || 45 === s2 || 46 === s2 || 95 === s2 || 126 === s2 || e2 && 47 === s2 || r2 && 91 === s2 || r2 && 93 === s2 || r2 && 58 === s2) -1 !== i2 && (n2 += encodeURIComponent(t2.substring(i2, o2)), i2 = -1), void 0 !== n2 && (n2 += t2.charAt(o2));
      else {
        void 0 === n2 && (n2 = t2.substr(0, o2));
        const e3 = p[s2];
        void 0 !== e3 ? (-1 !== i2 && (n2 += encodeURIComponent(t2.substring(i2, o2)), i2 = -1), n2 += e3) : -1 === i2 && (i2 = o2);
      }
    }
    return -1 !== i2 && (n2 += encodeURIComponent(t2.substring(i2))), void 0 !== n2 ? n2 : t2;
  }
  function y(t2) {
    let e2;
    for (let r2 = 0; r2 < t2.length; r2++) {
      const n2 = t2.charCodeAt(r2);
      35 === n2 || 63 === n2 ? (void 0 === e2 && (e2 = t2.substr(0, r2)), e2 += p[n2]) : void 0 !== e2 && (e2 += t2[r2]);
    }
    return void 0 !== e2 ? e2 : t2;
  }
  function v(t2, e2) {
    let r2;
    return r2 = t2.authority && t2.path.length > 1 && "file" === t2.scheme ? `//${t2.authority}${t2.path}` : 47 === t2.path.charCodeAt(0) && (t2.path.charCodeAt(1) >= 65 && t2.path.charCodeAt(1) <= 90 || t2.path.charCodeAt(1) >= 97 && t2.path.charCodeAt(1) <= 122) && 58 === t2.path.charCodeAt(2) ? e2 ? t2.path.substr(1) : t2.path[1].toLowerCase() + t2.path.substr(2) : t2.path, i && (r2 = r2.replace(/\//g, "\\")), r2;
  }
  function b(t2, e2) {
    const r2 = e2 ? y : m;
    let n2 = "", { scheme: i2, authority: o2, path: s2, query: h2, fragment: a2 } = t2;
    if (i2 && (n2 += i2, n2 += ":"), (o2 || "file" === i2) && (n2 += f, n2 += f), o2) {
      let t3 = o2.indexOf("@");
      if (-1 !== t3) {
        const e3 = o2.substr(0, t3);
        o2 = o2.substr(t3 + 1), t3 = e3.lastIndexOf(":"), -1 === t3 ? n2 += r2(e3, false, false) : (n2 += r2(e3.substr(0, t3), false, false), n2 += ":", n2 += r2(e3.substr(t3 + 1), false, true)), n2 += "@";
      }
      o2 = o2.toLowerCase(), t3 = o2.lastIndexOf(":"), -1 === t3 ? n2 += r2(o2, false, true) : (n2 += r2(o2.substr(0, t3), false, true), n2 += o2.substr(t3));
    }
    if (s2) {
      if (s2.length >= 3 && 47 === s2.charCodeAt(0) && 58 === s2.charCodeAt(2)) {
        const t3 = s2.charCodeAt(1);
        t3 >= 65 && t3 <= 90 && (s2 = `/${String.fromCharCode(t3 + 32)}:${s2.substr(3)}`);
      } else if (s2.length >= 2 && 58 === s2.charCodeAt(1)) {
        const t3 = s2.charCodeAt(0);
        t3 >= 65 && t3 <= 90 && (s2 = `${String.fromCharCode(t3 + 32)}:${s2.substr(2)}`);
      }
      n2 += r2(s2, true, false);
    }
    return h2 && (n2 += "?", n2 += r2(h2, false, false)), a2 && (n2 += "#", n2 += e2 ? a2 : m(a2, false, false)), n2;
  }
  function C(t2) {
    try {
      return decodeURIComponent(t2);
    } catch {
      return t2.length > 3 ? t2.substr(0, 3) + C(t2.substr(3)) : t2;
    }
  }
  const A = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
  function w(t2) {
    return t2.match(A) ? t2.replace(A, (t3) => C(t3)) : t2;
  }
  var x = r(975);
  const P = x.posix || x, _ = "/";
  var I;
  !function(t2) {
    t2.joinPath = function(t3, ...e2) {
      return t3.with({ path: P.join(t3.path, ...e2) });
    }, t2.resolvePath = function(t3, ...e2) {
      let r2 = t3.path, n2 = false;
      r2[0] !== _ && (r2 = _ + r2, n2 = true);
      let i2 = P.resolve(r2, ...e2);
      return n2 && i2[0] === _ && !t3.authority && (i2 = i2.substring(1)), t3.with({ path: i2 });
    }, t2.dirname = function(t3) {
      if (0 === t3.path.length || t3.path === _) return t3;
      let e2 = P.dirname(t3.path);
      return 1 === e2.length && 46 === e2.charCodeAt(0) && (e2 = ""), t3.with({ path: e2 });
    }, t2.basename = function(t3) {
      return P.basename(t3.path);
    }, t2.extname = function(t3) {
      return P.extname(t3.path);
    };
  }(I || (I = {})), LIB = n;
})();
var { URI, Utils } = LIB;

// src/utils/contextUtil.ts
var CFM_FILE_EXTS = [".cfm", ".cfml"];
var CFS_FILE_EXTS = [".cfs"];
var APPLICATION_CFM_GLOB = "**/Application.cfm";
var continuingExpressionPattern = /(?:\.\s*|[\w$])$/;
var memberExpressionPattern = /(?:\.)$/;
var cfscriptLineCommentPattern = /\/\/[^\r\n]*/g;
var cfscriptBlockCommentPattern = /\/\*[\s\S]*?\*\//g;
var tagBlockCommentPattern = /<!--[\s\S]*?-->/g;
var characterPairs = [
  ["{", "}"],
  ["[", "]"],
  ["(", ")"],
  ['"', '"'],
  ["'", "'"],
  ["#", "#"],
  ["<", ">"]
];
var NEW_LINE = "\n".charCodeAt(0);
var LEFT_PAREN = "(".charCodeAt(0);
var RIGHT_PAREN = ")".charCodeAt(0);
var SINGLE_QUOTE = "'".charCodeAt(0);
var DOUBLE_QUOTE = '"'.charCodeAt(0);
var BOF = 0;
var identPattern = /[$A-Za-z_][$\w]*/;
var identPartPattern = /[$\w]/;
var BackwardIterator = class {
  /**
   *
   * @param documentStateContext document state context
   * @param position position
   * @param _token
   */
  constructor(documentStateContext, position, _token) {
    this.documentStateContext = documentStateContext;
    this.lineNumber = position.line;
    this.lineCharacterOffset = position.character;
    this.lineText = this.getLineText(_token);
  }
  /**
   * Returns whether there is another character
   * @returns boolean
   */
  hasNext() {
    return this.lineNumber >= 0;
  }
  /**
   * Gets the next character code
   * @param _token
   * @returns
   */
  next(_token) {
    if (this.lineCharacterOffset < 0) {
      this.lineNumber--;
      if (this.lineNumber >= 0) {
        this.lineText = this.getLineText(_token);
        this.lineCharacterOffset = this.lineText.length - 1;
        return NEW_LINE;
      }
      return BOF;
    }
    const charCode = this.lineText.charCodeAt(this.lineCharacterOffset);
    this.lineCharacterOffset--;
    return charCode;
  }
  /**
   * Gets current position in iterator
   * @returns Position
   */
  getPosition() {
    let lineNumber = this.lineNumber;
    let lineCharacterOffset = this.lineCharacterOffset;
    if (lineCharacterOffset < 0) {
      lineNumber--;
      if (lineNumber >= 0) {
        const document2 = this.getDocument();
        const lineRange = document2.lineAt(lineNumber).range;
        const lineText = this.documentStateContext.sanitizedDocumentText.slice(document2.offsetAt(lineRange.start), document2.offsetAt(lineRange.end));
        lineCharacterOffset = lineText.length - 1;
      } else {
        return void 0;
      }
    }
    if (lineCharacterOffset < 0) {
      return void 0;
    }
    return new import_vscode7.Position(lineNumber, lineCharacterOffset);
  }
  /**
   * Sets a position in iterator
   * @param newPosition Sets a new position for the iterator
   * @param _token
   */
  setPosition(newPosition, _token) {
    if (this.lineNumber !== newPosition.line) {
      this.lineNumber = newPosition.line;
      this.lineText = this.getLineText(_token);
    }
    this.lineCharacterOffset = newPosition.character;
  }
  /**
   * Gets document
   * @returns
   */
  getDocument() {
    return this.documentStateContext.document;
  }
  /**
   * Gets documentStateContext
   * @returns
   */
  getDocumentStateContext() {
    return this.documentStateContext;
  }
  /**
   * Gets the current line text
   * @param _token
   * @returns
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getLineText(_token) {
    const document2 = this.getDocument();
    const lineRange = document2.lineAt(this.lineNumber).range;
    return this.documentStateContext.sanitizedDocumentText.slice(document2.offsetAt(lineRange.start), document2.offsetAt(lineRange.end));
  }
};
function isCfmFile(document2, _token) {
  const extensionName = Utils.extname(import_vscode7.Uri.parse(document2.fileName));
  for (const currExt of CFM_FILE_EXTS) {
    if (equalsIgnoreCase(extensionName, currExt)) {
      return true;
    }
  }
  return false;
}
function isCfsFile(document2, _token) {
  const extensionName = Utils.extname(import_vscode7.Uri.parse(document2.fileName));
  for (const currExt of CFS_FILE_EXTS) {
    if (equalsIgnoreCase(extensionName, currExt)) {
      return true;
    }
  }
  return false;
}
function isCfcFile(document2, _token) {
  return isCfcUri(document2.uri, _token);
}
function isCfcUri(uri, _token) {
  const extensionName = Utils.extname(uri);
  return equalsIgnoreCase(extensionName, COMPONENT_EXT);
}
function getCfScriptRanges(document2, range, _token, commentRanges = []) {
  const ranges = [];
  let documentText;
  let textOffset;
  if (range && document2.validateRange(range)) {
    documentText = document2.getText(range);
    textOffset = document2.offsetAt(range.start);
  } else {
    documentText = document2.getText();
    textOffset = 0;
  }
  const cfscriptTagPattern = getTagPattern("cfscript");
  let cfscriptTagMatch = null;
  while (cfscriptTagMatch = cfscriptTagPattern.exec(documentText)) {
    const prefixLen = cfscriptTagMatch[1].length + cfscriptTagMatch[2].length + 1;
    const cfscriptBodyText = cfscriptTagMatch[3];
    if (cfscriptBodyText) {
      const cfscriptBodyStartOffset = textOffset + cfscriptTagMatch.index + prefixLen;
      const range2 = new import_vscode7.Range(
        document2.positionAt(cfscriptBodyStartOffset),
        document2.positionAt(cfscriptBodyStartOffset + cfscriptBodyText.length)
      );
      if (!isInRanges(commentRanges, range2, false, _token)) {
        ranges.push(range2);
      }
    }
  }
  return ranges;
}
function getDocumentContextRanges(document2, isScript = false, docRange, fast = false, _token, exclDocumentRanges = false) {
  if (fast) {
    return { commentRanges: getCommentRangesByRegex(document2, isScript, docRange, _token) };
  }
  if (exclDocumentRanges) {
    return { commentRanges: [], stringRanges: [], stringEmbeddedCfmlRanges: [] };
  }
  return getCommentAndStringRangesIterated(document2, isScript, docRange, _token);
}
function getCommentRangesByRegex(document2, isScript = false, docRange, _token) {
  let commentRanges = [];
  let documentText;
  let textOffset;
  if (docRange && document2.validateRange(docRange)) {
    documentText = document2.getText(docRange);
    textOffset = document2.offsetAt(docRange.start);
  } else {
    documentText = document2.getText();
    textOffset = 0;
  }
  if (isScript) {
    let scriptBlockCommentMatch = null;
    while (scriptBlockCommentMatch = cfscriptBlockCommentPattern.exec(documentText)) {
      const scriptBlockCommentText = scriptBlockCommentMatch[0];
      const scriptBlockCommentStartOffset = textOffset + scriptBlockCommentMatch.index;
      commentRanges.push(new import_vscode7.Range(
        document2.positionAt(scriptBlockCommentStartOffset),
        document2.positionAt(scriptBlockCommentStartOffset + scriptBlockCommentText.length)
      ));
    }
    let scriptLineCommentMatch = null;
    while (scriptLineCommentMatch = cfscriptLineCommentPattern.exec(documentText)) {
      const scriptLineCommentText = scriptLineCommentMatch[0];
      const scriptLineCommentStartOffset = textOffset + scriptLineCommentMatch.index;
      commentRanges.push(new import_vscode7.Range(
        document2.positionAt(scriptLineCommentStartOffset),
        document2.positionAt(scriptLineCommentStartOffset + scriptLineCommentText.length)
      ));
    }
  } else {
    let tagBlockCommentMatch = null;
    while (tagBlockCommentMatch = tagBlockCommentPattern.exec(documentText)) {
      const tagBlockCommentText = tagBlockCommentMatch[0];
      const tagBlockCommentStartOffset = textOffset + tagBlockCommentMatch.index;
      commentRanges.push(new import_vscode7.Range(
        document2.positionAt(tagBlockCommentStartOffset),
        document2.positionAt(tagBlockCommentStartOffset + tagBlockCommentText.length)
      ));
    }
    const cfScriptRanges = getCfScriptRanges(document2, docRange, _token, commentRanges);
    cfScriptRanges.forEach((range) => {
      const cfscriptCommentRanges = getCommentRangesByRegex(document2, true, range, _token);
      commentRanges = commentRanges.concat(cfscriptCommentRanges);
    });
  }
  return commentRanges;
}
function getCommentAndStringRangesIterated(document2, isScript = false, docRange, _token) {
  let commentRanges = [];
  let stringRanges = [];
  const documentText = document2.getText();
  let textOffsetStart = 0;
  let textOffsetEnd = documentText.length;
  let previousPosition;
  if (docRange && document2.validateRange(docRange)) {
    textOffsetStart = document2.offsetAt(docRange.start);
    textOffsetEnd = document2.offsetAt(docRange.end);
  }
  let commentContext = {
    inComment: false,
    activeComment: void 0,
    commentType: void 0,
    start: void 0,
    depth: 0
  };
  let lineText = "";
  let stringContext = {
    inString: false,
    activeStringDelimiter: void 0,
    start: void 0,
    embeddedCFML: false,
    embeddedCFMLStartPosition: void 0
  };
  let tagContext = {
    inStartTag: false,
    inEndTag: false,
    name: void 0,
    startOffset: void 0
  };
  const stringEmbeddedCFMLDelimiter = "#";
  const tagOpeningChars = "<cf";
  const tagClosingChar = ">";
  const stringEmbeddedCFMLRanges = [];
  let commentDepth = 0;
  for (let offset = textOffsetStart; offset < textOffsetEnd; offset++) {
    let position = document2.positionAt(offset);
    const characterAtPosition = documentText.charAt(offset);
    if (previousPosition && position.line !== previousPosition.line) {
      lineText = "";
    }
    lineText += characterAtPosition;
    if (commentContext.inComment) {
      if (commentContext.commentType === 0 /* Line */ && position.line !== previousPosition.line) {
        commentRanges.push(new import_vscode7.Range(commentContext.start, previousPosition));
        commentContext = {
          inComment: false,
          activeComment: void 0,
          commentType: void 0,
          start: void 0,
          depth: 0
        };
      } else if (commentContext.commentType === 1 /* Block */ && lineText.endsWith(commentContext.activeComment[1])) {
        if (commentContext.depth > 1) {
          commentDepth = commentContext.depth - 1;
          commentContext.depth = commentDepth;
        } else {
          commentRanges.push(new import_vscode7.Range(commentContext.start, document2.positionAt(offset + 1)));
          commentContext = {
            inComment: false,
            activeComment: void 0,
            commentType: void 0,
            start: void 0,
            depth: 0
          };
        }
      }
    } else if (stringContext.inString) {
      if (characterAtPosition === stringEmbeddedCFMLDelimiter) {
        if (stringContext.embeddedCFML) {
          stringContext.embeddedCFML = false;
          stringEmbeddedCFMLRanges.push(new import_vscode7.Range(stringContext.embeddedCFMLStartPosition, document2.positionAt(offset + 1)));
          stringContext.embeddedCFMLStartPosition = void 0;
        } else {
          let hashEscaped = false;
          let characterAtNextPosition;
          try {
            characterAtNextPosition = documentText.charAt(offset + 1);
            hashEscaped = characterAtNextPosition === stringEmbeddedCFMLDelimiter;
          } catch (e) {
          }
          if (hashEscaped) {
            offset++;
            lineText += characterAtNextPosition;
            position = document2.positionAt(offset);
          } else {
            stringContext.embeddedCFML = true;
            stringContext.embeddedCFMLStartPosition = position;
          }
        }
      } else if (!stringContext.embeddedCFML && characterAtPosition === stringContext.activeStringDelimiter) {
        let quoteEscaped = false;
        let characterAtNextPosition;
        try {
          characterAtNextPosition = documentText.charAt(offset + 1);
          quoteEscaped = characterAtNextPosition === stringContext.activeStringDelimiter;
        } catch (e) {
        }
        if (quoteEscaped) {
          offset++;
          lineText += characterAtNextPosition;
          position = document2.positionAt(offset);
        } else {
          stringRanges.push(new import_vscode7.Range(stringContext.start, document2.positionAt(offset + 1)));
          stringContext = {
            inString: false,
            activeStringDelimiter: void 0,
            start: void 0,
            embeddedCFML: false
          };
        }
      }
    } else {
      if (isScript) {
        if (isStringDelimiter(characterAtPosition)) {
          stringContext = {
            inString: true,
            activeStringDelimiter: characterAtPosition,
            start: position,
            embeddedCFML: false
          };
        } else if (lineText.endsWith(cfmlCommentRules.scriptLineComment)) {
          if (commentContext.activeComment !== cfmlCommentRules.tagBlockComment) {
            commentDepth = commentContext.depth + 1;
            commentContext = {
              inComment: true,
              activeComment: cfmlCommentRules.scriptLineComment,
              commentType: 0 /* Line */,
              start: previousPosition,
              depth: commentDepth
            };
          }
        } else if (lineText.endsWith(cfmlCommentRules.scriptBlockComment[0])) {
          if (commentContext.activeComment !== cfmlCommentRules.tagBlockComment) {
            commentDepth = commentContext.depth + 1;
            commentContext = {
              inComment: true,
              activeComment: cfmlCommentRules.scriptBlockComment,
              commentType: 1 /* Block */,
              start: previousPosition,
              depth: commentDepth
            };
          }
        }
      } else if (lineText.endsWith(cfmlCommentRules.tagBlockComment[0])) {
        commentDepth = commentContext.depth + 1;
        if (commentDepth > 1) {
          commentContext.depth = commentDepth;
        } else {
          commentContext = {
            inComment: true,
            activeComment: cfmlCommentRules.tagBlockComment,
            commentType: 1 /* Block */,
            start: position.translate(0, 1 - cfmlCommentRules.tagBlockComment[0].length),
            depth: commentDepth
          };
        }
      } else if (tagContext.inStartTag) {
        if (characterAtPosition === tagClosingChar) {
          tagContext = {
            inStartTag: false,
            inEndTag: false,
            name: void 0,
            startOffset: void 0
          };
        } else if (isStringDelimiter(characterAtPosition)) {
          stringContext = {
            inString: true,
            activeStringDelimiter: characterAtPosition,
            start: document2.positionAt(offset),
            embeddedCFML: false
          };
        }
      } else if (lineText.endsWith(tagOpeningChars)) {
        const tagName = document2.getText(document2.getWordRangeAtPosition(position));
        tagContext = {
          inStartTag: true,
          inEndTag: false,
          name: tagName,
          startOffset: offset - 2
        };
      }
    }
    previousPosition = position;
  }
  let cfScriptRanges = [];
  if (!isScript) {
    cfScriptRanges = getCfScriptRanges(document2, docRange, _token, commentRanges);
  }
  if (cfScriptRanges.length > 0) {
    cfScriptRanges.forEach((range) => {
      if (!isInRanges(commentRanges, range, false, _token)) {
        const cfscriptContextRanges = getCommentAndStringRangesIterated(document2, true, range, _token);
        commentRanges = commentRanges.concat(cfscriptContextRanges.commentRanges);
        if (cfscriptContextRanges.stringRanges) {
          stringRanges = stringRanges.concat(cfscriptContextRanges.stringRanges);
        }
      }
    });
  }
  return { commentRanges, stringRanges, stringEmbeddedCfmlRanges: stringEmbeddedCFMLRanges };
}
function getCssRanges(documentStateContext, range, _token) {
  const styleTags = parseTags(documentStateContext, "style", range, _token);
  return styleTags.map((tag) => {
    return tag.bodyRange;
  });
}
function getCfOutputRanges(documentStateContext, range, _token) {
  const cfoutputTags = parseTags(documentStateContext, "cfoutput", range, _token);
  return cfoutputTags.map((tag) => {
    return tag.bodyRange;
  });
}
function isInCfOutput(documentStateContext, position, _token) {
  return isInRanges(getCfOutputRanges(documentStateContext, void 0, _token), position, false, _token);
}
function isInCfScript(document2, position, _token) {
  return isInRanges(getCfScriptRanges(document2, void 0, _token), position, false, _token);
}
function isInCss(documentStateContext, position, _token) {
  return isInRanges(getCssRanges(documentStateContext, void 0, _token), position, false, _token);
}
function isInRanges(ranges, positionOrRange, ignoreEnds = false, _token) {
  return ranges.some((range) => {
    let isContained = range.contains(positionOrRange);
    if (ignoreEnds) {
      if (positionOrRange instanceof import_vscode7.Position) {
        isContained = isContained && !range.start.isEqual(positionOrRange) && !range.end.isEqual(positionOrRange);
      }
    }
    return isContained;
  });
}
function isContinuingExpression(prefix, _token) {
  return continuingExpressionPattern.test(prefix);
}
function isMemberExpression(prefix) {
  return memberExpressionPattern.test(prefix);
}
function getCharacterPair(character) {
  return characterPairs.find((charPair) => {
    return charPair[0] === character || charPair[1] === character;
  });
}
function getOpeningChar(closingChar) {
  const characterPair = getCharacterPair(closingChar);
  if (!characterPair) {
    return "";
  }
  return characterPair[0];
}
function isStringDelimiter(char) {
  switch (char) {
    case "'":
      return true;
    case '"':
      return true;
    default:
      return false;
  }
}
function getNextCharacterPosition(documentStateContext, startOffset, endOffset, char, includeChar = true, _token) {
  const document2 = documentStateContext.document;
  const documentText = documentStateContext.sanitizedDocumentText;
  let stringContext = {
    inString: false,
    activeStringDelimiter: void 0,
    start: void 0,
    embeddedCFML: false
  };
  const embeddedCFMLDelimiter = "#";
  const searchChar = Array.isArray(char) ? char : [char];
  const pairContext = [
    // braces
    {
      characterPair: characterPairs[0],
      unclosedPairCount: 0
    },
    // brackets
    {
      characterPair: characterPairs[1],
      unclosedPairCount: 0
    },
    // parens
    {
      characterPair: characterPairs[2],
      unclosedPairCount: 0
    }
  ];
  const openingPairs = pairContext.map((pairItem) => pairItem.characterPair[0]).filter((openingChar) => !searchChar.includes(openingChar));
  const closingPairs = pairContext.map((pairItem) => pairItem.characterPair[1]);
  const incrementUnclosedPair = (openingChar) => {
    pairContext.filter((pairItem) => {
      return openingChar === pairItem.characterPair[0];
    }).forEach((pairItem) => {
      pairItem.unclosedPairCount++;
    });
  };
  const decrementUnclosedPair = (closingChar) => {
    pairContext.filter((pairItem) => {
      return closingChar === pairItem.characterPair[1];
    }).forEach((pairItem) => {
      pairItem.unclosedPairCount--;
    });
  };
  const hasNoUnclosedPairs = () => {
    return pairContext.every((pairItem) => {
      return pairItem.unclosedPairCount === 0;
    });
  };
  for (let offset = startOffset; offset < endOffset; offset++) {
    const characterAtPosition = documentText.charAt(offset);
    if (stringContext.inString) {
      if (characterAtPosition === embeddedCFMLDelimiter) {
        stringContext.embeddedCFML = !stringContext.embeddedCFML;
      } else if (!stringContext.embeddedCFML && characterAtPosition === stringContext.activeStringDelimiter) {
        stringContext = {
          inString: false,
          activeStringDelimiter: void 0,
          start: void 0,
          embeddedCFML: false
        };
      }
    } else if (isStringDelimiter(characterAtPosition)) {
      stringContext = {
        inString: true,
        activeStringDelimiter: characterAtPosition,
        start: document2.positionAt(offset),
        embeddedCFML: false
      };
    } else if (searchChar.includes(characterAtPosition) && hasNoUnclosedPairs()) {
      if (includeChar) {
        return document2.positionAt(offset + 1);
      } else {
        return document2.positionAt(offset);
      }
    } else if (openingPairs.includes(characterAtPosition)) {
      incrementUnclosedPair(characterAtPosition);
    } else if (closingPairs.includes(characterAtPosition)) {
      decrementUnclosedPair(characterAtPosition);
    }
  }
  return document2.positionAt(endOffset);
}
function getClosingPosition(documentStateContext, initialOffset, closingChar, _token) {
  const openingChar = getOpeningChar(closingChar);
  const document2 = documentStateContext.document;
  const documentText = documentStateContext.sanitizedDocumentText;
  let unclosedPairs = 0;
  let stringContext = {
    inString: false,
    activeStringDelimiter: void 0,
    start: void 0,
    embeddedCFML: false
  };
  const embeddedCFMLDelimiter = "#";
  for (let offset = initialOffset; offset < documentText.length; offset++) {
    const characterAtPosition = documentText.charAt(offset);
    if (stringContext.inString) {
      if (characterAtPosition === embeddedCFMLDelimiter) {
        stringContext.embeddedCFML = !stringContext.embeddedCFML;
      } else if (!stringContext.embeddedCFML && characterAtPosition === stringContext.activeStringDelimiter) {
        stringContext = {
          inString: false,
          activeStringDelimiter: void 0,
          start: void 0,
          embeddedCFML: false
        };
      }
    } else if (isStringDelimiter(characterAtPosition)) {
      stringContext = {
        inString: true,
        activeStringDelimiter: characterAtPosition,
        start: document2.positionAt(offset),
        embeddedCFML: false
      };
    } else if (characterAtPosition === openingChar) {
      unclosedPairs++;
    } else if (characterAtPosition === closingChar) {
      if (unclosedPairs !== 0) {
        unclosedPairs--;
      } else {
        return document2.positionAt(offset + 1);
      }
    }
  }
  return document2.positionAt(initialOffset);
}
function isValidIdentifierPart(char) {
  return identPartPattern.test(char);
}
function isValidIdentifier(word) {
  return identPattern.test(word);
}
function getPrecedingIdentifierRange(documentStateContext, position, _token) {
  let identRange;
  let charStr = "";
  const iterator = new BackwardIterator(documentStateContext, position, _token);
  while (iterator.hasNext()) {
    const ch = iterator.next(_token);
    charStr = String.fromCharCode(ch);
    if (/\S/.test(charStr)) {
      break;
    }
  }
  if (isValidIdentifierPart(charStr)) {
    const currentWordRange = documentStateContext.document.getWordRangeAtPosition(iterator.getPosition());
    const currentWord = documentStateContext.document.getText(currentWordRange);
    if (isValidIdentifier(currentWord)) {
      identRange = currentWordRange;
    }
  }
  return identRange;
}
function getStartSigPosition(iterator, _token) {
  let parenNesting = 0;
  const document2 = iterator.getDocumentStateContext().document;
  const stringRanges = iterator.getDocumentStateContext().stringRanges;
  const stringEmbeddedCfmlRanges = iterator.getDocumentStateContext().stringEmbeddedCfmlRanges;
  while (iterator.hasNext()) {
    const ch = iterator.next(_token);
    if (stringRanges) {
      const position = iterator.getPosition();
      if (position === void 0) {
        break;
      }
      const position_translated = position.translate(0, 1);
      const stringRange = stringRanges.find((range) => {
        return range.contains(position_translated) && !range.end.isEqual(position_translated);
      });
      if (stringRange && !(stringEmbeddedCfmlRanges && isInRanges(stringEmbeddedCfmlRanges, position_translated, true, _token))) {
        iterator.setPosition(stringRange.start.translate(0, -1), _token);
        continue;
      }
    }
    switch (ch) {
      case LEFT_PAREN:
        parenNesting--;
        if (parenNesting < 0) {
          const candidatePosition = iterator.getPosition();
          while (iterator.hasNext()) {
            const nch = iterator.next(_token);
            const charStr = String.fromCharCode(nch);
            if (/\S/.test(charStr)) {
              const iterPos = iterator.getPosition();
              if (isValidIdentifierPart(charStr)) {
                const nameRange = document2.getWordRangeAtPosition(iterPos);
                const name = document2.getText(nameRange);
                if (isValidIdentifier(name) && !stringArrayIncludesIgnoreCase(["function", "if", "for", "while", "switch", "catch"], name)) {
                  return candidatePosition;
                }
              }
              iterator.setPosition(iterPos.translate(0, 1), _token);
              parenNesting++;
              break;
            }
          }
        }
        break;
      case RIGHT_PAREN:
        parenNesting++;
        break;
      case DOUBLE_QUOTE:
      case SINGLE_QUOTE:
        while (iterator.hasNext()) {
          const nch = iterator.next(_token);
          if (ch === nch) {
            break;
          }
        }
        break;
    }
  }
  return void 0;
}

// src/utils/textUtil.ts
function getQuote(quote) {
  let quoteStr = "";
  switch (quote) {
    case "single" /* Single */:
      quoteStr = "'";
      break;
    case "double" /* Double */:
      quoteStr = '"';
      break;
    default:
      break;
  }
  return quoteStr;
}
function equalsIgnoreCase(string1, string2) {
  if (string1 === void 0 || string2 === void 0) {
    return false;
  }
  return string1.toLowerCase() === string2.toLowerCase();
}
function textToMarkdownCompatibleString(text) {
  return text.replace(/\n(?!\n)/g, "  \n");
}
function textToMarkdownString(text) {
  return new import_vscode8.MarkdownString(textToMarkdownCompatibleString(text));
}
function escapeMarkdown(text) {
  return text.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
}
function replaceRangeWithSpaces(document2, ranges) {
  let documentText = document2.getText();
  const stringRegex = /\S/g;
  ranges.forEach((range) => {
    const rangeStartOffset = document2.offsetAt(range.start);
    const rangeEndOffset = document2.offsetAt(range.end);
    documentText = documentText.substring(0, rangeStartOffset) + documentText.substring(rangeStartOffset, rangeEndOffset).replace(stringRegex, " ") + documentText.substring(rangeEndOffset, documentText.length);
  });
  return documentText;
}
function getSanitizedDocumentText(document2, commentRanges, replaceComments = false, _token) {
  if (replaceComments !== true) {
    return document2.getText();
  }
  let documentCommentRanges;
  if (commentRanges) {
    documentCommentRanges = commentRanges;
  } else {
    const docIsScript = isCfcFile(document2, _token) && hasComponent(document2.uri, _token) && getComponent(document2.uri, _token).isScript;
    documentCommentRanges = getDocumentContextRanges(document2, docIsScript, void 0, false, _token).commentRanges;
  }
  return replaceRangeWithSpaces(document2, documentCommentRanges);
}
var schemePattern = /^[a-zA-Z][a-zA-Z0-9+\-.]+:/;
function isUri(str) {
  return str && schemePattern.test(str);
}

// src/entities/query.ts
init_process();
init_buffer();
var queryValuePattern = /^(?:["']\s*#\s*)?(query(?:New|Execute)?)\(/i;
var selectQueryPattern = /^\s*SELECT\s+([\s\S]+?)\s+FROM\s+[\s\S]+/i;
var queryObjectProperties = {
  "columnList": {
    detail: "(property) queryName.columnList",
    description: "Comma-separated list of the query columns."
  },
  "currentRow": {
    detail: "(property) queryName.currentRow",
    description: "Current row of query that is processing within a loop."
  },
  "recordCount": {
    detail: "(property) queryName.recordCount",
    description: "Number of records (rows) returned from the query."
  }
};
function getSelectColumnsFromQueryText(sql) {
  const selectColumnNames = new MySet();
  if (sql) {
    const selectQueryMatch = sql.match(selectQueryPattern);
    if (selectQueryMatch) {
      const columns = selectQueryMatch[1];
      columns.replace(/[[\]"`]/g, "").split(",").forEach((column) => {
        const splitColumn = column.trim().split(/[\s.]+/);
        if (splitColumn.length > 0) {
          const columnName = splitColumn.pop();
          if (columnName !== "*") {
            selectColumnNames.add(columnName);
          }
        }
      });
    }
  }
  return selectColumnNames;
}
function isQuery(variable) {
  return "selectColumnNames" in variable;
}

// src/entities/userFunction.ts
init_process();
init_buffer();
var import_vscode12 = require("vscode");

// src/entities/function.ts
init_process();
init_buffer();

// src/entities/signature.ts
init_process();
init_buffer();

// src/entities/parameter.ts
init_process();
init_buffer();

// src/utils/fileUtil.ts
init_process();
init_buffer();
var import_vscode9 = require("vscode");
function filterDirectories(files) {
  return files.filter((file) => {
    if (file[1] === import_vscode9.FileType.Directory) {
      return true;
    } else {
      return false;
    }
  });
}
function filterComponents(files) {
  return files.filter((file) => {
    if (file[1] === import_vscode9.FileType.File && /\.cfc$/gi.test(file[0])) {
      return true;
    } else {
      return false;
    }
  });
}
function resolveBaseName(path, ext) {
  let base = Utils.basename(import_vscode9.Uri.parse(path));
  if (ext) {
    base = base.replace(ext, "");
  }
  return base;
}
function uriBaseName(path, ext) {
  let base = Utils.basename(path);
  if (ext) {
    base = base.replace(ext, "");
  }
  return base;
}
async function fileExists(path) {
  try {
    await import_vscode9.workspace.fs.stat(import_vscode9.Uri.file(path));
    return true;
  } catch {
    return false;
  }
}
async function uriExists(path) {
  try {
    await import_vscode9.workspace.fs.stat(path);
    return true;
  } catch {
    return false;
  }
}
async function uriStat(path) {
  return await import_vscode9.workspace.fs.stat(path);
}
async function resolveDottedPaths(dotPath, baseUri) {
  const paths = [];
  const normalizedPath = dotPath.replace(/\./g, "/");
  const localPath = resolveRelativePath(baseUri, normalizedPath);
  if (await fileExists(localPath)) {
    paths.push(localPath);
    if (normalizedPath.length > 0) {
      return paths;
    }
  }
  const rootPath = resolveRootPath(baseUri, normalizedPath);
  if (rootPath && await fileExists(rootPath)) {
    paths.push(rootPath);
    if (normalizedPath.length > 0) {
      return paths;
    }
  }
  const customMappingPaths = resolveCustomMappingPaths(baseUri, normalizedPath);
  for (const mappedPath of customMappingPaths) {
    if (await fileExists(mappedPath)) {
      paths.push(mappedPath);
      if (normalizedPath.length > 0) {
        return paths;
      }
    }
  }
  return paths;
}
function resolveRelativePath(baseUri, appendingPath) {
  return import_vscode9.Uri.joinPath(Utils.dirname(baseUri), appendingPath).fsPath;
}
function resolveRootPath(baseUri, appendingPath) {
  const root = import_vscode9.workspace.getWorkspaceFolder(baseUri);
  if (!root) {
    return void 0;
  }
  return import_vscode9.Uri.joinPath(root.uri, appendingPath).fsPath;
}
function resolveCustomMappingPaths(baseUri, appendingPath) {
  const customMappingPaths = [];
  const cfmlMappings = import_vscode9.workspace.getConfiguration("cfml", baseUri).get("mappings", []);
  const normalizedPath = appendingPath.replace(/\\/g, "/");
  for (const cfmlMapping of cfmlMappings) {
    const slicedLogicalPath = cfmlMapping.logicalPath.slice(1);
    const logicalPathStartPattern = new RegExp(`^${slicedLogicalPath}(?:/|$)`);
    if (logicalPathStartPattern.test(normalizedPath)) {
      const directoryPath = cfmlMapping.isPhysicalDirectoryPath === void 0 || cfmlMapping.isPhysicalDirectoryPath ? cfmlMapping.directoryPath : resolveRootPath(baseUri, cfmlMapping.directoryPath);
      const mappedPath = import_vscode9.Uri.joinPath(import_vscode9.Uri.parse(directoryPath), appendingPath.slice(slicedLogicalPath.length)).fsPath;
      customMappingPaths.push(mappedPath);
    }
  }
  return customMappingPaths;
}
async function findUpWorkspaceFile(name, workingDir) {
  let directory = Utils.dirname(workingDir);
  const workspaceDir = import_vscode9.workspace.getWorkspaceFolder(workingDir);
  while (directory) {
    const filePath = import_vscode9.Uri.joinPath(directory, name);
    try {
      const stats = await import_vscode9.workspace.fs.stat(filePath);
      if (stats.type === import_vscode9.FileType.File) {
        return filePath;
      }
    } catch {
    }
    if (directory.fsPath === workspaceDir.uri.fsPath) {
      break;
    }
    directory = Utils.joinPath(directory, "../");
  }
  return void 0;
}

// src/entities/parameter.ts
var namedParameterPattern = /^\s*([\w$]+)\s*=(?!=)/;
function getParameterName(param) {
  return param.name.split("=")[0];
}
function constructParameterLabel(param) {
  let paramLabel = getParameterName(param);
  if (!param.required) {
    paramLabel += "?";
  }
  if (param.dataType) {
    let paramType = param.dataType.toLowerCase();
    if (param.dataType === "component" /* Component */) {
      const arg = param;
      if (arg.dataTypeComponentUri) {
        paramType = uriBaseName(arg.dataTypeComponentUri, COMPONENT_EXT);
      }
    }
    paramLabel += ": " + paramType;
  } else if (param.type) {
    paramLabel += ": " + param.type;
  } else {
    paramLabel += ": unknown";
  }
  return paramLabel;
}

// src/entities/signature.ts
function constructSignatureLabelParamsPrefix(func) {
  return func.name;
}
function constructSignatureLabelParamsPart(parameters) {
  return parameters.map(constructParameterLabel).join(", ");
}
function getSignatureParamsLabelOffsetTuples(parameters) {
  let endIdx = -2;
  return parameters.map(constructParameterLabel).map((paramLabel) => {
    const startIdx = endIdx + 2;
    endIdx = startIdx + paramLabel.length;
    return [startIdx, endIdx];
  });
}

// src/entities/function.ts
var import_vscode10 = require("vscode");
var functionSuffixPattern = /^\s*\(([^)]*)/;
function constructSyntaxString(func, signatureIndex = 0) {
  const funcSignatureParamsLabel = func.signatures.length !== 0 ? constructSignatureLabelParamsPart(func.signatures[signatureIndex].parameters) : "";
  const returnType = getReturnTypeString(func);
  return `${constructSignatureLabelParamsPrefix(func)}(${funcSignatureParamsLabel}): ${returnType}`;
}
function getFunctionSuffixPattern() {
  return functionSuffixPattern;
}
function getReturnTypeString(func) {
  let returnType;
  if ("returnTypeUri" in func) {
    const userFunction = func;
    if (userFunction.returnTypeUri) {
      returnType = uriBaseName(userFunction.returnTypeUri, COMPONENT_EXT);
    }
  }
  if (!returnType) {
    returnType = func.returntype ? func.returntype : "any" /* Any */;
  }
  return returnType;
}
function getScriptFunctionArgRanges(documentStateContext, argsRange, separatorChar = ",", _token) {
  const argRanges = [];
  const document2 = documentStateContext.document;
  const argsEndOffset = document2.offsetAt(argsRange.end);
  let argStartPosition = argsRange.start;
  while (argStartPosition.isBeforeOrEqual(argsRange.end)) {
    const argSeparatorPos = getNextCharacterPosition(documentStateContext, document2.offsetAt(argStartPosition), argsEndOffset, separatorChar, false, _token);
    const argRange = new import_vscode10.Range(argStartPosition, argSeparatorPos);
    argRanges.push(argRange);
    argStartPosition = argSeparatorPos.translate(0, 1);
  }
  return argRanges;
}

// src/entities/docblock.ts
init_process();
init_buffer();
var import_vscode11 = require("vscode");
var DOC_PATTERN = /(\n\s*(?:\*[ \t]*)?(?:@(\w+)(?:\.(\w+))?)?[ \t]*)(\S.*)/gi;
function parseDocBlock(document2, docRange) {
  const docBlockStr = document2.getText(docRange);
  const docBlock = [];
  let prevKey = "hint";
  let activeKey = "hint";
  let prevSubkey = void 0;
  let activeSubkey = void 0;
  let activeValue = void 0;
  let activeValueStartOffset = 0;
  let activeValueEndOffset = 0;
  let docBlockMatches = null;
  const docBlockOffset = document2.offsetAt(docRange.start);
  while (docBlockMatches = DOC_PATTERN.exec(docBlockStr)) {
    const valuePrefix = docBlockMatches[1];
    const metadataKey = docBlockMatches[2];
    const metadataSubkey = docBlockMatches[3];
    const metadataValue = docBlockMatches[4];
    const docValueOffset = docBlockOffset + docBlockMatches.index + valuePrefix.length;
    if (metadataKey) {
      activeKey = metadataKey.toLowerCase();
      if (metadataSubkey) {
        activeSubkey = metadataSubkey.toLowerCase();
      } else {
        activeSubkey = void 0;
      }
    } else if (metadataValue === "*") {
      continue;
    }
    if ((activeKey !== prevKey || activeSubkey !== prevSubkey) && activeValue) {
      docBlock.push({
        key: prevKey,
        subkey: prevSubkey,
        value: activeValue,
        valueRange: new import_vscode11.Range(document2.positionAt(activeValueStartOffset), document2.positionAt(activeValueEndOffset))
      });
      prevKey = activeKey;
      prevSubkey = activeSubkey;
      activeValue = void 0;
    }
    if (activeValue) {
      activeValue += " " + metadataValue;
    } else {
      activeValueStartOffset = docValueOffset;
      activeValue = metadataValue;
    }
    activeValueEndOffset = docValueOffset + metadataValue.length;
  }
  if (activeValue) {
    docBlock.push({
      key: activeKey,
      subkey: activeSubkey,
      value: activeValue,
      valueRange: new import_vscode11.Range(document2.positionAt(activeValueStartOffset), document2.positionAt(activeValueEndOffset))
    });
  }
  return docBlock;
}
function getKeyPattern(keyName) {
  return new RegExp(`@${keyName}\\s+(\\S+)`, "i");
}

// src/entities/userFunction.ts
var scriptFunctionPattern = /((\/\*\*((?:\*(?!\/)|[^*])*)\*\/\s+)?(?:\b(private|package|public|remote|static|final|abstract|default)\s+)?(?:\b(private|package|public|remote|static|final|abstract|default)\s+)?)(?:\b([A-Za-z0-9_.$]+)\s+)?function\s+([_$a-zA-Z][$\w]*)\s*\(/gi;
var scriptFunctionArgPattern = /((?:(required)\s+)?(?:\b([\w.]+)\b\s+)?(\b[_$a-zA-Z][$\w]*\b)(?:\s*=\s*(\{[^}]*\}|\[[^\]]*\]|\([^)]*\)|(?:(?!\b\w+\s*=).)+))?)(.*)?/i;
var functionValuePattern = /^function\s*\(/i;
var userFunctionBooleanAttributes = new MySet([
  "static",
  "abstract",
  "final"
]);
var accessArr = ["public", "private", "package", "remote"];
var Access = /* @__PURE__ */ ((Access2) => {
  Access2["Public"] = "public";
  Access2["Private"] = "private";
  Access2["Package"] = "package";
  Access2["Remote"] = "remote";
  return Access2;
})(Access || {});
((Access2) => {
  function valueOf(access) {
    switch (access.toLowerCase()) {
      case "public":
        return "public" /* Public */;
      case "private":
        return "private" /* Private */;
      case "package":
        return "package" /* Package */;
      case "remote":
        return "remote" /* Remote */;
      default:
        return "public" /* Public */;
    }
  }
  Access2.valueOf = valueOf;
})(Access || (Access = {}));
var argumentAttributeNames = new MySet([
  "name",
  "type",
  "default",
  "displayname",
  "hint",
  "required",
  "restargsource",
  "restargname"
]);
function isUserFunctionVariable(variable) {
  return "signature" in variable;
}
var ComponentFunctions = class extends MyMap {
};
async function parseScriptFunctions(documentStateContext, _token) {
  const document2 = documentStateContext.document;
  const userFunctions = [];
  const componentBody = documentStateContext.sanitizedDocumentText;
  let scriptFunctionMatch = null;
  while (scriptFunctionMatch = scriptFunctionPattern.exec(componentBody)) {
    const fullMatch = scriptFunctionMatch[0];
    const returnTypePrefix = scriptFunctionMatch[1];
    const fullDocBlock = scriptFunctionMatch[2];
    const scriptDocBlockContent = scriptFunctionMatch[3];
    const modifier1 = scriptFunctionMatch[4];
    const modifier2 = scriptFunctionMatch[5];
    const returnType = scriptFunctionMatch[6];
    const functionName = scriptFunctionMatch[7];
    const functionNameStartOffset = scriptFunctionMatch.index + fullMatch.lastIndexOf(functionName);
    const functionNameRange = new import_vscode12.Range(
      document2.positionAt(functionNameStartOffset),
      document2.positionAt(functionNameStartOffset + functionName.length)
    );
    const argumentsStartOffset = scriptFunctionMatch.index + fullMatch.length;
    const argumentsEndPosition = getClosingPosition(documentStateContext, argumentsStartOffset, ")", _token);
    const functionArgsRange = new import_vscode12.Range(
      document2.positionAt(argumentsStartOffset),
      argumentsEndPosition.translate(0, -1)
    );
    let functionBodyStartPos;
    let functionEndPosition;
    let functionAttributeRange;
    let functionBodyRange;
    if (documentStateContext.component && documentStateContext.component.isInterface && !equalsIgnoreCase(modifier1, "default") && !equalsIgnoreCase(modifier2, "default") || equalsIgnoreCase(modifier1, "abstract") || equalsIgnoreCase(modifier2, "abstract")) {
      functionBodyStartPos = getNextCharacterPosition(documentStateContext, document2.offsetAt(argumentsEndPosition), componentBody.length - 1, ";", false, _token);
      functionEndPosition = functionBodyStartPos;
      functionAttributeRange = new import_vscode12.Range(
        argumentsEndPosition,
        functionEndPosition
      );
    } else {
      functionBodyStartPos = getNextCharacterPosition(documentStateContext, document2.offsetAt(argumentsEndPosition), componentBody.length - 1, "{", true, _token);
      functionEndPosition = getClosingPosition(documentStateContext, document2.offsetAt(functionBodyStartPos), "}", _token);
      try {
        functionAttributeRange = new import_vscode12.Range(
          argumentsEndPosition,
          functionBodyStartPos.translate(0, -1)
        );
      } catch (ex) {
        console.warn(`Error parsing ${document2.uri.fsPath}:${functionName}`);
        functionAttributeRange = new import_vscode12.Range(
          argumentsEndPosition,
          functionBodyStartPos
        );
      }
      functionBodyRange = new import_vscode12.Range(
        functionBodyStartPos,
        functionEndPosition.translate(0, -1)
      );
    }
    const functionRange = new import_vscode12.Range(
      document2.positionAt(scriptFunctionMatch.index),
      functionEndPosition
    );
    let userFunction = {
      access: "public" /* Public */,
      static: false,
      abstract: false,
      final: false,
      name: functionName,
      description: "",
      returntype: "any" /* Any */,
      signatures: [],
      nameRange: functionNameRange,
      bodyRange: functionBodyRange,
      location: new import_vscode12.Location(document2.uri, functionRange),
      isImplicit: false
    };
    if (returnType) {
      const [dataType, returnTypeUri] = await DataType.getDataTypeAndUri(returnType, document2.uri, _token);
      if (dataType) {
        userFunction.returntype = dataType;
        if (returnTypeUri) {
          userFunction.returnTypeUri = returnTypeUri;
        }
        const returnTypeOffset = scriptFunctionMatch.index + returnTypePrefix.length;
        userFunction.returnTypeRange = new import_vscode12.Range(
          document2.positionAt(returnTypeOffset),
          document2.positionAt(returnTypeOffset + returnType.length)
        );
      }
    }
    if (modifier1) {
      const modifier1Type = parseModifier(modifier1);
      if (modifier1Type === "access") {
        userFunction.access = Access.valueOf(modifier1);
      } else {
        userFunction[modifier1Type] = true;
      }
    }
    if (modifier2) {
      const modifier2Type = parseModifier(modifier2);
      if (modifier2Type === "access") {
        userFunction.access = Access.valueOf(modifier2);
      } else {
        userFunction[modifier2Type] = true;
      }
    }
    const parsedAttributes = parseAttributes(document2, functionAttributeRange);
    userFunction = await assignFunctionAttributes(userFunction, parsedAttributes, _token);
    let scriptDocBlockParsed = [];
    if (fullDocBlock) {
      scriptDocBlockParsed = parseDocBlock(
        document2,
        new import_vscode12.Range(
          document2.positionAt(scriptFunctionMatch.index + 3),
          document2.positionAt(scriptFunctionMatch.index + 3 + scriptDocBlockContent.length)
        )
      );
      await Promise.all(scriptDocBlockParsed.map(async (docElem) => {
        if (docElem.key === "access") {
          userFunction.access = Access.valueOf(docElem.value);
        } else if (docElem.key === "returntype") {
          const [dataType, uri] = await DataType.getDataTypeAndUri(docElem.value, document2.uri, _token);
          if (dataType) {
            userFunction.returntype = dataType;
            const returnTypeKeyMatch = getKeyPattern("returnType").exec(fullDocBlock);
            if (returnTypeKeyMatch) {
              const returnTypePath = returnTypeKeyMatch[1];
              const returnTypeOffset = scriptFunctionMatch.index + returnTypeKeyMatch.index;
              userFunction.returnTypeRange = new import_vscode12.Range(
                document2.positionAt(returnTypeOffset),
                document2.positionAt(returnTypeOffset + returnTypePath.length)
              );
            }
            if (uri) {
              userFunction.returnTypeUri = uri;
            }
          }
        } else if (userFunctionBooleanAttributes.has(docElem.key)) {
          userFunction[docElem.key] = DataType.isTruthy(docElem.value);
        } else if (docElem.key === "hint") {
          userFunction.description = docElem.value;
        } else if (docElem.key === "description" && userFunction.description === "") {
          userFunction.description = docElem.value;
        }
      }));
    }
    const signature = {
      parameters: await parseScriptFunctionArgs(documentStateContext, functionArgsRange, scriptDocBlockParsed, _token)
    };
    userFunction.signatures = [signature];
    userFunctions.push(userFunction);
  }
  return userFunctions;
}
async function parseScriptFunctionArgs(documentStateContext, argsRange, docBlock, _token) {
  const args = [];
  const document2 = documentStateContext.document;
  const documentUri = document2.uri;
  const scriptArgRanges = getScriptFunctionArgRanges(documentStateContext, argsRange, ",", _token);
  await Promise.all(scriptArgRanges.map(async (argRange) => {
    const argText = documentStateContext.sanitizedDocumentText.slice(document2.offsetAt(argRange.start), document2.offsetAt(argRange.end));
    const argStartOffset = document2.offsetAt(argRange.start);
    const scriptFunctionArgMatch = scriptFunctionArgPattern.exec(argText);
    if (scriptFunctionArgMatch) {
      const fullArg = scriptFunctionArgMatch[0];
      const attributePrefix = scriptFunctionArgMatch[1];
      const argRequired = scriptFunctionArgMatch[2];
      const argType = scriptFunctionArgMatch[3];
      const argName = scriptFunctionArgMatch[4];
      let argDefault = scriptFunctionArgMatch[5];
      const argAttributes = scriptFunctionArgMatch[6];
      const argOffset = argStartOffset + scriptFunctionArgMatch.index;
      if (!argName) {
        return;
      }
      let argDefaultAndAttributesLen = 0;
      if (argDefault) {
        argDefaultAndAttributesLen += argDefault.length;
      }
      let parsedArgAttributes;
      if (argAttributes) {
        argDefaultAndAttributesLen += argAttributes.length;
        const functionArgPrefixOffset = argOffset + attributePrefix.length;
        const functionArgRange = new import_vscode12.Range(
          document2.positionAt(functionArgPrefixOffset),
          document2.positionAt(functionArgPrefixOffset + argDefaultAndAttributesLen)
        );
        parsedArgAttributes = parseAttributes(document2, functionArgRange, argumentAttributeNames);
      }
      let removedDefaultAndAttributes = fullArg;
      if (argDefaultAndAttributesLen > 0) {
        removedDefaultAndAttributes = fullArg.slice(0, -argDefaultAndAttributesLen);
      }
      const argNameOffset = argOffset + removedDefaultAndAttributes.lastIndexOf(argName);
      let convertedArgType = "any" /* Any */;
      let typeUri;
      let argTypeRange;
      if (argType) {
        const [dataType, returnTypeUri] = await DataType.getDataTypeAndUri(argType, documentUri, _token);
        if (dataType) {
          convertedArgType = dataType;
          if (returnTypeUri) {
            typeUri = returnTypeUri;
          }
          const argTypeOffset = fullArg.indexOf(argType);
          argTypeRange = new import_vscode12.Range(
            document2.positionAt(argOffset + argTypeOffset),
            document2.positionAt(argOffset + argTypeOffset + argType.length)
          );
        }
      }
      const argument = {
        name: argName,
        type: argType,
        required: argRequired ? true : false,
        dataType: convertedArgType,
        description: "",
        nameRange: new import_vscode12.Range(
          document2.positionAt(argNameOffset),
          document2.positionAt(argNameOffset + argName.length)
        )
      };
      if (argDefault) {
        argDefault = argDefault.trim();
        if (argDefault.length > 1 && /['"]/.test(argDefault.charAt(0)) && /['"]/.test(argDefault.charAt(argDefault.length - 1))) {
          argDefault = argDefault.slice(1, -1).trim();
        }
        if (argDefault.length > 2 && argDefault.startsWith("#") && argDefault.endsWith("#") && !argDefault.slice(1, -1).includes("#")) {
          argDefault = argDefault.slice(1, -1).trim();
        }
        argument.default = argDefault;
      }
      if (typeUri) {
        argument.dataTypeComponentUri = typeUri;
      }
      if (argTypeRange) {
        argument.dataTypeRange = argTypeRange;
      }
      if (parsedArgAttributes) {
        const attributes = [];
        parsedArgAttributes.forEach((attribute) => {
          attributes.push(attribute);
        });
        await Promise.all(attributes.map(async (attr) => {
          const argAttrName = attr.name;
          const argAttrVal = attr.value;
          if (argAttrName === "required") {
            argument.required = DataType.isTruthy(argAttrVal);
          } else if (argAttrName === "hint") {
            argument.description = argAttrVal;
          } else if (argAttrName === "default") {
            argument.default = argAttrVal;
          } else if (argAttrName === "type") {
            const [dataType, dataTypeComponentUri] = await DataType.getDataTypeAndUri(argAttrVal, documentUri, _token);
            if (dataType) {
              argument.dataType = dataType;
              if (dataTypeComponentUri) {
                argument.dataTypeComponentUri = dataTypeComponentUri;
              }
              argument.dataTypeRange = new import_vscode12.Range(
                attr.valueRange.start,
                attr.valueRange.end
              );
            }
          }
        }));
      }
      docBlock = docBlock.filter((docElem) => {
        return equalsIgnoreCase(docElem.key, argument.name);
      });
      await Promise.all(docBlock.map(async (docElem) => {
        if (docElem.subkey === "required") {
          argument.required = DataType.isTruthy(docElem.value);
        } else if (!docElem.subkey || docElem.subkey === "hint") {
          argument.description = docElem.value;
        } else if (docElem.subkey === "default") {
          argument.default = docElem.value;
        } else if (docElem.subkey === "type") {
          const [dataType, dataTypeComponentUri] = await DataType.getDataTypeAndUri(docElem.value, documentUri, _token);
          if (dataType) {
            argument.dataType = dataType;
            if (dataTypeComponentUri) {
              argument.dataTypeComponentUri = dataTypeComponentUri;
            }
            argument.dataTypeRange = new import_vscode12.Range(
              docElem.valueRange.start,
              docElem.valueRange.end
            );
          }
        }
      }));
      args.push(argument);
    }
  }));
  return args;
}
async function parseTagFunctions(documentStateContext, _token) {
  const userFunctions = [];
  const documentUri = documentStateContext.document.uri;
  const parsedFunctionTags = parseTags(documentStateContext, "cffunction", void 0, _token);
  await Promise.all(parsedFunctionTags.map(async (tag) => {
    const functionRange = tag.tagRange;
    const functionBodyRange = tag.bodyRange;
    const parsedAttributes = tag.attributes;
    if (!parsedAttributes.has("name") || !parsedAttributes.get("name").value) {
      return;
    }
    const userFunction = {
      access: "public" /* Public */,
      static: false,
      abstract: false,
      final: false,
      name: parsedAttributes.get("name").value,
      description: "",
      returntype: "any" /* Any */,
      signatures: [],
      nameRange: parsedAttributes.get("name").valueRange,
      bodyRange: functionBodyRange,
      location: new import_vscode12.Location(documentUri, functionRange),
      isImplicit: false
    };
    await assignFunctionAttributes(userFunction, parsedAttributes, _token);
    const signature = {
      parameters: await parseTagFunctionArguments(documentStateContext, functionBodyRange, _token)
    };
    userFunction.signatures = [signature];
    userFunctions.push(userFunction);
  }));
  return userFunctions;
}
async function parseTagFunctionArguments(documentStateContext, functionBodyRange, _token) {
  const args = [];
  const documentUri = documentStateContext.document.uri;
  if (functionBodyRange === void 0 || functionBodyRange === null) {
    return args;
  }
  const parsedArgumentTags = parseTags(documentStateContext, "cfargument", functionBodyRange, _token);
  await Promise.all(parsedArgumentTags.map(async (tag) => {
    const parsedAttributes = tag.attributes;
    const argumentAttributes = processArgumentAttributes(parsedAttributes);
    if (!argumentAttributes) {
      return;
    }
    const argNameRange = parsedAttributes.get("name").valueRange;
    let argRequired;
    if (argumentAttributes.required) {
      argRequired = DataType.isTruthy(argumentAttributes.required);
    } else {
      argRequired = false;
    }
    const argType = argumentAttributes.type;
    let convertedArgType = "any" /* Any */;
    let typeUri;
    let argTypeRange;
    if (argType) {
      const [dataType, uri] = await DataType.getDataTypeAndUri(argType, documentUri, _token);
      if (dataType) {
        convertedArgType = dataType;
        if (uri) {
          typeUri = uri;
        }
        argTypeRange = parsedAttributes.get("type").valueRange;
        argTypeRange = new import_vscode12.Range(
          argTypeRange.start,
          argTypeRange.end
        );
      }
    }
    const argument = {
      name: argumentAttributes.name,
      type: argType,
      required: argRequired,
      dataType: convertedArgType,
      description: argumentAttributes.hint ? argumentAttributes.hint : "",
      nameRange: argNameRange
    };
    let argDefault = argumentAttributes.default;
    if (argDefault) {
      argDefault = argDefault.trim();
      if (argDefault.length > 1 && /['"]/.test(argDefault.charAt(0)) && /['"]/.test(argDefault.charAt(argDefault.length - 1))) {
        argDefault = argDefault.slice(1, -1).trim();
      }
      if (argDefault.length > 2 && argDefault.startsWith("#") && argDefault.endsWith("#") && !argDefault.slice(1, -1).includes("#")) {
        argDefault = argDefault.slice(1, -1).trim();
      }
      argument.default = argDefault;
    }
    if (typeUri) {
      argument.dataTypeComponentUri = typeUri;
    }
    if (argTypeRange) {
      argument.dataTypeRange = argTypeRange;
    }
    args.push(argument);
  }));
  return args;
}
async function assignFunctionAttributes(userFunction, functionAttributes, _token) {
  const attributes = [];
  functionAttributes.forEach((attribute) => {
    attributes.push(attribute);
  });
  await Promise.all(attributes.map(async (attribute) => {
    const attrName = attribute.name;
    if (attribute.value) {
      const attrVal = attribute.value;
      if (attrName === "access") {
        userFunction.access = Access.valueOf(attrVal);
      } else if (attrName === "returntype") {
        const [returntype, returnTypeUri] = await DataType.getDataTypeAndUri(attrVal, userFunction.location.uri, _token);
        if (returntype) {
          userFunction.returntype = returntype;
          if (returnTypeUri) {
            userFunction.returnTypeUri = returnTypeUri;
          }
          const returnTypeRange = functionAttributes.get("returntype").valueRange;
          userFunction.returnTypeRange = new import_vscode12.Range(
            returnTypeRange.start,
            returnTypeRange.end
          );
        }
      } else if (userFunctionBooleanAttributes.has(attrName)) {
        userFunction[attrVal] = DataType.isTruthy(attrVal);
      } else if (attrName === "hint") {
        userFunction.description = attrVal;
      } else if (attrName === "description" && userFunction.description === "") {
        userFunction.description = attrVal;
      }
    }
  }));
  return userFunction;
}
function processArgumentAttributes(attributes) {
  const attributeObj = {};
  attributes.forEach((attr, attrKey) => {
    attributeObj[attrKey] = attr.value;
  });
  if (!attributeObj["name"]) {
    return null;
  }
  return attributeObj;
}
async function getLocalVariables(func, documentStateContext, isScript, _token) {
  if (!func || !func.bodyRange) {
    return [];
  }
  const allVariables = await parseVariableAssignments(documentStateContext, isScript, func.bodyRange, _token);
  return allVariables.filter((variable) => {
    return variable.scope === "local" /* Local */;
  });
}
function parseModifier(modifier) {
  if (accessArr.includes(modifier.toLowerCase())) {
    return "access";
  }
  return modifier;
}
async function getFunctionFromPrefix(documentPositionStateContext, functionKey, docPrefix, _token) {
  let foundFunction;
  if (docPrefix === void 0 || docPrefix === null) {
    docPrefix = documentPositionStateContext.docPrefix;
  }
  const varPrefixMatch = getVariableExpressionPrefixPattern().exec(docPrefix);
  if (varPrefixMatch) {
    const varMatchText = varPrefixMatch[0];
    const varScope = varPrefixMatch[2];
    const varQuote = varPrefixMatch[3];
    const varName = varPrefixMatch[4];
    let dotSeparatedCount = 2;
    if (varScope && !varQuote) {
      dotSeparatedCount++;
    }
    if (varMatchText.split(".").length === dotSeparatedCount) {
      if (documentPositionStateContext.isCfcFile && !varScope && equalsIgnoreCase(varName, "super")) {
        if (documentPositionStateContext.component && documentPositionStateContext.component.extends, _token) {
          const baseComponent = getComponent(documentPositionStateContext.component.extends, _token);
          if (baseComponent) {
            foundFunction = getFunctionFromComponent(baseComponent, functionKey, documentPositionStateContext.document.uri, void 0, false, _token);
          }
        }
      } else if (documentPositionStateContext.isCfcFile && !varScope && (equalsIgnoreCase(varName, "variables" /* Variables */) || equalsIgnoreCase(varName, "this" /* This */))) {
        let disallowedAccess;
        if (equalsIgnoreCase(varName, "this" /* This */)) {
          disallowedAccess = "private" /* Private */;
        }
        const disallowImplicit = equalsIgnoreCase(varName, "variables" /* Variables */);
        foundFunction = getFunctionFromComponent(documentPositionStateContext.component, functionKey, documentPositionStateContext.document.uri, disallowedAccess, disallowImplicit, _token);
      } else if (documentPositionStateContext.isCfmFile && !varScope && equalsIgnoreCase(varName, "variables" /* Variables */)) {
        foundFunction = await getFunctionFromTemplate(documentPositionStateContext, functionKey, _token);
      } else {
        const allDocumentVariableAssignments = await collectDocumentVariableAssignments(documentPositionStateContext, _token);
        let variableAssignments = allDocumentVariableAssignments;
        const fileName = uriBaseName(documentPositionStateContext.document.uri);
        if (varScope && fileName !== "Application.cfm") {
          const applicationDocVariables = await getApplicationVariables(documentPositionStateContext.document.uri);
          variableAssignments = variableAssignments.concat(applicationDocVariables);
        }
        const scopeVal = varScope ? Scope.valueOf(varScope) : void 0;
        const foundVar = getBestMatchingVariable(variableAssignments, varName, scopeVal);
        if (foundVar && foundVar.dataTypeComponentUri) {
          const foundVarComponent = getComponent(foundVar.dataTypeComponentUri, _token);
          if (foundVarComponent) {
            foundFunction = getFunctionFromComponent(foundVarComponent, functionKey, documentPositionStateContext.document.uri, void 0, false, _token);
          }
        }
      }
    }
  } else if (documentPositionStateContext.isCfmFile) {
    foundFunction = await getFunctionFromTemplate(documentPositionStateContext, functionKey, _token);
  } else if (documentPositionStateContext.component) {
    foundFunction = getFunctionFromComponent(documentPositionStateContext.component, functionKey, documentPositionStateContext.document.uri, void 0, false, _token);
  }
  return foundFunction;
}
function getFunctionFromComponent(component, lowerFunctionName, callerUri, disallowedAccess, disallowImplicit = false, _token) {
  const validFunctionAccess = new MySet(["remote" /* Remote */, "public" /* Public */]);
  if (hasComponent(callerUri, _token)) {
    const callerComponent = getComponent(callerUri, _token);
    if (isSubcomponentOrEqual(callerComponent, component, _token)) {
      validFunctionAccess.add("private" /* Private */);
      validFunctionAccess.add("package" /* Package */);
    }
  }
  if (!validFunctionAccess.has("package" /* Package */) && Utils.dirname(callerUri).fsPath === Utils.dirname(component.uri).fsPath) {
    validFunctionAccess.add("package" /* Package */);
  }
  if (disallowedAccess && validFunctionAccess.has(disallowedAccess)) {
    validFunctionAccess.delete(disallowedAccess);
  }
  let currComponent = component;
  while (currComponent) {
    if (currComponent.functions.has(lowerFunctionName)) {
      const foundFunc = currComponent.functions.get(lowerFunctionName);
      if (validFunctionAccess.has(foundFunc.access) && !(disallowImplicit && foundFunc.isImplicit)) {
        return foundFunc;
      }
    }
    if (currComponent.extends) {
      currComponent = getComponent(currComponent.extends, _token);
    } else {
      currComponent = void 0;
    }
  }
  return void 0;
}
async function getFunctionFromTemplate(documentStateContext, lowerFunctionName, _token) {
  const tagFunctions = await parseTagFunctions(documentStateContext, _token);
  const cfscriptRanges = getCfScriptRanges(documentStateContext.document, void 0, _token);
  const scriptFunctions = await parseScriptFunctions(documentStateContext, _token);
  const allTemplateFunctions = tagFunctions.concat(scriptFunctions.filter((func) => {
    return isInRanges(cfscriptRanges, func.location.range.start, false, _token);
  }));
  return allTemplateFunctions.find((func) => {
    return equalsIgnoreCase(func.name, lowerFunctionName);
  });
}
function variablesToUserFunctions(variables) {
  return variables.map((variable) => {
    const userFun = {
      name: variable.identifier,
      description: variable.description ? variable.description : "",
      returntype: "any" /* Any */,
      // Get this from variable
      access: void 0,
      // Define?
      static: false,
      abstract: false,
      final: variable.final,
      nameRange: variable.declarationLocation.range,
      bodyRange: void 0,
      // Define
      signatures: [variable.signature],
      location: variable.declarationLocation,
      // Range is only declaration
      isImplicit: false
    };
    return userFun;
  });
}

// src/entities/dataType.ts
var DataType = /* @__PURE__ */ ((DataType2) => {
  DataType2["Any"] = "any";
  DataType2["Array"] = "array";
  DataType2["Binary"] = "binary";
  DataType2["Boolean"] = "boolean";
  DataType2["Component"] = "component";
  DataType2["Date"] = "date";
  DataType2["Function"] = "function";
  DataType2["GUID"] = "guid";
  DataType2["Numeric"] = "numeric";
  DataType2["Query"] = "query";
  DataType2["String"] = "string";
  DataType2["Struct"] = "struct";
  DataType2["UUID"] = "uuid";
  DataType2["VariableName"] = "variablename";
  DataType2["Void"] = "void";
  DataType2["XML"] = "xml";
  return DataType2;
})(DataType || {});
((DataType2) => {
  function valueOf(dataType) {
    switch (dataType.toLowerCase()) {
      case "any":
        return "any" /* Any */;
      case "array":
        return "array" /* Array */;
      case "binary":
        return "binary" /* Binary */;
      case "boolean":
        return "boolean" /* Boolean */;
      case "component":
        return "component" /* Component */;
      case "date":
        return "date" /* Date */;
      case "function":
        return "function" /* Function */;
      case "guid":
        return "guid" /* GUID */;
      case "numeric":
        return "numeric" /* Numeric */;
      case "query":
        return "query" /* Query */;
      case "string":
        return "string" /* String */;
      case "struct":
        return "struct" /* Struct */;
      case "uuid":
        return "uuid" /* UUID */;
      case "variablename":
        return "variablename" /* VariableName */;
      case "void":
        return "void" /* Void */;
      case "xml":
        return "xml" /* XML */;
      default:
        return "any" /* Any */;
    }
  }
  DataType2.valueOf = valueOf;
  function paramTypeToDataType(paramType) {
    switch (paramType.toLowerCase()) {
      case "any":
        return "any" /* Any */;
      case "array":
        return "array" /* Array */;
      case "binary":
        return "binary" /* Binary */;
      case "boolean":
        return "boolean" /* Boolean */;
      /*
      case "component":
        return DataType.Component;
      */
      case "date":
      case "eurodate":
      case "usdate":
        return "date" /* Date */;
      case "function":
        return "function" /* Function */;
      case "guid":
        return "guid" /* GUID */;
      case "numeric":
      case "float":
      case "integer":
      case "range":
        return "numeric" /* Numeric */;
      case "query":
        return "query" /* Query */;
      case "string":
      case "creditcard":
      case "email":
      case "regex":
      case "regular_expression":
      case "ssn":
      case "social_security_number":
      case "telephone":
      case "url":
      case "zipcode":
        return "string" /* String */;
      case "struct":
        return "struct" /* Struct */;
      case "uuid":
        return "uuid" /* UUID */;
      case "variablename":
        return "variablename" /* VariableName */;
      case "xml":
        return "xml" /* XML */;
      default:
        return "any" /* Any */;
    }
  }
  DataType2.paramTypeToDataType = paramTypeToDataType;
  function isNumeric(numStr) {
    let numStrTest = numStr;
    if (/^(["'])[0-9.]+\1$/.test(numStrTest)) {
      numStrTest = numStrTest.slice(1, -1);
    }
    return !isNaN(parseFloat(numStrTest)) && isFinite(parseFloat(numStrTest));
  }
  DataType2.isNumeric = isNumeric;
  function isStringLiteral(str) {
    const trimmedStr = str.trim();
    return trimmedStr.length > 1 && (trimmedStr.startsWith("'") && trimmedStr.endsWith("'") || trimmedStr.startsWith('"') && trimmedStr.endsWith('"'));
  }
  DataType2.isStringLiteral = isStringLiteral;
  function getStringLiteralValue(str) {
    let trimmedStr = str.trim();
    const stringDelimiter = trimmedStr.charAt(0);
    trimmedStr = trimmedStr.slice(1, -1);
    let stringValue = "";
    let previousChar = "";
    let currentChar = "";
    for (let idx = 0; idx < trimmedStr.length; idx++) {
      currentChar = trimmedStr.charAt(idx);
      if (previousChar === stringDelimiter && currentChar === stringDelimiter) {
        previousChar = "";
        continue;
      }
      stringValue += currentChar;
      previousChar = currentChar;
    }
    return stringValue;
  }
  DataType2.getStringLiteralValue = getStringLiteralValue;
  function isDataType(dataType) {
    return dataType && (equalsIgnoreCase(dataType, "any") || valueOf(dataType) !== "any" /* Any */);
  }
  function isTruthy(boolStr) {
    if (equalsIgnoreCase(boolStr, "true") || equalsIgnoreCase(boolStr, "yes")) {
      return true;
    }
    if (isNumeric(boolStr)) {
      return parseFloat(boolStr) !== 0;
    }
    return false;
  }
  DataType2.isTruthy = isTruthy;
  async function getDataTypeAndUri(dataType, documentUri, _token) {
    if (!dataType) {
      return [null, null];
    }
    if (isDataType(dataType)) {
      return [valueOf(dataType), null];
    } else {
      const typeUri = await componentPathToUri(dataType, documentUri, _token);
      if (typeUri) {
        return ["component" /* Component */, typeUri];
      }
    }
    return [null, null];
  }
  DataType2.getDataTypeAndUri = getDataTypeAndUri;
  async function inferDataTypeFromValue(value, documentUri, _token) {
    if (value.length === 0) {
      return ["string" /* String */, null];
    }
    if (/^(['"])?(false|true|no|yes)\1$/i.test(value)) {
      return ["boolean" /* Boolean */, null];
    }
    if (isNumeric(value)) {
      return ["numeric" /* Numeric */, null];
    }
    if (/^(["'])(?!#)/.test(value)) {
      return ["string" /* String */, null];
    }
    if (functionValuePattern.test(value)) {
      return ["function" /* Function */, null];
    }
    if (/^(?:["']\s*#\s*)?(arrayNew\(|\[)/i.test(value)) {
      return ["array" /* Array */, null];
    }
    if (queryValuePattern.test(value)) {
      return ["query" /* Query */, null];
    }
    if (/^(?:["']\s*#\s*)?(structNew\(|\{)/i.test(value)) {
      return ["struct" /* Struct */, null];
    }
    if (/^(?:["']\s*#\s*)?(createDate(Time)?\()/i.test(value)) {
      return ["date" /* Date */, null];
    }
    const objectMatch1 = /^(?:["']\s*#\s*)?(createObject\((["'])component\2\s*,\s*(["'])([^'"]+)\3)/i.exec(value);
    if (objectMatch1) {
      const [dataType, uri] = await getDataTypeAndUri(objectMatch1[4], documentUri, _token);
      if (dataType) {
        return [dataType, uri];
      }
      return ["component" /* Component */, null];
    }
    const objectMatch2 = /^(?:["']\s*#\s*)?(new\s+(["'])?([^\s'"(]+)\2\()/i.exec(value);
    if (objectMatch2) {
      const [dataType, uri] = await getDataTypeAndUri(objectMatch2[3], documentUri, _token);
      if (dataType) {
        return [dataType, uri];
      }
      return ["component" /* Component */, null];
    }
    return ["any" /* Any */, null];
  }
  DataType2.inferDataTypeFromValue = inferDataTypeFromValue;
})(DataType || (DataType = {}));

// src/entities/variable.ts
var import_vscode13 = require("vscode");
var cfscriptVariableAssignmentPattern = /(((?:^|[;{}]|\bfor\s*\(|\bcase\s+.+?:|\bdefault\s*:|\bfinal)\s*(\bvar\s+)?(?:(application|arguments|attributes|caller|cffile|cgi|client|cookie|flash|form|local|request|server|session|static|this|thistag|thread|url|variables)\s*(?:\.\s*|\[\s*(['"])))?)([a-zA-Z_$][$\w]*)\5\s*\]?(?:\s*(?:\.\s*|\[\s*(['"])?)[$\w]+\7(?:\s*\])?)*\s*=\s*)([^=][^;]*)/gi;
var forInVariableAssignmentPattern = /((?:\bfor\s*\()\s*(\bvar\s+)?(?:(application|arguments|attributes|caller|cffile|cgi|client|cookie|flash|form|local|request|server|session|static|this|thistag|thread|url|variables)\s*(?:\.\s*|\[\s*(['"])))?)([a-zA-Z_$][$\w]*)\4\s*\]?(?:\s*(?:\.\s*|\[\s*(['"])?)[$\w]+\6(?:\s*\])?)*(?:\s+in\s+)/gi;
var tagVariableAssignmentPattern = /((<cfset\s+(?:final\s+)?(var\s+)?(?:(application|arguments|attributes|caller|cffile|cgi|client|cookie|flash|form|local|request|server|session|static|this|thistag|thread|url|variables)\s*(?:\.\s*|\[\s*(['"])))?)([a-zA-Z_$][$\w]*)\5\s*\]?(?:\s*(?:\.\s*|\[\s*(['"])?)[$\w]+\7(?:\s*\])?)*\s*=\s*)([^=][^>]*)/gi;
var tagParamPattern = getTagPattern("cfparam");
var scriptParamPattern = /\b(cfparam\s*\(\s*|param\s+)([^;]*);/gi;
var variableExpressionPattern = /\b((application|arguments|attributes|caller|cffile|cgi|client|cookie|flash|form|local|request|server|session|static|this|thistag|thread|url|variables)\s*(?:\.\s*|\[\s*(['"])))?([a-zA-Z_$][$\w]*)\3\s*\]?(?:\s*(?:\.\s*|\[\s*(['"])?)[$\w]+\5(?:\s*\])?)*/i;
var variableExpressionPrefixPattern = /\b((application|arguments|attributes|caller|cffile|cgi|client|cookie|flash|form|local|request|server|session|static|this|thistag|thread|url|variables)\s*(?:\.\s*|\[\s*(['"])))?([a-zA-Z_$][$\w]*)\3\s*\]?(?:\s*(?:\.\s*|\[\s*(['"])?)[$\w]+\5(?:\s*\])?)*\s*(?:\.\s*|\[\s*['"]?)$/i;
var outputVariableTags = {
  "cfchart": [
    {
      attributeName: "name",
      dataType: "binary" /* Binary */
    }
  ],
  "cfcollection": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  "cfdbinfo": [
    {
      attributeName: "name",
      dataType: "any" /* Any */
    }
  ],
  "cfdirectory": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  "cfdocument": [
    {
      attributeName: "name",
      dataType: "binary" /* Binary */
    }
  ],
  "cfexecute": [
    {
      attributeName: "variable",
      dataType: "string" /* String */
    }
  ],
  "cffeed": [
    {
      attributeName: "name",
      dataType: "struct" /* Struct */
    },
    {
      attributeName: "query",
      dataType: "query" /* Query */
    }
  ],
  "cffile": [
    {
      attributeName: "result",
      dataType: "struct" /* Struct */
    },
    {
      attributeName: "variable",
      dataType: "any" /* Any */
    }
  ],
  "cfftp": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    },
    {
      attributeName: "result",
      dataType: "struct" /* Struct */
    }
  ],
  "cfhtmltopdf": [
    {
      attributeName: "name",
      dataType: "binary" /* Binary */
    }
  ],
  "cfhttp": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    },
    {
      attributeName: "result",
      dataType: "struct" /* Struct */
    }
  ],
  "cfimage": [
    {
      attributeName: "name",
      dataType: "any" /* Any */
    },
    {
      attributeName: "structName",
      dataType: "struct" /* Struct */
    }
  ],
  "cfimap": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  // cfinvoke dataType could be taken from function return type
  "cfinvoke": [
    {
      attributeName: "returnvariable",
      dataType: "any" /* Any */
    }
  ],
  "cfldap": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  // cfloop dataTypes are conditional
  "cfloop": [
    {
      attributeName: "index",
      dataType: "any" /* Any */
    },
    {
      attributeName: "item",
      dataType: "any" /* Any */
    }
  ],
  "cfntauthenticate": [
    {
      attributeName: "result",
      dataType: "any" /* Any */
    }
  ],
  // cfobject excluded and handled elsewhere
  // cfparam excluded and handled elsewhere
  "cfpdf": [
    {
      attributeName: "name",
      dataType: "binary" /* Binary */
    }
  ],
  "cfpop": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  "cfprocparam": [
    {
      attributeName: "variable",
      dataType: "any" /* Any */
    }
  ],
  "cfprocresult": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  // cfproperty excluded and handled elsewhere
  "cfquery": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    },
    {
      attributeName: "result",
      dataType: "struct" /* Struct */
    }
  ],
  "cfregistry": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    },
    {
      attributeName: "variable",
      dataType: "any" /* Any */
    }
  ],
  "cfreport": [
    {
      attributeName: "name",
      dataType: "any" /* Any */
    }
  ],
  "cfsavecontent": [
    {
      attributeName: "variable",
      dataType: "string" /* String */
    }
  ],
  "cfsearch": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    }
  ],
  "cfsharepoint": [
    {
      attributeName: "name",
      dataType: "any" /* Any */
    }
  ],
  "cfspreadsheet": [
    {
      attributeName: "name",
      dataType: "any" /* Any */
    },
    {
      attributeName: "query",
      dataType: "query" /* Query */
    }
  ],
  "cfstoredproc": [
    {
      attributeName: "result",
      dataType: "struct" /* Struct */
    }
  ],
  "cfwddx": [
    {
      attributeName: "output",
      dataType: "any" /* Any */
    }
  ],
  "cfxml": [
    {
      attributeName: "variable",
      dataType: "xml" /* XML */
    }
  ],
  "cfzip": [
    {
      attributeName: "name",
      dataType: "query" /* Query */
    },
    {
      attributeName: "variable",
      dataType: "any" /* Any */
    }
  ]
};
function usesConstantConvention(ident) {
  return ident === ident.toUpperCase();
}
function getVariablePrefixPattern(variableName) {
  const pattern = `(?:^|[^.\\s])\\s*(?:\\b${variableName}\\s*(?:\\.\\s*|\\[\\s*['"]))$`;
  return new RegExp(pattern, "i");
}
function getVariableExpressionPrefixPattern() {
  return variableExpressionPrefixPattern;
}
async function parseVariableAssignments(documentStateContext, isScript, docRange, _token) {
  let variables = [];
  const document2 = documentStateContext.document;
  const documentUri = document2.uri;
  let textOffset = 0;
  let documentText = documentStateContext.sanitizedDocumentText;
  if (docRange) {
    if (document2.validateRange(docRange)) {
      textOffset = document2.offsetAt(docRange.start);
      documentText = documentText.slice(textOffset, document2.offsetAt(docRange.end));
    } else {
      return variables;
    }
  }
  const cfmlEngineSettings = import_vscode13.workspace.getConfiguration("cfml.engine");
  const userEngineName = CFMLEngineName.valueOf(cfmlEngineSettings.get("name"));
  const userEngine = new CFMLEngine(userEngineName, cfmlEngineSettings.get("version"));
  if (isCfcFile(document2, _token)) {
    const comp = getComponent(document2.uri, _token);
    if (comp) {
      comp.functions.forEach((func) => {
        if (!func.isImplicit && (!docRange || func.bodyRange && func.bodyRange.contains(docRange))) {
          if (func.signatures) {
            func.signatures.forEach((signature) => {
              signature.parameters.forEach((param) => {
                const argName = param.name;
                if (getMatchingVariables(variables, argName, "arguments" /* Arguments */).length === 0) {
                  variables.push({
                    identifier: argName,
                    dataType: param.dataType,
                    scope: "arguments" /* Arguments */,
                    final: false,
                    description: param.description,
                    declarationLocation: new import_vscode13.Location(
                      document2.uri,
                      param.nameRange
                    ),
                    initialValue: param.default
                  });
                }
              });
            });
          }
        }
      });
    }
  }
  let paramMatch = null;
  const paramPattern = isScript ? scriptParamPattern : tagParamPattern;
  while (paramMatch = paramPattern.exec(documentText)) {
    const paramPrefix = paramMatch[1];
    const paramAttr = paramMatch[2];
    const paramAttributeRange = new import_vscode13.Range(
      document2.positionAt(textOffset + paramMatch.index + paramPrefix.length),
      document2.positionAt(textOffset + paramMatch.index + paramPrefix.length + paramAttr.length)
    );
    const parsedAttr = parseAttributes(document2, paramAttributeRange);
    if (!parsedAttr.has("name") || !parsedAttr.get("name").value) {
      continue;
    }
    let paramType = "any" /* Any */;
    let paramTypeComponentUri = void 0;
    if (parsedAttr.has("type") && !!parsedAttr.get("type").value) {
      paramType = DataType.paramTypeToDataType(parsedAttr.get("type").value);
    } else if (parsedAttr.has("default") && parsedAttr.get("default").value !== void 0) {
      const [dataType, uri] = await DataType.inferDataTypeFromValue(parsedAttr.get("default").value, documentUri, _token);
      paramType = dataType;
      paramTypeComponentUri = uri;
    }
    const paramName = parsedAttr.get("name").value;
    const paramNameMatch = variableExpressionPattern.exec(paramName);
    if (!paramNameMatch) {
      continue;
    }
    const varNamePrefix = paramNameMatch[1];
    const varNamePrefixLen = varNamePrefix ? varNamePrefix.length : 0;
    const scope = paramNameMatch[2];
    const varName = paramNameMatch[4];
    let scopeVal = "unknown" /* Unknown */;
    if (scope) {
      scopeVal = Scope.valueOf(scope);
    }
    const varRangeStart = parsedAttr.get("name").valueRange.start.translate(0, varNamePrefixLen);
    const varRange = new import_vscode13.Range(
      varRangeStart,
      varRangeStart.translate(0, varName.length)
    );
    const matchingVars = getMatchingVariables(variables, varName, scopeVal);
    if (matchingVars.length > 0) {
      if (matchingVars.length > 1 || matchingVars[0].declarationLocation.range.start.isBefore(varRange.start)) {
        continue;
      } else {
        variables = variables.filter((variable) => {
          return variable !== matchingVars[0];
        });
      }
    }
    const initialValue = parsedAttr.has("default") ? parsedAttr.get("default").value : void 0;
    variables.push({
      identifier: varName,
      dataType: paramType,
      dataTypeComponentUri: paramTypeComponentUri,
      scope: scopeVal,
      final: false,
      declarationLocation: new import_vscode13.Location(
        document2.uri,
        varRange
      ),
      initialValue
    });
  }
  let variableMatch = null;
  const variableAssignmentPattern = isScript ? cfscriptVariableAssignmentPattern : tagVariableAssignmentPattern;
  while (variableMatch = variableAssignmentPattern.exec(documentText)) {
    const initValuePrefix = variableMatch[1];
    const varPrefix = variableMatch[2];
    const varScope = variableMatch[3];
    const scope = variableMatch[4];
    const varName = variableMatch[6];
    const initValue = variableMatch[8];
    let scopeVal = "unknown" /* Unknown */;
    if (scope) {
      scopeVal = Scope.valueOf(scope);
    } else if (varScope) {
      scopeVal = "local" /* Local */;
    }
    const varMatchStartOffset = textOffset + variableMatch.index + varPrefix.length;
    const varRange = new import_vscode13.Range(
      document2.positionAt(varMatchStartOffset),
      document2.positionAt(varMatchStartOffset + varName.length)
    );
    const matchingVars = getMatchingVariables(variables, varName, scopeVal);
    if (matchingVars.length > 0) {
      if (matchingVars.length > 1 || matchingVars[0].declarationLocation.range.start.isBefore(varRange.start)) {
        continue;
      } else {
        variables = variables.filter((variable) => {
          return variable !== matchingVars[0];
        });
      }
    }
    if (scopeVal === "unknown" /* Unknown */) {
      scopeVal = "variables" /* Variables */;
    }
    const [dataType, dataTypeComponentUri] = await DataType.inferDataTypeFromValue(initValue, documentUri, _token);
    let thisVar = {
      identifier: varName,
      dataType,
      dataTypeComponentUri,
      scope: scopeVal,
      final: false,
      declarationLocation: new import_vscode13.Location(
        document2.uri,
        varRange
      )
    };
    if (dataType === "query" /* Query */) {
      let valueMatch = null;
      if (valueMatch = queryValuePattern.exec(initValue)) {
        const fullValueMatch = valueMatch[0];
        const functionName = valueMatch[1];
        const initValueOffset = textOffset + variableMatch.index + initValuePrefix.length;
        const paramsStartOffset = initValueOffset + valueMatch.index + fullValueMatch.length;
        const paramsEndOffset = initValueOffset + initValue.length - 1;
        const paramsRange = new import_vscode13.Range(document2.positionAt(paramsStartOffset), document2.positionAt(paramsEndOffset));
        const paramRanges = getScriptFunctionArgRanges(documentStateContext, paramsRange, ";", _token);
        if (paramRanges.length > 0) {
          const firstParamText = document2.getText(paramRanges[0]);
          if (DataType.isStringLiteral(firstParamText)) {
            const firstParamVal = DataType.getStringLiteralValue(firstParamText);
            let columns;
            if (equalsIgnoreCase(functionName, "queryNew")) {
              columns = new MySet(firstParamVal.split(","));
            } else {
              columns = getSelectColumnsFromQueryText(firstParamVal);
            }
            if (columns.size > 0) {
              const query = thisVar;
              query.selectColumnNames = columns;
              thisVar = query;
            }
          }
        }
      }
    } else if (dataType === "function" /* Function */) {
      const userFunction = thisVar;
      let valueMatch = null;
      if (valueMatch = functionValuePattern.exec(initValue)) {
        const fullValueMatch = valueMatch[0];
        const initValueOffset = textOffset + variableMatch.index + initValuePrefix.length;
        const paramsStartOffset = initValueOffset + valueMatch.index + fullValueMatch.length;
        const paramsEndPosition = getClosingPosition(documentStateContext, paramsStartOffset, ")", _token);
        const paramsRange = new import_vscode13.Range(
          document2.positionAt(paramsStartOffset),
          paramsEndPosition.translate(0, -1)
        );
        userFunction.signature = {
          parameters: await parseScriptFunctionArgs(documentStateContext, paramsRange, [], _token)
        };
        thisVar = userFunction;
      }
    }
    thisVar.initialValue = initValue;
    variables.push(thisVar);
  }
  if (!isScript || userEngine.supportsScriptTags()) {
    const foundOutputVarTags = new MySet();
    let cfTagMatch = null;
    const cfTagPattern = isScript ? getCfScriptTagPatternIgnoreBody() : getCfStartTagPattern();
    while (cfTagMatch = cfTagPattern.exec(documentText)) {
      const tagName = cfTagMatch[2].toLowerCase();
      if (!foundOutputVarTags.has(tagName) && Object.prototype.hasOwnProperty.call(outputVariableTags, tagName)) {
        foundOutputVarTags.add(tagName);
      }
    }
    foundOutputVarTags.forEach((tagName) => {
      const tagOutputAttributes = outputVariableTags[tagName];
      const parsedOutputVariableTags = tagName === "cfquery" ? parseTags(documentStateContext, tagName, docRange, _token) : parseStartTags(documentStateContext, tagName, isScript, docRange, _token);
      parsedOutputVariableTags.forEach((tag) => {
        const tagAttributes = tag.attributes;
        tagOutputAttributes.filter((tagOutputAttribute) => {
          return tagAttributes.has(tagOutputAttribute.attributeName);
        }).forEach((tagOutputAttribute) => {
          const attributeName = tagOutputAttribute.attributeName;
          const attributeVal = tagAttributes.get(attributeName).value;
          if (!attributeVal) {
            return;
          }
          const varExpressionMatch = variableExpressionPattern.exec(attributeVal);
          if (!varExpressionMatch) {
            return;
          }
          const varNamePrefix = varExpressionMatch[1];
          const varNamePrefixLen = varNamePrefix ? varNamePrefix.length : 0;
          const scope = varExpressionMatch[2];
          const varName = varExpressionMatch[4];
          let scopeVal = "unknown" /* Unknown */;
          if (scope) {
            scopeVal = Scope.valueOf(scope);
          }
          const varRangeStart = tagAttributes.get(attributeName).valueRange.start.translate(0, varNamePrefixLen);
          const varRange = new import_vscode13.Range(
            varRangeStart,
            varRangeStart.translate(0, varName.length)
          );
          const matchingVars = getMatchingVariables(variables, varName, scopeVal);
          if (matchingVars.length > 0) {
            if (matchingVars.length > 1 || matchingVars[0].declarationLocation.range.start.isBefore(varRange.start)) {
              return;
            } else {
              variables = variables.filter((variable) => {
                return variable !== matchingVars[0];
              });
            }
          }
          if (scopeVal === "unknown" /* Unknown */) {
            scopeVal = "variables" /* Variables */;
          }
          let outputVar = {
            identifier: varName,
            dataType: tagOutputAttribute.dataType,
            scope: scopeVal,
            final: false,
            declarationLocation: new import_vscode13.Location(
              document2.uri,
              varRange
            )
          };
          if (tagName === "cfquery" && "bodyRange" in tag) {
            const queryTag = tag;
            const bodyText = document2.getText(queryTag.bodyRange);
            const columns = getSelectColumnsFromQueryText(bodyText);
            if (columns.size > 0) {
              const query = outputVar;
              query.selectColumnNames = columns;
              outputVar = query;
            }
          }
          variables.push(outputVar);
        });
      });
    });
  }
  if (!isScript) {
    const cfScriptRanges = getCfScriptRanges(document2, docRange, _token);
    for (const range of cfScriptRanges) {
      const cfscriptVars = await parseVariableAssignments(documentStateContext, true, range, _token);
      cfscriptVars.forEach((scriptVar) => {
        const matchingVars = getMatchingVariables(variables, scriptVar.identifier, scriptVar.scope);
        if (matchingVars.length === 0) {
          variables.push(scriptVar);
        } else if (matchingVars.length === 1 && scriptVar.declarationLocation.range.start.isBefore(matchingVars[0].declarationLocation.range.start)) {
          const matchingIndex = variables.findIndex((value) => {
            return value.scope === scriptVar.scope && equalsIgnoreCase(value.identifier, scriptVar.identifier);
          });
          if (matchingIndex !== -1) {
            variables[matchingIndex] = scriptVar;
          }
        }
      });
    }
  } else {
    let forInVariableMatch = null;
    while (forInVariableMatch = forInVariableAssignmentPattern.exec(documentText)) {
      const varPrefix = forInVariableMatch[1];
      const varScope = forInVariableMatch[2];
      const scope = forInVariableMatch[3];
      const varName = forInVariableMatch[5];
      let scopeVal = "unknown" /* Unknown */;
      if (scope) {
        scopeVal = Scope.valueOf(scope);
      } else if (varScope) {
        scopeVal = "local" /* Local */;
      }
      const varMatchStartOffset = textOffset + forInVariableMatch.index + varPrefix.length;
      const varRange = new import_vscode13.Range(
        document2.positionAt(varMatchStartOffset),
        document2.positionAt(varMatchStartOffset + varName.length)
      );
      const matchingVars = getMatchingVariables(variables, varName, scopeVal);
      if (matchingVars.length > 0) {
        if (matchingVars.length > 1 || matchingVars[0].declarationLocation.range.start.isBefore(varRange.start)) {
          continue;
        } else {
          variables = variables.filter((variable) => {
            return variable !== matchingVars[0];
          });
        }
      }
      if (scopeVal === "unknown" /* Unknown */) {
        scopeVal = "variables" /* Variables */;
      }
      variables.push({
        identifier: varName,
        dataType: "any" /* Any */,
        scope: scopeVal,
        final: false,
        declarationLocation: new import_vscode13.Location(
          document2.uri,
          varRange
        )
      });
    }
  }
  return variables;
}
function propertiesToVariables(properties, documentUri) {
  const propertyVars = [];
  properties.forEach((prop) => {
    propertyVars.push({
      identifier: prop.name,
      dataType: prop.dataType,
      dataTypeComponentUri: prop.dataTypeComponentUri,
      scope: "variables" /* Variables */,
      final: false,
      declarationLocation: new import_vscode13.Location(documentUri, prop.propertyRange),
      description: prop.description
    });
  });
  return propertyVars;
}
function argumentsToVariables(args, documentUri) {
  return args.map((arg) => {
    const argVar = {
      identifier: arg.name,
      dataType: arg.dataType,
      dataTypeComponentUri: arg.dataTypeComponentUri,
      scope: "arguments" /* Arguments */,
      final: false,
      declarationLocation: new import_vscode13.Location(documentUri, arg.nameRange),
      description: arg.description
    };
    return argVar;
  });
}
function getBestMatchingVariable(variables, varName, varScope) {
  let foundVar;
  if (varScope) {
    foundVar = variables.find((currentVar) => {
      return currentVar.scope === varScope && equalsIgnoreCase(currentVar.identifier, varName);
    });
    if (!foundVar && unscopedPrecedence.includes(varScope)) {
      foundVar = variables.find((currentVar) => {
        return currentVar.scope === "unknown" /* Unknown */ && equalsIgnoreCase(currentVar.identifier, varName);
      });
    }
  } else {
    for (const checkScope of unscopedPrecedence) {
      foundVar = variables.find((currentVar) => {
        return currentVar.scope === checkScope && equalsIgnoreCase(currentVar.identifier, varName);
      });
      if (foundVar) {
        return foundVar;
      }
    }
    foundVar = variables.find((currentVar) => {
      return currentVar.scope === "unknown" /* Unknown */ && equalsIgnoreCase(currentVar.identifier, varName);
    });
  }
  return foundVar;
}
function getMatchingVariables(variables, varName, scope = "unknown" /* Unknown */) {
  let checkScopes;
  if (scope === "unknown" /* Unknown */) {
    checkScopes = ["local" /* Local */, "arguments" /* Arguments */, "variables" /* Variables */, "unknown" /* Unknown */];
  } else {
    checkScopes = [scope];
  }
  return variables.filter((variable) => {
    return checkScopes.includes(variable.scope) && equalsIgnoreCase(variable.identifier, varName);
  });
}
async function getApplicationVariables(baseUri) {
  let applicationVariables = [];
  const applicationUri = await getApplicationUri(baseUri);
  if (applicationUri) {
    const cachedApplicationVariables = getCachedApplicationVariables(applicationUri);
    if (cachedApplicationVariables) {
      applicationVariables = cachedApplicationVariables;
    }
  }
  return applicationVariables;
}
function getServerVariables(baseUri, _token) {
  let serverVariables = [];
  const serverUri = getServerUri(baseUri, _token);
  if (serverUri) {
    serverVariables = getCachedServerVariables(serverUri);
  }
  return serverVariables;
}
async function collectDocumentVariableAssignments(documentPositionStateContext, _token) {
  let allVariableAssignments = [];
  if (documentPositionStateContext.isCfmFile) {
    const docVariableAssignments = await parseVariableAssignments(documentPositionStateContext, false, void 0, _token);
    allVariableAssignments = allVariableAssignments.concat(docVariableAssignments);
  } else if (documentPositionStateContext.isCfcFile) {
    const thisComponent = documentPositionStateContext.component;
    if (thisComponent) {
      const documentUri = documentPositionStateContext.document.uri;
      const componentProperties = thisComponent.properties;
      allVariableAssignments = allVariableAssignments.concat(propertiesToVariables(componentProperties, documentUri));
      let currComponent = thisComponent;
      let componentVariables = [];
      while (currComponent) {
        const currComponentVariables = currComponent.variables.filter((variable) => {
          return !componentVariables.some((existingVariable) => {
            return existingVariable.scope === variable.scope && equalsIgnoreCase(existingVariable.identifier, variable.identifier);
          });
        });
        componentVariables = componentVariables.concat(currComponentVariables);
        const initMethod = currComponent.initmethod ? currComponent.initmethod.toLowerCase() : "init";
        if (currComponent.functions.has(initMethod)) {
          const currInitFunc = currComponent.functions.get(initMethod);
          if (currInitFunc.bodyRange) {
            const currInitVariables = (await parseVariableAssignments(documentPositionStateContext, currComponent.isScript, currInitFunc.bodyRange, _token)).filter((variable) => {
              return ["variables" /* Variables */, "this" /* This */].includes(variable.scope) && !componentVariables.some((existingVariable) => {
                return existingVariable.scope === variable.scope && equalsIgnoreCase(existingVariable.identifier, variable.identifier);
              });
            });
            componentVariables = componentVariables.concat(currInitVariables);
          }
        }
        allVariableAssignments = allVariableAssignments.concat(componentVariables);
        if (currComponent.extends) {
          currComponent = getComponent(currComponent.extends, _token);
        } else {
          currComponent = void 0;
        }
      }
      let functionArgs = [];
      thisComponent.functions.filter((func) => {
        return func.bodyRange && func.bodyRange.contains(documentPositionStateContext.position) && func.signatures && func.signatures.length !== 0;
      }).forEach((func) => {
        func.signatures.forEach((signature) => {
          functionArgs = signature.parameters;
        });
      });
      allVariableAssignments = allVariableAssignments.concat(argumentsToVariables(functionArgs, documentUri));
      let localVariables = [];
      const filteredFunctions = thisComponent.functions.filter((func) => {
        return func.bodyRange && func.bodyRange.contains(documentPositionStateContext.position);
      });
      for (const [, func] of filteredFunctions) {
        const tmp = await getLocalVariables(func, documentPositionStateContext, thisComponent.isScript, _token);
        localVariables = localVariables.concat(tmp);
      }
      allVariableAssignments = allVariableAssignments.concat(localVariables);
    }
  }
  return allVariableAssignments;
}
function getVariableTypeString(variable) {
  let varType = variable.dataType;
  if (variable.dataTypeComponentUri) {
    varType = uriBaseName(variable.dataTypeComponentUri, COMPONENT_EXT);
  } else if (variable.dataType === "function" /* Function */) {
    let argString = "...";
    if (isUserFunctionVariable(variable)) {
      argString = variable.signature.parameters.map(constructParameterLabel).join(", ");
    }
    varType = `function(${argString})`;
  }
  return varType;
}
var VariablesByUri = class extends MyMap {
};

// src/features/cachedEntities.ts
var import_trie_search = __toESM(require_trie_search());
var allGlobalEntityDefinitions = new MyMap();
var allGlobalFunctions = {};
var allGlobalMemberFunctions = {};
var allGlobalTags = {};
var allComponentsByUri = {};
var allComponentsByName = {};
var allComponentUris = {};
var allComponentNames = new import_trie_search.default("uri");
var allFunctionNames = new import_trie_search.default("name");
var allServerVariables = new VariablesByUri();
var allApplicationVariables = new VariablesByUri();
var customSnippets = {};
function isGlobalFunction(name) {
  return Object.prototype.hasOwnProperty.call(allGlobalFunctions, name.toLowerCase());
}
function isGlobalTag(name) {
  return Object.prototype.hasOwnProperty.call(allGlobalTags, name.toLowerCase());
}
function setGlobalFunction(functionDefinition) {
  allGlobalFunctions[functionDefinition.name.toLowerCase()] = functionDefinition;
}
function getGlobalFunction(functionName) {
  return allGlobalFunctions[functionName.toLowerCase()];
}
function getAllGlobalFunctions() {
  return allGlobalFunctions;
}
function clearAllGlobalFunctions() {
  allGlobalFunctions = {};
}
function setGlobalMemberFunction(functionDefinition) {
  allGlobalMemberFunctions[functionDefinition.name.toLowerCase()] = functionDefinition;
}
function getAllGlobalMemberFunctions() {
  return allGlobalMemberFunctions;
}
function setGlobalTag(tagDefinition) {
  allGlobalTags[tagDefinition.name.toLowerCase()] = tagDefinition;
}
function getGlobalTag(tagName) {
  return allGlobalTags[tagName.toLowerCase()];
}
function getAllGlobalTags() {
  return allGlobalTags;
}
function clearAllGlobalTags() {
  allGlobalTags = {};
}
function setGlobalEntityDefinition(definition) {
  allGlobalEntityDefinitions.set(definition.name.toLowerCase(), definition);
}
function getGlobalEntityDefinition(name) {
  return allGlobalEntityDefinitions.get(name.toLowerCase());
}
function clearAllGlobalEntityDefinitions() {
  allGlobalEntityDefinitions = new MyMap();
}
function setComponent(comp) {
  allComponentsByUri[comp.uri.toString().toLowerCase()] = comp;
  allComponentUris[comp.uri.toString().toLowerCase()] = comp.uri;
  const componentKey = uriBaseName(comp.uri, COMPONENT_EXT).toLowerCase();
  if (!allComponentsByName[componentKey]) {
    allComponentsByName[componentKey] = {};
  }
  allComponentsByName[componentKey][comp.uri.toString()] = comp;
  try {
    allComponentNames.add(comp);
  } catch (ex) {
    console.warn(`Unable to add ${componentKey} to trie`);
  }
}
function getComponent(uri, _token) {
  if (!hasComponent(uri, _token)) {
    return void 0;
  }
  return allComponentsByUri[uri.toString().toLowerCase()];
}
function hasComponent(uri, _token) {
  return Object.prototype.hasOwnProperty.call(allComponentsByUri, uri.toString().toLowerCase());
}
function searchAllComponentNames(query, _token) {
  let components = [];
  components = allComponentNames.search(query);
  return components;
}
function setUserFunction(userFunction) {
  try {
    allFunctionNames.add(userFunction);
  } catch (ex) {
    console.warn(`Unable to add ${userFunction.name} to trie`);
  }
}
function searchAllFunctionNames(query, _searchMode = 0 /* StartsWith */) {
  let functions = [];
  functions = allFunctionNames.search(query);
  return functions;
}
function cachedComponentPathToUri(dotPath, baseUri, _token) {
  if (!dotPath) {
    return void 0;
  }
  const normalizedPath = dotPath.replace(/\./g, "/") + COMPONENT_EXT;
  const localPath = resolveRelativePath(baseUri, normalizedPath);
  const localFile = import_vscode14.Uri.file(localPath);
  const localFileKey = localFile.toString().toLowerCase();
  if (allComponentUris[localFileKey]) {
    return allComponentUris[localFileKey];
  }
  const rootPath = resolveRootPath(baseUri, normalizedPath);
  if (rootPath) {
    const rootFile = import_vscode14.Uri.file(rootPath);
    const rootFileKey = rootFile.toString().toLowerCase();
    if (allComponentUris[rootFileKey]) {
      return allComponentUris[rootFileKey];
    }
  }
  const customMappingPaths = resolveCustomMappingPaths(baseUri, normalizedPath);
  for (const mappedPath of customMappingPaths) {
    const mappedFile = import_vscode14.Uri.file(mappedPath);
    const mappedFileKey = mappedFile.toString().toLowerCase();
    if (allComponentUris[mappedFileKey]) {
      return allComponentUris[mappedFileKey];
    }
  }
  return void 0;
}
async function cacheComponent(component, documentStateContext, _token) {
  clearCachedComponent(component.uri);
  setComponent(component);
  component.functions.forEach((funcObj) => {
    setUserFunction(funcObj);
  });
  const componentUri = component.uri;
  const fileName = uriBaseName(componentUri);
  if (fileName === "Application.cfc") {
    const thisApplicationVariables = await parseVariableAssignments(documentStateContext, documentStateContext.docIsScript, void 0, _token);
    const thisApplicationFilteredVariables = thisApplicationVariables.filter((variable) => {
      return ["application" /* Application */, "session" /* Session */, "request" /* Request */].includes(variable.scope);
    });
    setApplicationVariables(componentUri, thisApplicationFilteredVariables);
  } else if (fileName === "Server.cfc") {
    const thisServerVariables = (await parseVariableAssignments(documentStateContext, documentStateContext.docIsScript, void 0, _token)).filter((variable) => {
      return variable.scope === "server" /* Server */;
    });
    allServerVariables.set(componentUri.toString(), thisServerVariables);
  }
}
async function cacheAllComponents(_token) {
  setBulkCaching(true);
  clearAllCachedComponents();
  const components = await import_vscode14.workspace.findFiles(COMPONENT_FILE_GLOB);
  for (const componentUri of components) {
    allComponentUris[componentUri.toString().toLowerCase()] = componentUri;
  }
  await cacheGivenComponents(components, _token);
  await cacheAllApplicationCfms();
  setBulkCaching(false);
}
async function cacheGivenComponents(componentUris, _token) {
  await import_vscode14.window.withProgress(
    {
      location: import_vscode14.ProgressLocation.Notification,
      title: "Caching components",
      cancellable: true
    },
    async (progress, token) => {
      const componentCount = componentUris.length;
      let i = 0;
      for (const componentUri of componentUris) {
        if (token.isCancellationRequested) {
          break;
        }
        try {
          const document2 = await LSTextDocument.openTextDocument(componentUri);
          const cfmlCompletionSettings = import_vscode14.workspace.getConfiguration("cfml.suggest", document2.uri);
          const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
          await cacheComponentFromDocument(document2, false, replaceComments, _token);
        } catch (ex) {
          console.warn(`Cannot parse document at ${componentUri}`);
        } finally {
          i++;
          progress.report({
            message: `${i} / ${componentCount}`,
            increment: 100 / componentCount
          });
        }
      }
    }
  );
}
async function cacheComponentFromDocument(document2, fast = false, replaceComments = false, _token) {
  const documentStateContext = getDocumentStateContext(document2, fast, replaceComments, _token);
  const parsedComponent = await parseComponent(documentStateContext, _token);
  if (!parsedComponent) {
    return;
  }
  await cacheComponent(parsedComponent, documentStateContext, _token);
}
function clearCachedComponent(componentUri) {
  const componentByUri = allComponentsByUri[componentUri.toString().toLowerCase()];
  if (componentByUri) {
    delete allComponentsByUri[componentUri.toString().toLowerCase()];
  }
  const componentKey = uriBaseName(componentUri).toLowerCase();
  const componentsByName = allComponentsByName[componentKey];
  if (componentsByName) {
    const componentsByNameLen = Object.keys(componentsByName).length;
    if (componentsByName[componentUri.toString()]) {
      const prevCompFunctions = componentsByName[componentUri.toString()].functions;
      if (componentsByNameLen === 1) {
        delete allComponentsByName[componentKey];
        allComponentNames.remove(componentKey);
      } else {
        delete componentsByName[componentUri.toString()];
      }
      if (prevCompFunctions) {
        for (const funcName of prevCompFunctions.keys()) {
          allFunctionNames.remove(funcName);
        }
      }
    }
  }
}
function clearAllCachedComponents() {
  allComponentsByUri = {};
  allComponentsByName = {};
  allComponentUris = {};
  allComponentNames.reset();
  allFunctionNames.reset();
}
async function cacheAllApplicationCfms() {
  return import_vscode14.workspace.findFiles(APPLICATION_CFM_GLOB).then(
    cacheGivenApplicationCfms,
    (reason) => {
      console.warn(reason);
    }
  );
}
async function cacheGivenApplicationCfms(applicationUris, _token) {
  for (const applicationUri of applicationUris) {
    try {
      const document2 = await import_vscode14.workspace.openTextDocument(applicationUri);
      const cfmlCompletionSettings = import_vscode14.workspace.getConfiguration("cfml.suggest", document2.uri);
      const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
      const documentStateContext = getDocumentStateContext(document2, false, replaceComments, _token);
      const thisApplicationVariables = await parseVariableAssignments(documentStateContext, documentStateContext.docIsScript, void 0, _token);
      const thisApplicationFilteredVariables = thisApplicationVariables.filter((variable) => {
        return ["application" /* Application */, "session" /* Session */, "request" /* Request */].includes(variable.scope);
      });
      setApplicationVariables(applicationUri, thisApplicationFilteredVariables);
    } catch (ex) {
      console.warn(`Cannot parse document at ${applicationUri}`);
    }
  }
}
function getCachedApplicationVariables(uri) {
  return allApplicationVariables.get(uri.toString());
}
function setApplicationVariables(uri, applicationVariables) {
  allApplicationVariables.set(uri.toString(), applicationVariables);
}
function removeApplicationVariables(uri) {
  return allApplicationVariables.delete(uri.toString());
}
function getCachedServerVariables(uri) {
  return allServerVariables.get(uri.toString());
}
function getAllCustomSnippets() {
  return customSnippets;
}
function setCustomSnippet(key, snippet) {
  customSnippets[key] = snippet;
}
function clearAllCustomSnippets() {
  customSnippets = {};
}

// src/entities/property.ts
init_process();
init_buffer();
var import_vscode15 = require("vscode");
var propertyPattern = /((\/\*\*((?:\*(?!\/)|[^*])*)\*\/\s+)?(?:<cf|[\s\t])property\b)\s((?!=)[^;>]*)/gi;
var propertyAttributeNames = new MySet([
  "name",
  "displayname",
  "hint",
  "default",
  "required",
  "type",
  "serializable",
  "getter",
  "setter"
]);
var booleanAttributes = new MySet([
  "getter",
  "setter"
]);
var Properties = class extends MyMap {
};
async function parseProperties(documentStateContext, _token) {
  const properties = new Properties();
  const document2 = documentStateContext.document;
  const componentText = document2.getText();
  let propertyMatch = null;
  while (propertyMatch = propertyPattern.exec(componentText)) {
    const propertyAttributePrefix = propertyMatch[1];
    const propertyFullDoc = propertyMatch[2];
    const propertyDocContent = propertyMatch[3];
    const propertyAttrs = propertyMatch[4];
    const property = {
      name: "",
      dataType: "any" /* Any */,
      description: "",
      nameRange: new import_vscode15.Range(
        document2.positionAt(propertyMatch.index),
        document2.positionAt(propertyMatch.index + propertyMatch[0].length)
      ),
      propertyRange: new import_vscode15.Range(
        document2.positionAt(propertyMatch.index),
        document2.positionAt(propertyMatch.index + propertyMatch[0].length + 1)
      )
    };
    if (propertyFullDoc) {
      const propertyDocBlockParsed = parseDocBlock(
        document2,
        new import_vscode15.Range(
          document2.positionAt(propertyMatch.index + 3),
          document2.positionAt(propertyMatch.index + 3 + propertyDocContent.length)
        )
      );
      for (const docElem of propertyDocBlockParsed) {
        const activeKey = docElem.key;
        if (activeKey === "type") {
          const [dataType, dataTypeComponentUri] = await DataType.getDataTypeAndUri(docElem.value, document2.uri, _token);
          if (dataType) {
            property.dataType = dataType;
            if (dataTypeComponentUri) {
              property.dataTypeComponentUri = dataTypeComponentUri;
            }
            property.dataTypeRange = docElem.valueRange;
          }
        } else if (activeKey === "hint") {
          property.description = docElem.value;
        } else if (booleanAttributes.has(activeKey)) {
          property[activeKey] = DataType.isTruthy(docElem.value);
        } else {
          property[activeKey] = docElem.value;
        }
      }
    }
    if (/=/.test(propertyAttrs)) {
      const propertyAttributesOffset = propertyMatch.index + propertyAttributePrefix.length;
      const propertyAttributeRange = new import_vscode15.Range(
        document2.positionAt(propertyAttributesOffset),
        document2.positionAt(propertyAttributesOffset + propertyAttrs.length)
      );
      const parsedPropertyAttributes = parseAttributes(document2, propertyAttributeRange, propertyAttributeNames);
      if (!parsedPropertyAttributes.has("name")) {
        continue;
      }
      for (const [attrKey, attr] of parsedPropertyAttributes) {
        if (attrKey === "name") {
          property.name = attr.value;
          property.nameRange = attr.valueRange;
        } else if (attrKey === "type") {
          const [dataType, dataTypeComponentUri] = await DataType.getDataTypeAndUri(attr.value, document2.uri, _token);
          if (dataType) {
            property.dataType = dataType;
            if (dataTypeComponentUri) {
              property.dataTypeComponentUri = dataTypeComponentUri;
            }
            property.dataTypeRange = attr.valueRange;
          }
        } else if (attrKey === "hint") {
          property.description = attr.value;
        } else if (booleanAttributes.has(attrKey)) {
          property[attrKey] = DataType.isTruthy(attr.value);
        } else {
          property[attrKey] = attr.value;
        }
      }
    } else {
      const parsedPropertyAttributes = /\s*(\S+)\s+([\w$]+)\s*$/.exec(propertyAttrs);
      if (!parsedPropertyAttributes) {
        continue;
      }
      const dataTypeString = parsedPropertyAttributes[1];
      const [dataType, dataTypeComponentUri] = await DataType.getDataTypeAndUri(dataTypeString, document2.uri, _token);
      if (dataType) {
        property.dataType = dataType;
        if (dataTypeComponentUri) {
          property.dataTypeComponentUri = dataTypeComponentUri;
        }
      }
      property.name = parsedPropertyAttributes[2];
      const removedName = propertyMatch[0].slice(0, -property.name.length);
      const nameAttributeOffset = propertyMatch.index + removedName.length;
      property.nameRange = new import_vscode15.Range(
        document2.positionAt(nameAttributeOffset),
        document2.positionAt(nameAttributeOffset + property.name.length)
      );
      const dataTypeOffset = propertyMatch.index + removedName.lastIndexOf(dataTypeString);
      property.dataTypeRange = new import_vscode15.Range(
        document2.positionAt(dataTypeOffset),
        document2.positionAt(dataTypeOffset + dataTypeString.length)
      );
    }
    if (property.name) {
      properties.set(property.name.toLowerCase(), property);
    }
  }
  return properties;
}
function constructGetter(property, componentUri) {
  return {
    access: "public" /* Public */,
    static: false,
    abstract: false,
    final: false,
    bodyRange: void 0,
    name: "get" + property.name.charAt(0).toUpperCase() + property.name.slice(1),
    description: property.description,
    returntype: property.dataType,
    returnTypeUri: property.dataTypeComponentUri,
    nameRange: property.nameRange,
    signatures: [{ parameters: [] }],
    location: new import_vscode15.Location(componentUri, property.propertyRange),
    isImplicit: true
  };
}
function constructSetter(property, componentUri) {
  const implicitFunctionSignature = {
    parameters: [
      {
        name: property.name,
        type: property.dataType.toString(),
        nameRange: void 0,
        description: property.description,
        required: true,
        dataType: property.dataType,
        dataTypeComponentUri: property.dataTypeComponentUri,
        default: property.default
      }
    ]
  };
  return {
    access: "public" /* Public */,
    static: false,
    abstract: false,
    final: false,
    bodyRange: void 0,
    name: "set" + property.name.charAt(0).toUpperCase() + property.name.slice(1),
    description: property.description,
    returntype: "component" /* Component */,
    returnTypeUri: componentUri,
    nameRange: property.nameRange,
    signatures: [implicitFunctionSignature],
    location: new import_vscode15.Location(componentUri, property.propertyRange),
    isImplicit: true
  };
}

// src/entities/component.ts
var COMPONENT_EXT = ".cfc";
var COMPONENT_FILE_GLOB = "**/*" + COMPONENT_EXT;
var COMPONENT_TAG_PATTERN = /((<cf)(component|interface)\b)([^>]*)/i;
var COMPONENT_SCRIPT_PATTERN = /((\/\*\*((?:\*(?!\/)|[^*])*)\*\/\s+)?(component|interface)\b)([^{]*)/i;
var componentExtendsPathPrefix = /\b(extends|implements)\s*=\s*(['"])?([^'"#\s]*?)$/i;
var componentDottedPathPrefix = /\b(import|new)\s+(?:component\s*:\s*)?(['"])?([^('":;\n]*?)$/i;
var objectNewInstanceInitPrefix = /\bnew\s+(?:component\s*:\s*)?(['"])?([^('":]+?)\1\($/i;
var objectReferencePatterns = [
  // new object
  {
    pattern: /\bnew\s+(?:component\s*:\s*)?(['"])?([^('":]+?)\1\(/gi,
    refIndex: 2
  },
  // import
  {
    pattern: /\bimport\s+(['"])?([^'"]+?)\1(?:;|\n)/gi,
    refIndex: 2
  },
  // createObject
  {
    pattern: /\bcreateObject\s*\(\s*(['"])component\1\s*,\s*(['"])([^'"]+?)\2/gi,
    refIndex: 3
  },
  // cfobject or cfinvoke
  {
    pattern: /\bcomponent\s*(?:=|:)\s*(['"])([^'"]+?)\1/gi,
    refIndex: 2
  },
  // isInstanceOf
  {
    pattern: /\bisInstanceOf\s*\(\s*[\w$.]+\s*,\s*(['"])([^'"]+?)\1/gi,
    refIndex: 2
  }
];
var componentAttributeNames = new MySet([
  "accessors",
  "alias",
  "autoindex",
  "bindingname",
  "consumes",
  "displayname",
  "extends",
  "hint",
  "httpmethod",
  "implements",
  "indexable",
  "indexlanguage",
  "initmethod",
  "mappedsuperclass",
  "namespace",
  "output",
  "persistent",
  "porttypename",
  "produces",
  "rest",
  "restPath",
  "serializable",
  "serviceaddress",
  "serviceportname",
  "style",
  "wsdlfile",
  "wsVersion"
]);
var booleanAttributes2 = new MySet([
  "accessors",
  "autoindex",
  "indexable",
  "mappedsuperclass",
  "output",
  "persistent",
  "rest",
  "serializable"
]);
function isScriptComponent(document2, _token) {
  const componentTagMatch = COMPONENT_TAG_PATTERN.exec(document2.getText());
  if (componentTagMatch) {
    return false;
  }
  return isCfcFile(document2, _token);
}
async function parseComponent(documentStateContext, _token) {
  const document2 = documentStateContext.document;
  const documentText = document2.getText();
  const componentIsScript = documentStateContext.docIsScript;
  let componentMatch;
  let head;
  let attributePrefix;
  let fullPrefix;
  let componentDoc;
  let checkTag;
  let componentType;
  let componentAttrs;
  if (!componentIsScript) {
    componentMatch = COMPONENT_TAG_PATTERN.exec(documentText);
    if (!componentMatch) {
      return void 0;
    }
    head = componentMatch[0];
    attributePrefix = componentMatch[1];
    checkTag = componentMatch[2];
    componentType = componentMatch[3];
    componentAttrs = componentMatch[4];
  } else {
    componentMatch = COMPONENT_SCRIPT_PATTERN.exec(documentText);
    if (!componentMatch) {
      return void 0;
    }
    head = componentMatch[0];
    attributePrefix = componentMatch[1];
    fullPrefix = componentMatch[2];
    componentDoc = componentMatch[3];
    componentType = componentMatch[4];
    componentAttrs = componentMatch[5];
  }
  let declarationStartOffset = componentMatch.index;
  if (fullPrefix) {
    declarationStartOffset += fullPrefix.length;
  }
  if (checkTag) {
    declarationStartOffset += checkTag.length;
  }
  const componentAttributes = {};
  const component = {
    uri: document2.uri,
    name: resolveBaseName(document2.fileName, COMPONENT_EXT),
    isScript: componentIsScript,
    isInterface: componentType === "interface",
    declarationRange: new import_vscode16.Range(document2.positionAt(declarationStartOffset), document2.positionAt(declarationStartOffset + componentType.length)),
    displayname: "",
    hint: "",
    extends: null,
    implements: null,
    accessors: false,
    functions: new ComponentFunctions(),
    properties: await parseProperties(documentStateContext, _token),
    variables: [],
    imports: []
  };
  if (componentDoc) {
    const parsedDocBlock = parseDocBlock(
      document2,
      new import_vscode16.Range(
        document2.positionAt(componentMatch.index + 3),
        document2.positionAt(componentMatch.index + 3 + componentDoc.length)
      )
    );
    const docBlockAttributes = processDocBlock(parsedDocBlock);
    Object.assign(componentAttributes, docBlockAttributes);
    parsedDocBlock.filter((docAttribute) => {
      return docAttribute.key === "extends" && docAttribute.value;
    }).forEach((docAttribute) => {
      component.extendsRange = new import_vscode16.Range(
        docAttribute.valueRange.start,
        docAttribute.valueRange.end
      );
    });
    const implDocAttr = parsedDocBlock.find((docAttribute) => {
      return docAttribute.key === "implements" && !!docAttribute.value;
    });
    if (implDocAttr) {
      component.implementsRanges = [];
      const implInitialOffset = document2.offsetAt(implDocAttr.valueRange.start);
      let implOffset = 0;
      implDocAttr.value.split(",").forEach((element) => {
        const whitespaceMatch = /\s+/.exec(element);
        const whitespaceLen = whitespaceMatch ? whitespaceMatch[0].length : 0;
        const interfacePathWordRange = document2.getWordRangeAtPosition(document2.positionAt(implInitialOffset + implOffset + whitespaceLen), /[$\w.]+/);
        component.implementsRanges.push(interfacePathWordRange);
        implOffset += element.length + 1;
      });
    }
  }
  if (componentAttrs) {
    const componentAttributePrefixOffset = componentMatch.index + attributePrefix.length;
    const componentAttributeRange = new import_vscode16.Range(
      document2.positionAt(componentAttributePrefixOffset),
      document2.positionAt(componentAttributePrefixOffset + componentAttrs.length)
    );
    const parsedAttributes = parseAttributes(document2, componentAttributeRange, componentAttributeNames);
    const tagAttributes = processAttributes(parsedAttributes);
    Object.assign(componentAttributes, tagAttributes);
    if (parsedAttributes.has("extends")) {
      const extendsAttr = parsedAttributes.get("extends");
      if (extendsAttr.value) {
        component.extendsRange = new import_vscode16.Range(
          extendsAttr.valueRange.start,
          extendsAttr.valueRange.end
        );
      }
    }
    if (parsedAttributes.has("implements")) {
      const implementsAttr = parsedAttributes.get("implements");
      if (implementsAttr.value) {
        component.implementsRanges = [];
        const implInitialOffset = document2.offsetAt(implementsAttr.valueRange.start);
        let implOffset = 0;
        implementsAttr.value.split(",").forEach((element) => {
          const whitespaceMatch = /\s+/.exec(element);
          const whitespaceLen = whitespaceMatch ? whitespaceMatch[0].length : 0;
          const interfacePathWordRange = document2.getWordRangeAtPosition(document2.positionAt(implInitialOffset + implOffset + whitespaceLen), /[$\w.]+/);
          component.implementsRanges.push(interfacePathWordRange);
          implOffset += element.length + 1;
        });
      }
    }
  }
  const componentPropertyNames = Object.getOwnPropertyNames(component);
  for (const propName of componentPropertyNames) {
    if (componentAttributes[propName]) {
      if (propName === "extends") {
        component.extends = await componentPathToUri(componentAttributes.extends, document2.uri, _token);
      } else if (propName === "implements") {
        const componentimplements = componentAttributes.implements.split(",");
        for (const element of componentimplements) {
          const implementsUri = await componentPathToUri(element.trim(), document2.uri, _token);
          if (implementsUri) {
            if (!component.implements) {
              component.implements = [];
            }
            component.implements.push(implementsUri);
          }
        }
      } else if (propName === "persistent" && componentAttributes.persistent) {
        component.accessors = true;
      } else {
        component[propName] = componentAttributes[propName];
      }
    }
  }
  documentStateContext.component = component;
  const componentFunctions = new ComponentFunctions();
  let userFunctions = [];
  userFunctions = userFunctions.concat(await parseScriptFunctions(documentStateContext, _token));
  userFunctions = userFunctions.concat(await parseTagFunctions(documentStateContext, _token));
  let earliestFunctionRangeStart = document2.positionAt(documentText.length);
  userFunctions.forEach((compFun) => {
    if (compFun.location.range.start.isBefore(earliestFunctionRangeStart)) {
      earliestFunctionRangeStart = compFun.location.range.start;
    }
    componentFunctions.set(compFun.name.toLowerCase(), compFun);
  });
  if (component.accessors) {
    component.properties.forEach((prop) => {
      if (typeof prop.getter === "undefined" || prop.getter) {
        const getterKey = "get" + prop.name.toLowerCase();
        if (!componentFunctions.has(getterKey)) {
          componentFunctions.set(getterKey, constructGetter(prop, component.uri));
        }
      }
      if (typeof prop.setter === "undefined" || prop.setter) {
        const setterKey = "set" + prop.name.toLowerCase();
        if (!componentFunctions.has(setterKey)) {
          componentFunctions.set(setterKey, constructSetter(prop, component.uri));
        }
      }
    });
  }
  component.functions = componentFunctions;
  const componentDefinitionRange = new import_vscode16.Range(document2.positionAt(componentMatch.index + head.length), earliestFunctionRangeStart);
  component.variables = await parseVariableAssignments(documentStateContext, componentIsScript, componentDefinitionRange, _token);
  return component;
}
function isInComponentHead(documentPositionStateContext) {
  const document2 = documentPositionStateContext.document;
  const documentText = documentPositionStateContext.sanitizedDocumentText;
  const componentPattern = documentPositionStateContext.docIsScript ? COMPONENT_SCRIPT_PATTERN : COMPONENT_TAG_PATTERN;
  const componentMatch = componentPattern.exec(documentText);
  if (!componentMatch) {
    return false;
  }
  const head = componentMatch[0];
  if (!head) {
    return false;
  }
  const componentHeadRange = new import_vscode16.Range(new import_vscode16.Position(0, 0), document2.positionAt(componentMatch.index + head.length));
  return componentHeadRange.contains(documentPositionStateContext.position);
}
function processDocBlock(docBlock) {
  const docBlockObj = {};
  docBlock.forEach((docElem) => {
    const activeKey = docElem.key;
    if (booleanAttributes2.has(activeKey)) {
      docBlockObj[activeKey] = DataType.isTruthy(docElem.value);
    } else {
      docBlockObj[activeKey] = docElem.value;
    }
  });
  return docBlockObj;
}
function processAttributes(attributes) {
  const attributeObj = {};
  attributes.forEach((attr, attrKey) => {
    if (booleanAttributes2.has(attrKey)) {
      attributeObj[attrKey] = DataType.isTruthy(attr.value);
    } else {
      attributeObj[attrKey] = attr.value;
    }
  });
  return attributeObj;
}
async function componentPathToUri(dotPath, baseUri, _token) {
  if (!dotPath) {
    return void 0;
  }
  const cachedResult = cachedComponentPathToUri(dotPath, baseUri, _token);
  if (cachedResult) {
    return cachedResult;
  }
  const normalizedPath = import_vscode16.Uri.parse(dotPath + COMPONENT_EXT).toString();
  const localPath = resolveRelativePath(baseUri, normalizedPath);
  if (await fileExists(localPath)) {
    return import_vscode16.Uri.file(localPath);
  }
  const rootPath = resolveRootPath(baseUri, normalizedPath);
  if (rootPath && await fileExists(rootPath)) {
    return import_vscode16.Uri.file(rootPath);
  }
  const customMappingPaths = resolveCustomMappingPaths(baseUri, normalizedPath);
  for (const mappedPath of customMappingPaths) {
    if (await fileExists(mappedPath)) {
      return import_vscode16.Uri.file(mappedPath);
    }
  }
  return void 0;
}
async function getApplicationUri(baseUri) {
  if (baseUri.scheme !== "file") {
    return void 0;
  }
  const applicationFile = await findUpWorkspaceFile("Application.cfc", baseUri);
  return applicationFile;
}
function getServerUri(baseUri, _token) {
  let componentUri;
  const fileName = "Server.cfc";
  const rootPath = resolveRootPath(baseUri, fileName);
  if (rootPath) {
    const rootUri = import_vscode16.Uri.file(rootPath);
    if (hasComponent(rootUri, _token)) {
      componentUri = rootUri;
    }
  }
  return componentUri;
}
function isSubcomponentOrEqual(checkComponent, baseComponent, _token) {
  while (checkComponent) {
    if (checkComponent.uri.toString() === baseComponent.uri.toString()) {
      return true;
    }
    if (checkComponent.extends) {
      checkComponent = getComponent(checkComponent.extends, _token);
    } else {
      checkComponent = void 0;
    }
  }
  return false;
}

// src/features/colorProvider.ts
init_process();
init_buffer();
var import_vscode17 = require("vscode");

// src/entities/css/property.ts
init_process();
init_buffer();
var cssPropertyPattern = /\b(([a-z-]+)\s*:\s*)([^;{}]+?)\s*(?=[;}])/gi;

// src/entities/css/languageFacts.ts
init_process();
init_buffer();

// src/entities/css/colors.ts
init_process();
init_buffer();
var colors = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgrey: "#a9a9a9",
  darkgreen: "#006400",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  gold: "#ffd700",
  goldenrod: "#daa520",
  gray: "#808080",
  grey: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavender: "#e6e6fa",
  lavenderblush: "#fff0f5",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgrey: "#d3d3d3",
  lightgreen: "#90ee90",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370d8",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#d87093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  red: "#ff0000",
  rebeccapurple: "#663399",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};

// src/entities/css/dataManager.ts
init_process();
init_buffer();

// src/entities/css/objects.ts
init_process();
init_buffer();
function values(obj) {
  return Object.keys(obj).map((key) => obj[key]);
}

// src/entities/css/webCustomData.ts
init_process();
init_buffer();
var cssData = {
  "version": 1.1,
  "properties": [
    {
      "name": "additive-symbols",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "[ <integer> && <symbol> ]#",
      "relevance": 50,
      "description": "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is 'additive'.",
      "restrictions": [
        "integer",
        "string",
        "image",
        "identifier"
      ]
    },
    {
      "name": "align-content",
      "browsers": [
        "E12",
        "FF28",
        "S9",
        "C29",
        "IE11",
        "O16"
      ],
      "values": [
        {
          "name": "center",
          "description": "Lines are packed toward the center of the flex container."
        },
        {
          "name": "flex-end",
          "description": "Lines are packed toward the end of the flex container."
        },
        {
          "name": "flex-start",
          "description": "Lines are packed toward the start of the flex container."
        },
        {
          "name": "space-around",
          "description": "Lines are evenly distributed in the flex container, with half-size spaces on either end."
        },
        {
          "name": "space-between",
          "description": "Lines are evenly distributed in the flex container."
        },
        {
          "name": "stretch",
          "description": "Lines stretch to take up the remaining space."
        },
        {
          "name": "start"
        },
        {
          "name": "end"
        },
        {
          "name": "normal"
        },
        {
          "name": "baseline"
        },
        {
          "name": "first baseline"
        },
        {
          "name": "last baseline"
        },
        {
          "name": "space-around"
        },
        {
          "name": "space-between"
        },
        {
          "name": "space-evenly"
        },
        {
          "name": "stretch"
        },
        {
          "name": "safe"
        },
        {
          "name": "unsafe"
        }
      ],
      "syntax": "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
      "relevance": 65,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/align-content"
        }
      ],
      "description": "Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "align-items",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE11",
        "O16"
      ],
      "values": [
        {
          "name": "baseline",
          "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
        },
        {
          "name": "center",
          "description": "The flex item's margin box is centered in the cross axis within the line."
        },
        {
          "name": "flex-end",
          "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
        },
        {
          "name": "flex-start",
          "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
        },
        {
          "name": "stretch",
          "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
        },
        {
          "name": "normal"
        },
        {
          "name": "start"
        },
        {
          "name": "end"
        },
        {
          "name": "self-start"
        },
        {
          "name": "self-end"
        },
        {
          "name": "first baseline"
        },
        {
          "name": "last baseline"
        },
        {
          "name": "stretch"
        },
        {
          "name": "safe"
        },
        {
          "name": "unsafe"
        }
      ],
      "syntax": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
      "relevance": 86,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/align-items"
        }
      ],
      "description": "Aligns flex items along the cross axis of the current line of the flex container.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "justify-items",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C52",
        "IE11",
        "O12.1"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "normal"
        },
        {
          "name": "end"
        },
        {
          "name": "start"
        },
        {
          "name": "flex-end",
          "description": '"Flex items are packed toward the end of the line."'
        },
        {
          "name": "flex-start",
          "description": '"Flex items are packed toward the start of the line."'
        },
        {
          "name": "self-end",
          "description": "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis."
        },
        {
          "name": "self-start",
          "description": "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.."
        },
        {
          "name": "center",
          "description": "The items are packed flush to each other toward the center of the of the alignment container."
        },
        {
          "name": "left"
        },
        {
          "name": "right"
        },
        {
          "name": "baseline"
        },
        {
          "name": "first baseline"
        },
        {
          "name": "last baseline"
        },
        {
          "name": "stretch",
          "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
        },
        {
          "name": "safe"
        },
        {
          "name": "unsafe"
        },
        {
          "name": "legacy"
        }
      ],
      "syntax": "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/justify-items"
        }
      ],
      "description": "Defines the default justify-self for all items of the box, giving them the default way of justifying each box along the appropriate axis",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "justify-self",
      "browsers": [
        "E16",
        "FF45",
        "S10.1",
        "C57",
        "IE10",
        "O44"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "normal"
        },
        {
          "name": "end"
        },
        {
          "name": "start"
        },
        {
          "name": "flex-end",
          "description": '"Flex items are packed toward the end of the line."'
        },
        {
          "name": "flex-start",
          "description": '"Flex items are packed toward the start of the line."'
        },
        {
          "name": "self-end",
          "description": "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis."
        },
        {
          "name": "self-start",
          "description": "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.."
        },
        {
          "name": "center",
          "description": "The items are packed flush to each other toward the center of the of the alignment container."
        },
        {
          "name": "left"
        },
        {
          "name": "right"
        },
        {
          "name": "baseline"
        },
        {
          "name": "first baseline"
        },
        {
          "name": "last baseline"
        },
        {
          "name": "stretch",
          "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
        },
        {
          "name": "save"
        },
        {
          "name": "unsave"
        }
      ],
      "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
      "relevance": 56,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/justify-self"
        }
      ],
      "description": "Defines the way of justifying a box inside its container along the appropriate axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "align-self",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE10",
        "O12.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Computes to the value of 'align-items' on the element's parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."
        },
        {
          "name": "normal"
        },
        {
          "name": "self-end"
        },
        {
          "name": "self-start"
        },
        {
          "name": "baseline",
          "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
        },
        {
          "name": "center",
          "description": "The flex item's margin box is centered in the cross axis within the line."
        },
        {
          "name": "flex-end",
          "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
        },
        {
          "name": "flex-start",
          "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
        },
        {
          "name": "stretch",
          "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
        },
        {
          "name": "baseline"
        },
        {
          "name": "first baseline"
        },
        {
          "name": "last baseline"
        },
        {
          "name": "safe"
        },
        {
          "name": "unsafe"
        }
      ],
      "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
      "relevance": 73,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/align-self"
        }
      ],
      "description": "Allows the default alignment along the cross axis to be overridden for individual flex items.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "all",
      "browsers": [
        "E79",
        "FF27",
        "S9.1",
        "C37",
        "O24"
      ],
      "values": [],
      "syntax": "initial | inherit | unset | revert | revert-layer",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/all"
        }
      ],
      "description": "Shorthand that resets all properties except 'direction' and 'unicode-bidi'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "alt",
      "browsers": [
        "S9"
      ],
      "values": [],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/alt"
        }
      ],
      "description": "Provides alternative text for assistive technology to replace the generated content of a ::before or ::after element.",
      "restrictions": [
        "string",
        "enum"
      ]
    },
    {
      "name": "animation",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        },
        {
          "name": "none",
          "description": "No animation is performed"
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "syntax": "<single-animation>#",
      "relevance": 82,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation"
        }
      ],
      "description": "Shorthand property combines six of the animation properties into a single property.",
      "restrictions": [
        "time",
        "timing-function",
        "enum",
        "identifier",
        "number"
      ]
    },
    {
      "name": "animation-delay",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "syntax": "<time>#",
      "relevance": 66,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-delay"
        }
      ],
      "description": "Defines when the animation will start.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "animation-direction",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "syntax": "<single-animation-direction>#",
      "relevance": 59,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-direction"
        }
      ],
      "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "animation-duration",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "syntax": "<time>#",
      "relevance": 72,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-duration"
        }
      ],
      "description": "Defines the length of time that an animation takes to complete one cycle.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "animation-fill-mode",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "values": [
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "none",
          "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
        }
      ],
      "syntax": "<single-animation-fill-mode>#",
      "relevance": 65,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode"
        }
      ],
      "description": "Defines what values are applied by the animation outside the time it is executing.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "animation-iteration-count",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "values": [
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        }
      ],
      "syntax": "<single-animation-iteration-count>#",
      "relevance": 64,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count"
        }
      ],
      "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
      "restrictions": [
        "number",
        "enum"
      ]
    },
    {
      "name": "animation-name",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "values": [
        {
          "name": "none",
          "description": "No animation is performed"
        }
      ],
      "syntax": "[ none | <keyframes-name> ]#",
      "relevance": 71,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-name"
        }
      ],
      "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
      "restrictions": [
        "identifier",
        "enum"
      ]
    },
    {
      "name": "animation-play-state",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "values": [
        {
          "name": "paused",
          "description": "A running animation will be paused."
        },
        {
          "name": "running",
          "description": "Resume playback of a paused animation."
        }
      ],
      "syntax": "<single-animation-play-state>#",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-play-state"
        }
      ],
      "description": "Defines whether the animation is running or paused.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "animation-timing-function",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "syntax": "<easing-function>#",
      "relevance": 72,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-timing-function"
        }
      ],
      "description": "Describes how the animation will progress over one cycle of its duration.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "backface-visibility",
      "browsers": [
        "E12",
        "FF16",
        "S15.4",
        "C36",
        "IE10",
        "O23"
      ],
      "values": [
        {
          "name": "hidden",
          "description": "Back side is hidden."
        },
        {
          "name": "visible",
          "description": "Back side is visible."
        }
      ],
      "syntax": "visible | hidden",
      "relevance": 59,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/backface-visibility"
        }
      ],
      "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "background",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "fixed",
          "description": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."
        },
        {
          "name": "local",
          "description": "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents."
        },
        {
          "name": "none",
          "description": "A value of 'none' counts as an image layer but draws nothing."
        },
        {
          "name": "scroll",
          "description": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)"
        }
      ],
      "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
      "relevance": 93,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background"
        }
      ],
      "description": "Shorthand property for setting most background properties at the same place in the style sheet.",
      "restrictions": [
        "enum",
        "image",
        "color",
        "position",
        "length",
        "repeat",
        "percentage",
        "box"
      ]
    },
    {
      "name": "background-attachment",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "fixed",
          "description": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."
        },
        {
          "name": "local",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O3.5"
          ],
          "description": "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents."
        },
        {
          "name": "scroll",
          "description": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)"
        }
      ],
      "syntax": "<attachment>#",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-attachment"
        }
      ],
      "description": "Specifies whether the background images are fixed with regard to the viewport ('fixed') or scroll along with the element ('scroll') or its contents ('local').",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "background-blend-mode",
      "browsers": [
        "E79",
        "FF30",
        "S8",
        "C35",
        "O22"
      ],
      "values": [
        {
          "name": "normal",
          "description": "Default attribute which specifies no blending"
        },
        {
          "name": "multiply",
          "description": "The source color is multiplied by the destination color and replaces the destination."
        },
        {
          "name": "screen",
          "description": "Multiplies the complements of the backdrop and source color values, then complements the result."
        },
        {
          "name": "overlay",
          "description": "Multiplies or screens the colors, depending on the backdrop color value."
        },
        {
          "name": "darken",
          "description": "Selects the darker of the backdrop and source colors."
        },
        {
          "name": "lighten",
          "description": "Selects the lighter of the backdrop and source colors."
        },
        {
          "name": "color-dodge",
          "description": "Brightens the backdrop color to reflect the source color."
        },
        {
          "name": "color-burn",
          "description": "Darkens the backdrop color to reflect the source color."
        },
        {
          "name": "hard-light",
          "description": "Multiplies or screens the colors, depending on the source color value."
        },
        {
          "name": "soft-light",
          "description": "Darkens or lightens the colors, depending on the source color value."
        },
        {
          "name": "difference",
          "description": "Subtracts the darker of the two constituent colors from the lighter color.."
        },
        {
          "name": "exclusion",
          "description": "Produces an effect similar to that of the Difference mode but lower in contrast."
        },
        {
          "name": "hue",
          "browsers": [
            "E79",
            "FF30",
            "S8",
            "C35",
            "O22"
          ],
          "description": "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color."
        },
        {
          "name": "saturation",
          "browsers": [
            "E79",
            "FF30",
            "S8",
            "C35",
            "O22"
          ],
          "description": "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color."
        },
        {
          "name": "color",
          "browsers": [
            "E79",
            "FF30",
            "S8",
            "C35",
            "O22"
          ],
          "description": "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color."
        },
        {
          "name": "luminosity",
          "browsers": [
            "E79",
            "FF30",
            "S8",
            "C35",
            "O22"
          ],
          "description": "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color."
        }
      ],
      "syntax": "<blend-mode>#",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-blend-mode"
        }
      ],
      "description": "Defines the blending mode of each background layer.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "background-clip",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C1",
        "IE9",
        "O10.5"
      ],
      "syntax": "<box>#",
      "relevance": 68,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-clip"
        }
      ],
      "description": "Determines the background painting area.",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "background-color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<color>",
      "relevance": 94,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-color"
        }
      ],
      "description": "Sets the background color of an element.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "background-image",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "none",
          "description": "Counts as an image layer but draws nothing."
        }
      ],
      "syntax": "<bg-image>#",
      "relevance": 88,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-image"
        }
      ],
      "description": "Sets the background image(s) of an element.",
      "restrictions": [
        "image",
        "enum"
      ]
    },
    {
      "name": "background-origin",
      "browsers": [
        "E12",
        "FF4",
        "S3",
        "C1",
        "IE9",
        "O10.5"
      ],
      "syntax": "<box>#",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-origin"
        }
      ],
      "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "background-position",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<bg-position>#",
      "relevance": 87,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-position"
        }
      ],
      "description": "Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "background-position-x",
      "browsers": [
        "E12",
        "FF49",
        "S1",
        "C1",
        "IE6",
        "O15"
      ],
      "values": [
        {
          "name": "center",
          "description": "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."
        },
        {
          "name": "left",
          "description": "Equivalent to '0%' for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset."
        },
        {
          "name": "right",
          "description": "Equivalent to '100%' for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset."
        }
      ],
      "syntax": "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-position-x"
        }
      ],
      "description": "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "background-position-y",
      "browsers": [
        "E12",
        "FF49",
        "S1",
        "C1",
        "IE6",
        "O15"
      ],
      "values": [
        {
          "name": "bottom",
          "description": "Equivalent to '100%' for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset."
        },
        {
          "name": "center",
          "description": "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."
        },
        {
          "name": "top",
          "description": "Equivalent to '0%' for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset."
        }
      ],
      "syntax": "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-position-y"
        }
      ],
      "description": "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "background-repeat",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [],
      "syntax": "<repeat-style>#",
      "relevance": 84,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-repeat"
        }
      ],
      "description": "Specifies how background images are tiled after they have been sized and positioned.",
      "restrictions": [
        "repeat"
      ]
    },
    {
      "name": "background-size",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C3",
        "IE9",
        "O10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%."
        },
        {
          "name": "contain",
          "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
        },
        {
          "name": "cover",
          "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
        }
      ],
      "syntax": "<bg-size>#",
      "relevance": 84,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/background-size"
        }
      ],
      "description": "Specifies the size of the background images.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "behavior",
      "browsers": [
        "IE6"
      ],
      "relevance": 50,
      "description": "IE only. Used to extend behaviors of the browser.",
      "restrictions": [
        "url"
      ]
    },
    {
      "name": "block-size",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Depends on the values of other properties."
        }
      ],
      "syntax": "<'width'>",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/block-size"
        }
      ],
      "description": "Size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "border",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width> || <line-style> || <color>",
      "relevance": 95,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border"
        }
      ],
      "description": "Shorthand property for setting border width, style, and color.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-block-end",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end"
        }
      ],
      "description": "Logical 'border-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-block-start",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start"
        }
      ],
      "description": "Logical 'border-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-block-end-color",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-color'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-color"
        }
      ],
      "description": "Logical 'border-bottom-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-block-start-color",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-color'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-color"
        }
      ],
      "description": "Logical 'border-top-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-block-end-style",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-style'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-style"
        }
      ],
      "description": "Logical 'border-bottom-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-block-start-style",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-style'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-style"
        }
      ],
      "description": "Logical 'border-top-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-block-end-width",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-width"
        }
      ],
      "description": "Logical 'border-bottom-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-block-start-width",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-width"
        }
      ],
      "description": "Logical 'border-top-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-bottom",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width> || <line-style> || <color>",
      "relevance": 88,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom"
        }
      ],
      "description": "Shorthand property for setting border width, style and color.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-bottom-color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<'border-top-color'>",
      "relevance": 71,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-color"
        }
      ],
      "description": "Sets the color of the bottom border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-bottom-left-radius",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C4",
        "IE9",
        "O10.5"
      ],
      "syntax": "<length-percentage>{1,2}",
      "relevance": 75,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius"
        }
      ],
      "description": "Defines the radii of the bottom left outer border edge.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "border-bottom-right-radius",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C4",
        "IE9",
        "O10.5"
      ],
      "syntax": "<length-percentage>{1,2}",
      "relevance": 75,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius"
        }
      ],
      "description": "Defines the radii of the bottom right outer border edge.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "border-bottom-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O9.2"
      ],
      "syntax": "<line-style>",
      "relevance": 59,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-style"
        }
      ],
      "description": "Sets the style of the bottom border.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-bottom-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width>",
      "relevance": 63,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-width"
        }
      ],
      "description": "Sets the thickness of the bottom border.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-collapse",
      "browsers": [
        "E12",
        "FF1",
        "S1.2",
        "C1",
        "IE5",
        "O4"
      ],
      "values": [
        {
          "name": "collapse",
          "description": "Selects the collapsing borders model."
        },
        {
          "name": "separate",
          "description": "Selects the separated borders border model."
        }
      ],
      "syntax": "collapse | separate",
      "relevance": 73,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-collapse"
        }
      ],
      "description": "Selects a table's border model.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "border-color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [],
      "syntax": "<color>{1,4}",
      "relevance": 87,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-color"
        }
      ],
      "description": "The color of the border around all four edges of an element.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-image",
      "browsers": [
        "E12",
        "FF15",
        "S6",
        "C16",
        "IE11",
        "O11"
      ],
      "values": [
        {
          "name": "auto",
          "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
        },
        {
          "name": "fill",
          "description": "Causes the middle part of the border-image to be preserved."
        },
        {
          "name": "none",
          "description": "Use the border styles."
        },
        {
          "name": "repeat",
          "description": "The image is tiled (repeated) to fill the area."
        },
        {
          "name": "round",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
        },
        {
          "name": "space",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
        },
        {
          "name": "stretch",
          "description": "The image is stretched to fill the area."
        },
        {
          "name": "url()"
        }
      ],
      "syntax": "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
      "relevance": 52,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-image"
        }
      ],
      "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "percentage",
        "number",
        "url",
        "enum"
      ]
    },
    {
      "name": "border-image-outset",
      "browsers": [
        "E12",
        "FF15",
        "S6",
        "C15",
        "IE11",
        "O15"
      ],
      "syntax": "[ <length> | <number> ]{1,4}",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-outset"
        }
      ],
      "description": "The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.",
      "restrictions": [
        "length",
        "number"
      ]
    },
    {
      "name": "border-image-repeat",
      "browsers": [
        "E12",
        "FF15",
        "S6",
        "C15",
        "IE11",
        "O15"
      ],
      "values": [
        {
          "name": "repeat",
          "description": "The image is tiled (repeated) to fill the area."
        },
        {
          "name": "round",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
        },
        {
          "name": "space",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
        },
        {
          "name": "stretch",
          "description": "The image is stretched to fill the area."
        }
      ],
      "syntax": "[ stretch | repeat | round | space ]{1,2}",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-repeat"
        }
      ],
      "description": "Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "border-image-slice",
      "browsers": [
        "E12",
        "FF15",
        "S6",
        "C15",
        "IE11",
        "O15"
      ],
      "values": [
        {
          "name": "fill",
          "description": "Causes the middle part of the border-image to be preserved."
        }
      ],
      "syntax": "<number-percentage>{1,4} && fill?",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-slice"
        }
      ],
      "description": "Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.",
      "restrictions": [
        "number",
        "percentage"
      ]
    },
    {
      "name": "border-image-source",
      "browsers": [
        "E12",
        "FF15",
        "S6",
        "C15",
        "IE11",
        "O15"
      ],
      "values": [
        {
          "name": "none",
          "description": "Use the border styles."
        }
      ],
      "syntax": "none | <image>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-source"
        }
      ],
      "description": "Specifies an image to use instead of the border styles given by the 'border-style' properties and as an additional background layer for the element. If the value is 'none' or if the image cannot be displayed, the border styles will be used.",
      "restrictions": [
        "image"
      ]
    },
    {
      "name": "border-image-width",
      "browsers": [
        "E12",
        "FF13",
        "S6",
        "C15",
        "IE11",
        "O15"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
        }
      ],
      "syntax": "[ <length-percentage> | <number> | auto ]{1,4}",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-width"
        }
      ],
      "description": "The four values of 'border-image-width' specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.",
      "restrictions": [
        "length",
        "percentage",
        "number"
      ]
    },
    {
      "name": "border-inline-end",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end"
        }
      ],
      "description": "Logical 'border-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-inline-start",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start"
        }
      ],
      "description": "Logical 'border-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-inline-end-color",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-color'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color"
        }
      ],
      "description": "Logical 'border-right-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-inline-start-color",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-color'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color"
        }
      ],
      "description": "Logical 'border-left-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-inline-end-style",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-style'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style"
        }
      ],
      "description": "Logical 'border-right-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-inline-start-style",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-style'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style"
        }
      ],
      "description": "Logical 'border-left-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-inline-end-width",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width"
        }
      ],
      "description": "Logical 'border-right-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-inline-start-width",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'border-top-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width"
        }
      ],
      "description": "Logical 'border-left-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-left",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width> || <line-style> || <color>",
      "relevance": 82,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-left"
        }
      ],
      "description": "Shorthand property for setting border width, style and color",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-left-color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<color>",
      "relevance": 68,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-color"
        }
      ],
      "description": "Sets the color of the left border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-left-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O9.2"
      ],
      "syntax": "<line-style>",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-style"
        }
      ],
      "description": "Sets the style of the left border.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-left-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width>",
      "relevance": 63,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-width"
        }
      ],
      "description": "Sets the thickness of the left border.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-radius",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C4",
        "IE9",
        "O10.5"
      ],
      "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
      "relevance": 92,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-radius"
        }
      ],
      "description": "Defines the radii of the outer border edge.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "border-right",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O9.2"
      ],
      "syntax": "<line-width> || <line-style> || <color>",
      "relevance": 81,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-right"
        }
      ],
      "description": "Shorthand property for setting border width, style and color",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-right-color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<color>",
      "relevance": 67,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-color"
        }
      ],
      "description": "Sets the color of the right border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-right-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O9.2"
      ],
      "syntax": "<line-style>",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-style"
        }
      ],
      "description": "Sets the style of the right border.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-right-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width>",
      "relevance": 63,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-width"
        }
      ],
      "description": "Sets the thickness of the right border.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-spacing",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE8",
        "O4"
      ],
      "syntax": "<length> <length>?",
      "relevance": 67,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-spacing"
        }
      ],
      "description": "The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "border-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [],
      "syntax": "<line-style>{1,4}",
      "relevance": 80,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-style"
        }
      ],
      "description": "The style of the border around edges of an element.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-top",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width> || <line-style> || <color>",
      "relevance": 87,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-top"
        }
      ],
      "description": "Shorthand property for setting border width, style and color",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "border-top-color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<color>",
      "relevance": 71,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-color"
        }
      ],
      "description": "Sets the color of the top border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "border-top-left-radius",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C4",
        "IE9",
        "O10.5"
      ],
      "syntax": "<length-percentage>{1,2}",
      "relevance": 75,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius"
        }
      ],
      "description": "Defines the radii of the top left outer border edge.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "border-top-right-radius",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C4",
        "IE9",
        "O10.5"
      ],
      "syntax": "<length-percentage>{1,2}",
      "relevance": 76,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius"
        }
      ],
      "description": "Defines the radii of the top right outer border edge.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "border-top-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O9.2"
      ],
      "syntax": "<line-style>",
      "relevance": 58,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-style"
        }
      ],
      "description": "Sets the style of the top border.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "border-top-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<line-width>",
      "relevance": 61,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-width"
        }
      ],
      "description": "Sets the thickness of the top border.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "border-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [],
      "syntax": "<line-width>{1,4}",
      "relevance": 82,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-width"
        }
      ],
      "description": "Shorthand that sets the four 'border-*-width' properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "bottom",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5",
        "O6"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 90,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/bottom"
        }
      ],
      "description": "Specifies how far an absolutely positioned box's bottom margin edge is offset above the bottom edge of the box's 'containing block'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "box-decoration-break",
      "browsers": [
        "E79",
        "FF32",
        "S7",
        "C22",
        "O15"
      ],
      "values": [
        {
          "name": "clone",
          "description": "Each box is independently wrapped with the border and padding."
        },
        {
          "name": "slice",
          "description": "The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward."
        }
      ],
      "syntax": "slice | clone",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-decoration-break"
        }
      ],
      "description": "Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "box-shadow",
      "browsers": [
        "E12",
        "FF4",
        "S5.1",
        "C10",
        "IE9",
        "O10.5"
      ],
      "values": [
        {
          "name": "inset",
          "description": "Changes the drop shadow from an outer shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it)."
        },
        {
          "name": "none",
          "description": "No shadow."
        }
      ],
      "syntax": "none | <shadow>#",
      "relevance": 89,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-shadow"
        }
      ],
      "description": "Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional 'inset' keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.",
      "restrictions": [
        "length",
        "color",
        "enum"
      ]
    },
    {
      "name": "box-sizing",
      "browsers": [
        "E12",
        "FF29",
        "S5.1",
        "C10",
        "IE8",
        "O7"
      ],
      "values": [
        {
          "name": "border-box",
          "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
        },
        {
          "name": "content-box",
          "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
        }
      ],
      "syntax": "content-box | border-box",
      "relevance": 92,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-sizing"
        }
      ],
      "description": "Specifies the behavior of the 'width' and 'height' properties.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "break-after",
      "browsers": [
        "E12",
        "FF65",
        "S10",
        "C50",
        "IE10",
        "O37"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break before/after the principal box."
        },
        {
          "name": "avoid",
          "description": "Avoid a break before/after the principal box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break before/after the principal box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break before/after the principal box."
        },
        {
          "name": "column",
          "description": "Always force a column break before/after the principal box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "page",
          "description": "Always force a page break before/after the principal box."
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
        }
      ],
      "syntax": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/break-after"
        }
      ],
      "description": "Describes the page/column/region break behavior after the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "break-before",
      "browsers": [
        "E12",
        "FF65",
        "S10",
        "C50",
        "IE10",
        "O37"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break before/after the principal box."
        },
        {
          "name": "avoid",
          "description": "Avoid a break before/after the principal box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break before/after the principal box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break before/after the principal box."
        },
        {
          "name": "column",
          "description": "Always force a column break before/after the principal box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "page",
          "description": "Always force a page break before/after the principal box."
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
        }
      ],
      "syntax": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/break-before"
        }
      ],
      "description": "Describes the page/column/region break behavior before the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "break-inside",
      "browsers": [
        "E12",
        "FF65",
        "S10",
        "C50",
        "IE10",
        "O37"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Impose no additional breaking constraints within the box."
        },
        {
          "name": "avoid",
          "description": "Avoid breaks within the box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break within the box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break within the box."
        }
      ],
      "syntax": "auto | avoid | avoid-page | avoid-column | avoid-region",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/break-inside"
        }
      ],
      "description": "Describes the page/column/region break behavior inside the principal box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "caption-side",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE8",
        "O4"
      ],
      "values": [
        {
          "name": "bottom",
          "description": "Positions the caption box below the table box."
        },
        {
          "name": "top",
          "description": "Positions the caption box above the table box."
        }
      ],
      "syntax": "top | bottom | block-start | block-end | inline-start | inline-end",
      "relevance": 52,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/caption-side"
        }
      ],
      "description": "Specifies the position of the caption box with respect to the table box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "caret-color",
      "browsers": [
        "E79",
        "FF53",
        "S11.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent selects an appropriate color for the caret. This is generally currentcolor, but the user agent may choose a different color to ensure good visibility and contrast with the surrounding content, taking into account the value of currentcolor, the background, shadows, and other factors."
        }
      ],
      "syntax": "auto | <color>",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/caret-color"
        }
      ],
      "description": "Controls the color of the text insertion indicator.",
      "restrictions": [
        "color",
        "enum"
      ]
    },
    {
      "name": "clear",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "both",
          "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document."
        },
        {
          "name": "left",
          "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document."
        },
        {
          "name": "none",
          "description": "No constraint on the box's position with respect to floats."
        },
        {
          "name": "right",
          "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document."
        }
      ],
      "syntax": "none | left | right | both | inline-start | inline-end",
      "relevance": 83,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/clear"
        }
      ],
      "description": "Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. The 'clear' property does not consider floats inside the element itself or in other block formatting contexts.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "clip",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The element does not clip."
        },
        {
          "name": "rect()",
          "description": "Specifies offsets from the edges of the border box."
        }
      ],
      "syntax": "<shape> | auto",
      "relevance": 75,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/clip"
        }
      ],
      "description": "Deprecated. Use the 'clip-path' property when support allows. Defines the visible portion of an element's box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "clip-path",
      "browsers": [
        "E79",
        "FF3.5",
        "S9.1",
        "C55",
        "IE10",
        "O42"
      ],
      "values": [
        {
          "name": "none",
          "description": "No clipping path gets created."
        },
        {
          "name": "url()",
          "description": "References a <clipPath> element to create a clipping path."
        }
      ],
      "syntax": "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
      "relevance": 63,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/clip-path"
        }
      ],
      "description": "Specifies a clipping path where everything inside the path is visible and everything outside is clipped out.",
      "restrictions": [
        "url",
        "shape",
        "geometry-box",
        "enum"
      ]
    },
    {
      "name": "clip-rule",
      "browsers": [
        "E",
        "C5",
        "FF3",
        "IE10",
        "O9",
        "S6"
      ],
      "values": [
        {
          "name": "evenodd",
          "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses."
        },
        {
          "name": "nonzero",
          "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray."
        }
      ],
      "relevance": 50,
      "description": "Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "color",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "syntax": "<color>",
      "relevance": 94,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/color"
        }
      ],
      "description": "Sets the color of an element's text",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "color-interpolation-filters",
      "browsers": [
        "E",
        "C5",
        "FF3",
        "IE10",
        "O9",
        "S6"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Color operations are not required to occur in a particular color space."
        },
        {
          "name": "linearRGB",
          "description": "Color operations should occur in the linearized RGB color space."
        },
        {
          "name": "sRGB",
          "description": "Color operations should occur in the sRGB color space."
        }
      ],
      "relevance": 50,
      "description": "Specifies the color space for imaging operations performed via filter effects.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "column-count",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Determines the number of columns by the 'column-width' property and the element width."
        }
      ],
      "syntax": "<integer> | auto",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-count"
        }
      ],
      "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
      "restrictions": [
        "integer",
        "enum"
      ]
    },
    {
      "name": "column-fill",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O37"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Fills columns sequentially."
        },
        {
          "name": "balance",
          "description": "Balance content equally between columns, if possible."
        }
      ],
      "syntax": "auto | balance | balance-all",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-fill"
        }
      ],
      "description": "In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "column-gap",
      "browsers": [
        "E12",
        "FF1.5",
        "S3",
        "C1",
        "IE10",
        "O11.1"
      ],
      "values": [
        {
          "name": "normal",
          "description": "User agent specific and typically equivalent to 1em."
        }
      ],
      "syntax": "normal | <length-percentage>",
      "relevance": 60,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-gap"
        }
      ],
      "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
      "restrictions": [
        "length",
        "enum"
      ]
    },
    {
      "name": "column-rule",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "syntax": "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule"
        }
      ],
      "description": "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "column-rule-color",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "syntax": "<color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-color"
        }
      ],
      "description": "Sets the color of the column rule",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "column-rule-style",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "syntax": "<'border-style'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-style"
        }
      ],
      "description": "Sets the style of the rule between columns of an element.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "column-rule-width",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "syntax": "<'border-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-width"
        }
      ],
      "description": "Sets the width of the rule between columns. Negative values are not allowed.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "columns",
      "browsers": [
        "E12",
        "FF52",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        }
      ],
      "syntax": "<'column-width'> || <'column-count'>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/columns"
        }
      ],
      "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
      "restrictions": [
        "length",
        "integer",
        "enum"
      ]
    },
    {
      "name": "column-span",
      "browsers": [
        "E12",
        "FF71",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "values": [
        {
          "name": "all",
          "description": "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."
        },
        {
          "name": "none",
          "description": "The element does not span multiple columns."
        }
      ],
      "syntax": "none | all",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-span"
        }
      ],
      "description": "Describes the page/column break behavior after the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "column-width",
      "browsers": [
        "E12",
        "FF50",
        "S9",
        "C50",
        "IE10",
        "O11.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        }
      ],
      "syntax": "<length> | auto",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/column-width"
        }
      ],
      "description": "Describes the width of columns in multicol elements.",
      "restrictions": [
        "length",
        "enum"
      ]
    },
    {
      "name": "contain",
      "browsers": [
        "E79",
        "FF69",
        "S15.4",
        "C52",
        "O39"
      ],
      "values": [
        {
          "name": "none",
          "description": "Indicates that the property has no effect."
        },
        {
          "name": "strict",
          "description": "Turns on all forms of containment for the element."
        },
        {
          "name": "content",
          "description": "All containment rules except size are applied to the element."
        },
        {
          "name": "size",
          "description": "For properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element."
        },
        {
          "name": "layout",
          "description": "Turns on layout containment for the element."
        },
        {
          "name": "style",
          "description": "Turns on style containment for the element."
        },
        {
          "name": "paint",
          "description": "Turns on paint containment for the element."
        }
      ],
      "syntax": "none | strict | content | [ [ size || inline-size ] || layout || style || paint ]",
      "relevance": 59,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/contain"
        }
      ],
      "description": "Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "content",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE8",
        "O4"
      ],
      "values": [
        {
          "name": "attr()",
          "description": "The attr(n) function returns as a string the value of attribute n for the subject of the selector."
        },
        {
          "name": "counter(name)",
          "description": "Counters are denoted by identifiers (see the 'counter-increment' and 'counter-reset' properties)."
        },
        {
          "name": "icon",
          "description": "The (pseudo-)element is replaced in its entirety by the resource referenced by its 'icon' property, and treated as a replaced element."
        },
        {
          "name": "none",
          "description": "On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it causes the pseudo-element to have no content."
        },
        {
          "name": "normal",
          "description": "See http://www.w3.org/TR/css3-content/#content for computation rules."
        },
        {
          "name": "url()"
        }
      ],
      "syntax": "normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?",
      "relevance": 89,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/content"
        }
      ],
      "description": "Determines which page-based occurrence of a given element is applied to a counter or string value.",
      "restrictions": [
        "string",
        "url"
      ]
    },
    {
      "name": "counter-increment",
      "browsers": [
        "E12",
        "FF1",
        "S3",
        "C2",
        "IE8",
        "O9.2"
      ],
      "values": [
        {
          "name": "none",
          "description": "This element does not alter the value of any counters."
        }
      ],
      "syntax": "[ <counter-name> <integer>? ]+ | none",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/counter-increment"
        }
      ],
      "description": "Manipulate the value of existing counters.",
      "restrictions": [
        "identifier",
        "integer"
      ]
    },
    {
      "name": "counter-reset",
      "browsers": [
        "E12",
        "FF1",
        "S3",
        "C2",
        "IE8",
        "O9.2"
      ],
      "values": [
        {
          "name": "none",
          "description": "The counter is not modified."
        }
      ],
      "syntax": "[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/counter-reset"
        }
      ],
      "description": "Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.",
      "restrictions": [
        "identifier",
        "integer"
      ]
    },
    {
      "name": "cursor",
      "browsers": [
        "E12",
        "FF1",
        "S1.2",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "alias",
          "description": "Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it."
        },
        {
          "name": "all-scroll",
          "description": "Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle."
        },
        {
          "name": "auto",
          "description": "The UA determines the cursor to display based on the current context."
        },
        {
          "name": "cell",
          "description": "Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle."
        },
        {
          "name": "col-resize",
          "description": "Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them."
        },
        {
          "name": "context-menu",
          "description": "A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it."
        },
        {
          "name": "copy",
          "description": "Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it."
        },
        {
          "name": "crosshair",
          "description": "A simple crosshair (e.g., short line segments resembling a '+' sign). Often used to indicate a two dimensional bitmap selection mode."
        },
        {
          "name": "default",
          "description": "The platform-dependent default cursor. Often rendered as an arrow."
        },
        {
          "name": "e-resize",
          "description": "Indicates that east edge is to be moved."
        },
        {
          "name": "ew-resize",
          "description": "Indicates a bidirectional east-west resize cursor."
        },
        {
          "name": "grab",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be grabbed."
        },
        {
          "name": "grabbing",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something is being grabbed."
        },
        {
          "name": "help",
          "description": "Help is available for the object under the cursor. Often rendered as a question mark or a balloon."
        },
        {
          "name": "move",
          "description": "Indicates something is to be moved."
        },
        {
          "name": "-moz-grab",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be grabbed."
        },
        {
          "name": "-moz-grabbing",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something is being grabbed."
        },
        {
          "name": "-moz-zoom-in",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be zoomed (magnified) in."
        },
        {
          "name": "-moz-zoom-out",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be zoomed (magnified) out."
        },
        {
          "name": "ne-resize",
          "description": "Indicates that movement starts from north-east corner."
        },
        {
          "name": "nesw-resize",
          "description": "Indicates a bidirectional north-east/south-west cursor."
        },
        {
          "name": "no-drop",
          "description": "Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it."
        },
        {
          "name": "none",
          "description": "No cursor is rendered for the element."
        },
        {
          "name": "not-allowed",
          "description": "Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it."
        },
        {
          "name": "n-resize",
          "description": "Indicates that north edge is to be moved."
        },
        {
          "name": "ns-resize",
          "description": "Indicates a bidirectional north-south cursor."
        },
        {
          "name": "nw-resize",
          "description": "Indicates that movement starts from north-west corner."
        },
        {
          "name": "nwse-resize",
          "description": "Indicates a bidirectional north-west/south-east cursor."
        },
        {
          "name": "pointer",
          "description": "The cursor is a pointer that indicates a link."
        },
        {
          "name": "progress",
          "description": "A progress indicator. The program is performing some processing, but is different from 'wait' in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass."
        },
        {
          "name": "row-resize",
          "description": "Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them."
        },
        {
          "name": "se-resize",
          "description": "Indicates that movement starts from south-east corner."
        },
        {
          "name": "s-resize",
          "description": "Indicates that south edge is to be moved."
        },
        {
          "name": "sw-resize",
          "description": "Indicates that movement starts from south-west corner."
        },
        {
          "name": "text",
          "description": "Indicates text that may be selected. Often rendered as a vertical I-beam."
        },
        {
          "name": "vertical-text",
          "description": "Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam."
        },
        {
          "name": "wait",
          "description": "Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass."
        },
        {
          "name": "-webkit-grab",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be grabbed."
        },
        {
          "name": "-webkit-grabbing",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something is being grabbed."
        },
        {
          "name": "-webkit-zoom-in",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be zoomed (magnified) in."
        },
        {
          "name": "-webkit-zoom-out",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be zoomed (magnified) out."
        },
        {
          "name": "w-resize",
          "description": "Indicates that west edge is to be moved."
        },
        {
          "name": "zoom-in",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be zoomed (magnified) in."
        },
        {
          "name": "zoom-out",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Indicates that something can be zoomed (magnified) out."
        }
      ],
      "syntax": "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/cursor"
        }
      ],
      "description": "Allows control over cursor appearance in an element",
      "restrictions": [
        "url",
        "number",
        "enum"
      ]
    },
    {
      "name": "direction",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C2",
        "IE5.5",
        "O9.2"
      ],
      "values": [
        {
          "name": "ltr",
          "description": "Left-to-right direction."
        },
        {
          "name": "rtl",
          "description": "Right-to-left direction."
        }
      ],
      "syntax": "ltr | rtl",
      "relevance": 71,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/direction"
        }
      ],
      "description": "Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the 'dir' attribute and 'bdo' element rather than this property.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "display",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "block",
          "description": "The element generates a block-level box"
        },
        {
          "name": "contents",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal."
        },
        {
          "name": "flex",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element generates a principal flex container box and establishes a flex formatting context."
        },
        {
          "name": "flexbox",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
        },
        {
          "name": "flow-root",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element generates a block container box, and lays out its contents using flow layout."
        },
        {
          "name": "grid",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element generates a principal grid container box, and establishes a grid formatting context."
        },
        {
          "name": "inline",
          "description": "The element generates an inline-level box."
        },
        {
          "name": "inline-block",
          "description": "A block box, which itself is flowed as a single inline box, similar to a replaced element. The inside of an inline-block is formatted as a block box, and the box itself is formatted as an inline box."
        },
        {
          "name": "inline-flex",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level flex container."
        },
        {
          "name": "inline-flexbox",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level flex container. Standardized as 'inline-flex'"
        },
        {
          "name": "inline-table",
          "description": "Inline-level table wrapper box containing table box."
        },
        {
          "name": "list-item",
          "description": "One or more block boxes and one marker box."
        },
        {
          "name": "-moz-box",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
        },
        {
          "name": "-moz-deck",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-grid",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-grid-group",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-grid-line",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-groupbox",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-inline-box",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level flex container. Standardized as 'inline-flex'"
        },
        {
          "name": "-moz-inline-grid",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-inline-stack",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-marker",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-popup",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-moz-stack",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ]
        },
        {
          "name": "-ms-flexbox",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
        },
        {
          "name": "-ms-grid",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element generates a principal grid container box, and establishes a grid formatting context."
        },
        {
          "name": "-ms-inline-flexbox",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level flex container. Standardized as 'inline-flex'"
        },
        {
          "name": "-ms-inline-grid",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level grid container."
        },
        {
          "name": "none",
          "description": "The element and its descendants generates no boxes."
        },
        {
          "name": "ruby",
          "description": "The element generates a principal ruby container box, and establishes a ruby formatting context."
        },
        {
          "name": "ruby-base"
        },
        {
          "name": "ruby-base-container"
        },
        {
          "name": "ruby-text"
        },
        {
          "name": "ruby-text-container"
        },
        {
          "name": "run-in",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element generates a run-in box. Run-in elements act like inlines or blocks, depending on the surrounding elements."
        },
        {
          "name": "table",
          "description": "The element generates a principal table wrapper box containing an additionally-generated table box, and establishes a table formatting context."
        },
        {
          "name": "table-caption"
        },
        {
          "name": "table-cell"
        },
        {
          "name": "table-column"
        },
        {
          "name": "table-column-group"
        },
        {
          "name": "table-footer-group"
        },
        {
          "name": "table-header-group"
        },
        {
          "name": "table-row"
        },
        {
          "name": "table-row-group"
        },
        {
          "name": "-webkit-box",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
        },
        {
          "name": "-webkit-flex",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "The element lays out its contents using flow layout (block-and-inline layout)."
        },
        {
          "name": "-webkit-inline-box",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level flex container. Standardized as 'inline-flex'"
        },
        {
          "name": "-webkit-inline-flex",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Inline-level flex container."
        }
      ],
      "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
      "relevance": 96,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/display"
        }
      ],
      "description": "In combination with 'float' and 'position', determines the type of box or boxes that are generated for an element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "empty-cells",
      "browsers": [
        "E12",
        "FF1",
        "S1.2",
        "C1",
        "IE8",
        "O4"
      ],
      "values": [
        {
          "name": "hide",
          "description": "No borders or backgrounds are drawn around/behind empty cells."
        },
        {
          "name": "-moz-show-background",
          "browsers": [
            "E12",
            "FF1",
            "S1.2",
            "C1",
            "IE8",
            "O4"
          ]
        },
        {
          "name": "show",
          "description": "Borders and backgrounds are drawn around/behind empty cells (like normal cells)."
        }
      ],
      "syntax": "show | hide",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/empty-cells"
        }
      ],
      "description": "In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "enable-background",
      "values": [
        {
          "name": "accumulate",
          "description": "If the ancestor container element has a property of new, then all graphics elements within the current container are rendered both on the parent's background image and onto the target."
        },
        {
          "name": "new",
          "description": "Create a new background image canvas. All children of the current container element can access the background, and they will be rendered onto both the parent's background image canvas in addition to the target device."
        }
      ],
      "relevance": 50,
      "description": "Deprecated. Use 'isolation' property instead when support allows. Specifies how the accumulation of the background image is managed.",
      "restrictions": [
        "integer",
        "length",
        "percentage",
        "enum"
      ]
    },
    {
      "name": "fallback",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "<counter-style-name>",
      "relevance": 50,
      "description": "@counter-style descriptor. Specifies a fallback counter style to be used when the current counter style can't create a representation for a given counter value.",
      "restrictions": [
        "identifier"
      ]
    },
    {
      "name": "fill",
      "values": [
        {
          "name": "url()",
          "description": "A URL reference to a paint server element, which is an element that defines a paint server: 'hatch', 'linearGradient', 'mesh', 'pattern', 'radialGradient' and 'solidcolor'."
        },
        {
          "name": "none",
          "description": "No paint is applied in this layer."
        }
      ],
      "relevance": 77,
      "description": "Paints the interior of the given graphical element.",
      "restrictions": [
        "color",
        "enum",
        "url"
      ]
    },
    {
      "name": "fill-opacity",
      "relevance": 52,
      "description": "Specifies the opacity of the painting operation used to paint the interior the current object.",
      "restrictions": [
        "number(0-1)"
      ]
    },
    {
      "name": "fill-rule",
      "values": [
        {
          "name": "evenodd",
          "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses."
        },
        {
          "name": "nonzero",
          "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray."
        }
      ],
      "relevance": 51,
      "description": "Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "filter",
      "browsers": [
        "E12",
        "FF35",
        "S9.1",
        "C53",
        "O40"
      ],
      "values": [
        {
          "name": "none",
          "description": "No filter effects are applied."
        },
        {
          "name": "blur()",
          "description": "Applies a Gaussian blur to the input image."
        },
        {
          "name": "brightness()",
          "description": "Applies a linear multiplier to input image, making it appear more or less bright."
        },
        {
          "name": "contrast()",
          "description": "Adjusts the contrast of the input."
        },
        {
          "name": "drop-shadow()",
          "description": "Applies a drop shadow effect to the input image."
        },
        {
          "name": "grayscale()",
          "description": "Converts the input image to grayscale."
        },
        {
          "name": "hue-rotate()",
          "description": "Applies a hue rotation on the input image. "
        },
        {
          "name": "invert()",
          "description": "Inverts the samples in the input image."
        },
        {
          "name": "opacity()",
          "description": "Applies transparency to the samples in the input image."
        },
        {
          "name": "saturate()",
          "description": "Saturates the input image."
        },
        {
          "name": "sepia()",
          "description": "Converts the input image to sepia."
        },
        {
          "name": "url()",
          "browsers": [
            "E12",
            "FF35",
            "S9.1",
            "C53",
            "O40"
          ],
          "description": "A filter reference to a <filter> element."
        }
      ],
      "syntax": "none | <filter-function-list>",
      "relevance": 69,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/filter"
        }
      ],
      "description": "Processes an element's rendering before it is displayed in the document, by applying one or more filter effects.",
      "restrictions": [
        "enum",
        "url"
      ]
    },
    {
      "name": "flex",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Retrieves the value of the main size property as the used 'flex-basis'."
        },
        {
          "name": "content",
          "browsers": [
            "E12",
            "FF20",
            "S9",
            "C29",
            "IE11",
            "O12.1"
          ],
          "description": "Indicates automatic sizing, based on the flex item's content."
        },
        {
          "name": "none",
          "description": "Expands to '0 0 auto'."
        }
      ],
      "syntax": "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
      "relevance": 80,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex"
        }
      ],
      "description": "Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.",
      "restrictions": [
        "length",
        "number",
        "percentage"
      ]
    },
    {
      "name": "flex-basis",
      "browsers": [
        "E12",
        "FF22",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Retrieves the value of the main size property as the used 'flex-basis'."
        },
        {
          "name": "content",
          "browsers": [
            "E12",
            "FF22",
            "S9",
            "C29",
            "IE11",
            "O12.1"
          ],
          "description": "Indicates automatic sizing, based on the flex item's content."
        }
      ],
      "syntax": "content | <'width'>",
      "relevance": 69,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex-basis"
        }
      ],
      "description": "Sets the flex basis.",
      "restrictions": [
        "length",
        "number",
        "percentage"
      ]
    },
    {
      "name": "flex-direction",
      "browsers": [
        "E12",
        "FF81",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "values": [
        {
          "name": "column",
          "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
        },
        {
          "name": "column-reverse",
          "description": "Same as 'column', except the main-start and main-end directions are swapped."
        },
        {
          "name": "row",
          "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
        },
        {
          "name": "row-reverse",
          "description": "Same as 'row', except the main-start and main-end directions are swapped."
        }
      ],
      "syntax": "row | row-reverse | column | column-reverse",
      "relevance": 84,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex-direction"
        }
      ],
      "description": "Specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "flex-flow",
      "browsers": [
        "E12",
        "FF28",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "values": [
        {
          "name": "column",
          "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
        },
        {
          "name": "column-reverse",
          "description": "Same as 'column', except the main-start and main-end directions are swapped."
        },
        {
          "name": "nowrap",
          "description": "The flex container is single-line."
        },
        {
          "name": "row",
          "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
        },
        {
          "name": "row-reverse",
          "description": "Same as 'row', except the main-start and main-end directions are swapped."
        },
        {
          "name": "wrap",
          "description": "The flexbox is multi-line."
        },
        {
          "name": "wrap-reverse",
          "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
        }
      ],
      "syntax": "<'flex-direction'> || <'flex-wrap'>",
      "relevance": 64,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex-flow"
        }
      ],
      "description": "Specifies how flexbox items are placed in the flexbox.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "flex-grow",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "syntax": "<number>",
      "relevance": 77,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex-grow"
        }
      ],
      "description": "Sets the flex grow factor. Negative numbers are invalid.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "flex-shrink",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE10",
        "O12.1"
      ],
      "syntax": "<number>",
      "relevance": 75,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex-shrink"
        }
      ],
      "description": "Sets the flex shrink factor. Negative numbers are invalid.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "flex-wrap",
      "browsers": [
        "E12",
        "FF28",
        "S9",
        "C29",
        "IE11",
        "O17"
      ],
      "values": [
        {
          "name": "nowrap",
          "description": "The flex container is single-line."
        },
        {
          "name": "wrap",
          "description": "The flexbox is multi-line."
        },
        {
          "name": "wrap-reverse",
          "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
        }
      ],
      "syntax": "nowrap | wrap | wrap-reverse",
      "relevance": 81,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/flex-wrap"
        }
      ],
      "description": "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "float",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "inline-end",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "A keyword indicating that the element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts."
        },
        {
          "name": "inline-start",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "A keyword indicating that the element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts."
        },
        {
          "name": "left",
          "description": "The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the 'clear' property)."
        },
        {
          "name": "none",
          "description": "The box is not floated."
        },
        {
          "name": "right",
          "description": "Similar to 'left', except the box is floated to the right, and content flows on the left side of the box, starting at the top."
        }
      ],
      "syntax": "left | right | none | inline-start | inline-end",
      "relevance": 90,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/float"
        }
      ],
      "description": "Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "flood-color",
      "browsers": [
        "E",
        "C5",
        "FF3",
        "IE10",
        "O9",
        "S6"
      ],
      "relevance": 50,
      "description": "Indicates what color to use to flood the current filter primitive subregion.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "flood-opacity",
      "browsers": [
        "E",
        "C5",
        "FF3",
        "IE10",
        "O9",
        "S6"
      ],
      "relevance": 50,
      "description": "Indicates what opacity to use to flood the current filter primitive subregion.",
      "restrictions": [
        "number(0-1)",
        "percentage"
      ]
    },
    {
      "name": "font",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "100",
          "description": "Thin"
        },
        {
          "name": "200",
          "description": "Extra Light (Ultra Light)"
        },
        {
          "name": "300",
          "description": "Light"
        },
        {
          "name": "400",
          "description": "Normal"
        },
        {
          "name": "500",
          "description": "Medium"
        },
        {
          "name": "600",
          "description": "Semi Bold (Demi Bold)"
        },
        {
          "name": "700",
          "description": "Bold"
        },
        {
          "name": "800",
          "description": "Extra Bold (Ultra Bold)"
        },
        {
          "name": "900",
          "description": "Black (Heavy)"
        },
        {
          "name": "bold",
          "description": "Same as 700"
        },
        {
          "name": "bolder",
          "description": "Specifies the weight of the face bolder than the inherited value."
        },
        {
          "name": "caption",
          "description": "The font used for captioned controls (e.g., buttons, drop-downs, etc.)."
        },
        {
          "name": "icon",
          "description": "The font used to label icons."
        },
        {
          "name": "italic",
          "description": "Selects a font that is labeled 'italic', or, if that is not available, one labeled 'oblique'."
        },
        {
          "name": "large"
        },
        {
          "name": "larger"
        },
        {
          "name": "lighter",
          "description": "Specifies the weight of the face lighter than the inherited value."
        },
        {
          "name": "medium"
        },
        {
          "name": "menu",
          "description": "The font used in menus (e.g., dropdown menus and menu lists)."
        },
        {
          "name": "message-box",
          "description": "The font used in dialog boxes."
        },
        {
          "name": "normal",
          "description": "Specifies a face that is not labeled as a small-caps font."
        },
        {
          "name": "oblique",
          "description": "Selects a font that is labeled 'oblique'."
        },
        {
          "name": "small"
        },
        {
          "name": "small-caps",
          "description": "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."
        },
        {
          "name": "small-caption",
          "description": "The font used for labeling small controls."
        },
        {
          "name": "smaller"
        },
        {
          "name": "status-bar",
          "description": "The font used in window status bars."
        },
        {
          "name": "x-large"
        },
        {
          "name": "x-small"
        },
        {
          "name": "xx-large"
        },
        {
          "name": "xx-small"
        }
      ],
      "syntax": "[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
      "relevance": 83,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font"
        }
      ],
      "description": "Shorthand property for setting 'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family', at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.",
      "restrictions": [
        "font"
      ]
    },
    {
      "name": "font-family",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif"
        },
        {
          "name": "Arial, Helvetica, sans-serif"
        },
        {
          "name": "Cambria, Cochin, Georgia, Times, 'Times New Roman', serif"
        },
        {
          "name": "'Courier New', Courier, monospace"
        },
        {
          "name": "cursive"
        },
        {
          "name": "fantasy"
        },
        {
          "name": "'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif"
        },
        {
          "name": "Georgia, 'Times New Roman', Times, serif"
        },
        {
          "name": "'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif"
        },
        {
          "name": "Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif"
        },
        {
          "name": "'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif"
        },
        {
          "name": "monospace"
        },
        {
          "name": "sans-serif"
        },
        {
          "name": "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
        },
        {
          "name": "serif"
        },
        {
          "name": "'Times New Roman', Times, serif"
        },
        {
          "name": "'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif"
        },
        {
          "name": "Verdana, Geneva, Tahoma, sans-serif"
        }
      ],
      "atRule": "@font-face",
      "syntax": "<family-name>",
      "relevance": 93,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-family"
        }
      ],
      "description": "Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.",
      "restrictions": [
        "font"
      ]
    },
    {
      "name": "font-feature-settings",
      "browsers": [
        "E15",
        "FF34",
        "S9.1",
        "C48",
        "IE10",
        "O35"
      ],
      "values": [
        {
          "name": '"aalt"',
          "description": "Access All Alternates."
        },
        {
          "name": '"abvf"',
          "description": "Above-base Forms. Required in Khmer script."
        },
        {
          "name": '"abvm"',
          "description": "Above-base Mark Positioning. Required in Indic scripts."
        },
        {
          "name": '"abvs"',
          "description": "Above-base Substitutions. Required in Indic scripts."
        },
        {
          "name": '"afrc"',
          "description": "Alternative Fractions."
        },
        {
          "name": '"akhn"',
          "description": "Akhand. Required in most Indic scripts."
        },
        {
          "name": '"blwf"',
          "description": "Below-base Form. Required in a number of Indic scripts."
        },
        {
          "name": '"blwm"',
          "description": "Below-base Mark Positioning. Required in Indic scripts."
        },
        {
          "name": '"blws"',
          "description": "Below-base Substitutions. Required in Indic scripts."
        },
        {
          "name": '"calt"',
          "description": "Contextual Alternates."
        },
        {
          "name": '"case"',
          "description": "Case-Sensitive Forms. Applies only to European scripts; particularly prominent in Spanish-language setting."
        },
        {
          "name": '"ccmp"',
          "description": "Glyph Composition/Decomposition."
        },
        {
          "name": '"cfar"',
          "description": "Conjunct Form After Ro. Required in Khmer scripts."
        },
        {
          "name": '"cjct"',
          "description": "Conjunct Forms. Required in Indic scripts that show similarity to Devanagari."
        },
        {
          "name": '"clig"',
          "description": "Contextual Ligatures."
        },
        {
          "name": '"cpct"',
          "description": "Centered CJK Punctuation. Used primarily in Chinese fonts."
        },
        {
          "name": '"cpsp"',
          "description": "Capital Spacing. Should not be used in connecting scripts (e.g. most Arabic)."
        },
        {
          "name": '"cswh"',
          "description": "Contextual Swash."
        },
        {
          "name": '"curs"',
          "description": "Cursive Positioning. Can be used in any cursive script."
        },
        {
          "name": '"c2pc"',
          "description": "Petite Capitals From Capitals. Applies only to bicameral scripts."
        },
        {
          "name": '"c2sc"',
          "description": "Small Capitals From Capitals. Applies only to bicameral scripts."
        },
        {
          "name": '"dist"',
          "description": "Distances. Required in Indic scripts."
        },
        {
          "name": '"dlig"',
          "description": "Discretionary ligatures."
        },
        {
          "name": '"dnom"',
          "description": "Denominators."
        },
        {
          "name": '"dtls"',
          "description": "Dotless Forms. Applied to math formula layout."
        },
        {
          "name": '"expt"',
          "description": "Expert Forms. Applies only to Japanese."
        },
        {
          "name": '"falt"',
          "description": "Final Glyph on Line Alternates. Can be used in any cursive script."
        },
        {
          "name": '"fin2"',
          "description": "Terminal Form #2. Used only with the Syriac script."
        },
        {
          "name": '"fin3"',
          "description": "Terminal Form #3. Used only with the Syriac script."
        },
        {
          "name": '"fina"',
          "description": "Terminal Forms. Can be used in any alphabetic script."
        },
        {
          "name": '"flac"',
          "description": "Flattened ascent forms. Applied to math formula layout."
        },
        {
          "name": '"frac"',
          "description": "Fractions."
        },
        {
          "name": '"fwid"',
          "description": "Full Widths. Applies to any script which can use monospaced forms."
        },
        {
          "name": '"half"',
          "description": "Half Forms. Required in Indic scripts that show similarity to Devanagari."
        },
        {
          "name": '"haln"',
          "description": "Halant Forms. Required in Indic scripts."
        },
        {
          "name": '"halt"',
          "description": "Alternate Half Widths. Used only in CJKV fonts."
        },
        {
          "name": '"hist"',
          "description": "Historical Forms."
        },
        {
          "name": '"hkna"',
          "description": "Horizontal Kana Alternates. Applies only to fonts that support kana (hiragana and katakana)."
        },
        {
          "name": '"hlig"',
          "description": "Historical Ligatures."
        },
        {
          "name": '"hngl"',
          "description": "Hangul. Korean only."
        },
        {
          "name": '"hojo"',
          "description": "Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms). Used only with Kanji script."
        },
        {
          "name": '"hwid"',
          "description": "Half Widths. Generally used only in CJKV fonts."
        },
        {
          "name": '"init"',
          "description": "Initial Forms. Can be used in any alphabetic script."
        },
        {
          "name": '"isol"',
          "description": "Isolated Forms. Can be used in any cursive script."
        },
        {
          "name": '"ital"',
          "description": "Italics. Applies mostly to Latin; note that many non-Latin fonts contain Latin as well."
        },
        {
          "name": '"jalt"',
          "description": "Justification Alternates. Can be used in any cursive script."
        },
        {
          "name": '"jp78"',
          "description": "JIS78 Forms. Applies only to Japanese."
        },
        {
          "name": '"jp83"',
          "description": "JIS83 Forms. Applies only to Japanese."
        },
        {
          "name": '"jp90"',
          "description": "JIS90 Forms. Applies only to Japanese."
        },
        {
          "name": '"jp04"',
          "description": "JIS2004 Forms. Applies only to Japanese."
        },
        {
          "name": '"kern"',
          "description": "Kerning."
        },
        {
          "name": '"lfbd"',
          "description": "Left Bounds."
        },
        {
          "name": '"liga"',
          "description": "Standard Ligatures."
        },
        {
          "name": '"ljmo"',
          "description": "Leading Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
        },
        {
          "name": '"lnum"',
          "description": "Lining Figures."
        },
        {
          "name": '"locl"',
          "description": "Localized Forms."
        },
        {
          "name": '"ltra"',
          "description": "Left-to-right glyph alternates."
        },
        {
          "name": '"ltrm"',
          "description": "Left-to-right mirrored forms."
        },
        {
          "name": '"mark"',
          "description": "Mark Positioning."
        },
        {
          "name": '"med2"',
          "description": "Medial Form #2. Used only with the Syriac script."
        },
        {
          "name": '"medi"',
          "description": "Medial Forms."
        },
        {
          "name": '"mgrk"',
          "description": "Mathematical Greek."
        },
        {
          "name": '"mkmk"',
          "description": "Mark to Mark Positioning."
        },
        {
          "name": '"nalt"',
          "description": "Alternate Annotation Forms."
        },
        {
          "name": '"nlck"',
          "description": "NLC Kanji Forms. Used only with Kanji script."
        },
        {
          "name": '"nukt"',
          "description": "Nukta Forms. Required in Indic scripts.."
        },
        {
          "name": '"numr"',
          "description": "Numerators."
        },
        {
          "name": '"onum"',
          "description": "Oldstyle Figures."
        },
        {
          "name": '"opbd"',
          "description": "Optical Bounds."
        },
        {
          "name": '"ordn"',
          "description": "Ordinals. Applies mostly to Latin script."
        },
        {
          "name": '"ornm"',
          "description": "Ornaments."
        },
        {
          "name": '"palt"',
          "description": "Proportional Alternate Widths. Used mostly in CJKV fonts."
        },
        {
          "name": '"pcap"',
          "description": "Petite Capitals."
        },
        {
          "name": '"pkna"',
          "description": "Proportional Kana. Generally used only in Japanese fonts."
        },
        {
          "name": '"pnum"',
          "description": "Proportional Figures."
        },
        {
          "name": '"pref"',
          "description": "Pre-base Forms. Required in Khmer and Myanmar (Burmese) scripts and southern Indic scripts that may display a pre-base form of Ra."
        },
        {
          "name": '"pres"',
          "description": "Pre-base Substitutions. Required in Indic scripts."
        },
        {
          "name": '"pstf"',
          "description": "Post-base Forms. Required in scripts of south and southeast Asia that have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer."
        },
        {
          "name": '"psts"',
          "description": "Post-base Substitutions."
        },
        {
          "name": '"pwid"',
          "description": "Proportional Widths."
        },
        {
          "name": '"qwid"',
          "description": "Quarter Widths. Generally used only in CJKV fonts."
        },
        {
          "name": '"rand"',
          "description": "Randomize."
        },
        {
          "name": '"rclt"',
          "description": "Required Contextual Alternates. May apply to any script, but is especially important for many styles of Arabic."
        },
        {
          "name": '"rlig"',
          "description": "Required Ligatures. Applies to Arabic and Syriac. May apply to some other scripts."
        },
        {
          "name": '"rkrf"',
          "description": "Rakar Forms. Required in Devanagari and Gujarati scripts."
        },
        {
          "name": '"rphf"',
          "description": "Reph Form. Required in Indic scripts. E.g. Devanagari, Kannada."
        },
        {
          "name": '"rtbd"',
          "description": "Right Bounds."
        },
        {
          "name": '"rtla"',
          "description": "Right-to-left alternates."
        },
        {
          "name": '"rtlm"',
          "description": "Right-to-left mirrored forms."
        },
        {
          "name": '"ruby"',
          "description": "Ruby Notation Forms. Applies only to Japanese."
        },
        {
          "name": '"salt"',
          "description": "Stylistic Alternates."
        },
        {
          "name": '"sinf"',
          "description": "Scientific Inferiors."
        },
        {
          "name": '"size"',
          "description": "Optical size."
        },
        {
          "name": '"smcp"',
          "description": "Small Capitals. Applies only to bicameral scripts."
        },
        {
          "name": '"smpl"',
          "description": "Simplified Forms. Applies only to Chinese and Japanese."
        },
        {
          "name": '"ssty"',
          "description": "Math script style alternates."
        },
        {
          "name": '"stch"',
          "description": "Stretching Glyph Decomposition."
        },
        {
          "name": '"subs"',
          "description": "Subscript."
        },
        {
          "name": '"sups"',
          "description": "Superscript."
        },
        {
          "name": '"swsh"',
          "description": "Swash. Does not apply to ideographic scripts."
        },
        {
          "name": '"titl"',
          "description": "Titling."
        },
        {
          "name": '"tjmo"',
          "description": "Trailing Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
        },
        {
          "name": '"tnam"',
          "description": "Traditional Name Forms. Applies only to Japanese."
        },
        {
          "name": '"tnum"',
          "description": "Tabular Figures."
        },
        {
          "name": '"trad"',
          "description": "Traditional Forms. Applies only to Chinese and Japanese."
        },
        {
          "name": '"twid"',
          "description": "Third Widths. Generally used only in CJKV fonts."
        },
        {
          "name": '"unic"',
          "description": "Unicase."
        },
        {
          "name": '"valt"',
          "description": "Alternate Vertical Metrics. Applies only to scripts with vertical writing modes."
        },
        {
          "name": '"vatu"',
          "description": "Vattu Variants. Used for Indic scripts. E.g. Devanagari."
        },
        {
          "name": '"vert"',
          "description": "Vertical Alternates. Applies only to scripts with vertical writing modes."
        },
        {
          "name": '"vhal"',
          "description": "Alternate Vertical Half Metrics. Used only in CJKV fonts."
        },
        {
          "name": '"vjmo"',
          "description": "Vowel Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
        },
        {
          "name": '"vkna"',
          "description": "Vertical Kana Alternates. Applies only to fonts that support kana (hiragana and katakana)."
        },
        {
          "name": '"vkrn"',
          "description": "Vertical Kerning."
        },
        {
          "name": '"vpal"',
          "description": "Proportional Alternate Vertical Metrics. Used mostly in CJKV fonts."
        },
        {
          "name": '"vrt2"',
          "description": "Vertical Alternates and Rotation. Applies only to scripts with vertical writing modes."
        },
        {
          "name": '"zero"',
          "description": "Slashed Zero."
        },
        {
          "name": "normal",
          "description": "No change in glyph substitution or positioning occurs."
        },
        {
          "name": "off",
          "description": "Disable feature."
        },
        {
          "name": "on",
          "description": "Enable feature."
        }
      ],
      "atRule": "@font-face",
      "syntax": "normal | <feature-tag-value>#",
      "relevance": 57,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-feature-settings"
        }
      ],
      "description": "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
      "restrictions": [
        "string",
        "integer"
      ]
    },
    {
      "name": "font-kerning",
      "browsers": [
        "E79",
        "FF32",
        "S9",
        "C33",
        "O20"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Specifies that kerning is applied at the discretion of the user agent."
        },
        {
          "name": "none",
          "description": "Specifies that kerning is not applied."
        },
        {
          "name": "normal",
          "description": "Specifies that kerning is applied."
        }
      ],
      "syntax": "auto | normal | none",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-kerning"
        }
      ],
      "description": "Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-language-override",
      "browsers": [
        "FF34"
      ],
      "values": [
        {
          "name": "normal",
          "description": "Implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering."
        }
      ],
      "syntax": "normal | <string>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-language-override"
        }
      ],
      "description": "The value of 'normal' implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.",
      "restrictions": [
        "string"
      ]
    },
    {
      "name": "font-size",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O7"
      ],
      "values": [
        {
          "name": "large"
        },
        {
          "name": "larger"
        },
        {
          "name": "medium"
        },
        {
          "name": "small"
        },
        {
          "name": "smaller"
        },
        {
          "name": "x-large"
        },
        {
          "name": "x-small"
        },
        {
          "name": "xx-large"
        },
        {
          "name": "xx-small"
        }
      ],
      "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
      "relevance": 94,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-size"
        }
      ],
      "description": "Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "font-size-adjust",
      "browsers": [
        "FF3",
        "S16.4"
      ],
      "values": [
        {
          "name": "none",
          "description": "Do not preserve the font's x-height."
        }
      ],
      "syntax": "none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-size-adjust"
        }
      ],
      "description": "Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same regardless of the font used.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "font-stretch",
      "browsers": [
        "E12",
        "FF9",
        "S11",
        "C60",
        "IE9",
        "O47"
      ],
      "values": [
        {
          "name": "condensed"
        },
        {
          "name": "expanded"
        },
        {
          "name": "extra-condensed"
        },
        {
          "name": "extra-expanded"
        },
        {
          "name": "narrower",
          "browsers": [
            "E12",
            "FF9",
            "S11",
            "C60",
            "IE9",
            "O47"
          ],
          "description": "Indicates a narrower value relative to the width of the parent element."
        },
        {
          "name": "normal"
        },
        {
          "name": "semi-condensed"
        },
        {
          "name": "semi-expanded"
        },
        {
          "name": "ultra-condensed"
        },
        {
          "name": "ultra-expanded"
        },
        {
          "name": "wider",
          "browsers": [
            "E12",
            "FF9",
            "S11",
            "C60",
            "IE9",
            "O47"
          ],
          "description": "Indicates a wider value relative to the width of the parent element."
        }
      ],
      "atRule": "@font-face",
      "syntax": "<font-stretch-absolute>{1,2}",
      "relevance": 56,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-stretch"
        }
      ],
      "description": "Selects a normal, condensed, or expanded face from a font family.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "italic",
          "description": "Selects a font that is labeled as an 'italic' face, or an 'oblique' face if one is not"
        },
        {
          "name": "normal",
          "description": "Selects a face that is classified as 'normal'."
        },
        {
          "name": "oblique",
          "description": "Selects a font that is labeled as an 'oblique' face, or an 'italic' face if one is not."
        }
      ],
      "atRule": "@font-face",
      "syntax": "normal | italic | oblique <angle>{0,2}",
      "relevance": 89,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-style"
        }
      ],
      "description": "Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-synthesis",
      "browsers": [
        "E97",
        "FF34",
        "S9",
        "C97",
        "O83"
      ],
      "values": [
        {
          "name": "none",
          "description": "Disallow all synthetic faces."
        },
        {
          "name": "style",
          "description": "Allow synthetic italic faces."
        },
        {
          "name": "weight",
          "description": "Allow synthetic bold faces."
        }
      ],
      "syntax": "none | [ weight || style || small-caps ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis"
        }
      ],
      "description": "Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "normal",
          "description": "Specifies a face that is not labeled as a small-caps font."
        },
        {
          "name": "small-caps",
          "description": "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."
        }
      ],
      "atRule": "@font-face",
      "syntax": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
      "relevance": 64,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant"
        }
      ],
      "description": "Specifies variant representations of the font",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant-alternates",
      "browsers": [
        "E111",
        "FF34",
        "S9.1",
        "C111",
        "O97"
      ],
      "values": [
        {
          "name": "annotation()",
          "description": "Enables display of alternate annotation forms."
        },
        {
          "name": "character-variant()",
          "description": "Enables display of specific character variants."
        },
        {
          "name": "historical-forms",
          "description": "Enables display of historical forms."
        },
        {
          "name": "normal",
          "description": "None of the features are enabled."
        },
        {
          "name": "ornaments()",
          "description": "Enables replacement of default glyphs with ornaments, if provided in the font."
        },
        {
          "name": "styleset()",
          "description": "Enables display with stylistic sets."
        },
        {
          "name": "stylistic()",
          "description": "Enables display of stylistic alternates."
        },
        {
          "name": "swash()",
          "description": "Enables display of swash glyphs."
        }
      ],
      "syntax": "normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates"
        }
      ],
      "description": "For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant-caps",
      "browsers": [
        "E79",
        "FF34",
        "S9.1",
        "C52",
        "O39"
      ],
      "values": [
        {
          "name": "all-petite-caps",
          "description": "Enables display of petite capitals for both upper and lowercase letters."
        },
        {
          "name": "all-small-caps",
          "description": "Enables display of small capitals for both upper and lowercase letters."
        },
        {
          "name": "normal",
          "description": "None of the features are enabled."
        },
        {
          "name": "petite-caps",
          "description": "Enables display of petite capitals."
        },
        {
          "name": "small-caps",
          "description": "Enables display of small capitals. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."
        },
        {
          "name": "titling-caps",
          "description": "Enables display of titling capitals."
        },
        {
          "name": "unicase",
          "description": "Enables display of mixture of small capitals for uppercase letters with normal lowercase letters."
        }
      ],
      "syntax": "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-caps"
        }
      ],
      "description": "Specifies control over capitalized forms.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant-east-asian",
      "browsers": [
        "E79",
        "FF34",
        "S9.1",
        "C63",
        "O50"
      ],
      "values": [
        {
          "name": "full-width",
          "description": "Enables rendering of full-width variants."
        },
        {
          "name": "jis04",
          "description": "Enables rendering of JIS04 forms."
        },
        {
          "name": "jis78",
          "description": "Enables rendering of JIS78 forms."
        },
        {
          "name": "jis83",
          "description": "Enables rendering of JIS83 forms."
        },
        {
          "name": "jis90",
          "description": "Enables rendering of JIS90 forms."
        },
        {
          "name": "normal",
          "description": "None of the features are enabled."
        },
        {
          "name": "proportional-width",
          "description": "Enables rendering of proportionally-spaced variants."
        },
        {
          "name": "ruby",
          "description": "Enables display of ruby variant glyphs."
        },
        {
          "name": "simplified",
          "description": "Enables rendering of simplified forms."
        },
        {
          "name": "traditional",
          "description": "Enables rendering of traditional forms."
        }
      ],
      "syntax": "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian"
        }
      ],
      "description": "Allows control of glyph substitute and positioning in East Asian text.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant-ligatures",
      "browsers": [
        "E79",
        "FF34",
        "S9.1",
        "C34",
        "O21"
      ],
      "values": [
        {
          "name": "additional-ligatures",
          "description": "Enables display of additional ligatures."
        },
        {
          "name": "common-ligatures",
          "description": "Enables display of common ligatures."
        },
        {
          "name": "contextual",
          "browsers": [
            "E79",
            "FF34",
            "S9.1",
            "C34",
            "O21"
          ],
          "description": "Enables display of contextual alternates."
        },
        {
          "name": "discretionary-ligatures",
          "description": "Enables display of discretionary ligatures."
        },
        {
          "name": "historical-ligatures",
          "description": "Enables display of historical ligatures."
        },
        {
          "name": "no-additional-ligatures",
          "description": "Disables display of additional ligatures."
        },
        {
          "name": "no-common-ligatures",
          "description": "Disables display of common ligatures."
        },
        {
          "name": "no-contextual",
          "browsers": [
            "E79",
            "FF34",
            "S9.1",
            "C34",
            "O21"
          ],
          "description": "Disables display of contextual alternates."
        },
        {
          "name": "no-discretionary-ligatures",
          "description": "Disables display of discretionary ligatures."
        },
        {
          "name": "no-historical-ligatures",
          "description": "Disables display of historical ligatures."
        },
        {
          "name": "none",
          "browsers": [
            "E79",
            "FF34",
            "S9.1",
            "C34",
            "O21"
          ],
          "description": "Disables all ligatures."
        },
        {
          "name": "normal",
          "description": "Implies that the defaults set by the font are used."
        }
      ],
      "syntax": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures"
        }
      ],
      "description": "Specifies control over which ligatures are enabled or disabled. A value of 'normal' implies that the defaults set by the font are used.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant-numeric",
      "browsers": [
        "E79",
        "FF34",
        "S9.1",
        "C52",
        "O39"
      ],
      "values": [
        {
          "name": "diagonal-fractions",
          "description": "Enables display of lining diagonal fractions."
        },
        {
          "name": "lining-nums",
          "description": "Enables display of lining numerals."
        },
        {
          "name": "normal",
          "description": "None of the features are enabled."
        },
        {
          "name": "oldstyle-nums",
          "description": "Enables display of old-style numerals."
        },
        {
          "name": "ordinal",
          "description": "Enables display of letter forms used with ordinal numbers."
        },
        {
          "name": "proportional-nums",
          "description": "Enables display of proportional numerals."
        },
        {
          "name": "slashed-zero",
          "description": "Enables display of slashed zeros."
        },
        {
          "name": "stacked-fractions",
          "description": "Enables display of lining stacked fractions."
        },
        {
          "name": "tabular-nums",
          "description": "Enables display of tabular numerals."
        }
      ],
      "syntax": "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric"
        }
      ],
      "description": "Specifies control over numerical forms.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-variant-position",
      "browsers": [
        "FF34",
        "S9.1"
      ],
      "values": [
        {
          "name": "normal",
          "description": "None of the features are enabled."
        },
        {
          "name": "sub",
          "description": "Enables display of subscript variants (OpenType feature: subs)."
        },
        {
          "name": "super",
          "description": "Enables display of superscript variants (OpenType feature: sups)."
        }
      ],
      "syntax": "normal | sub | super",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-position"
        }
      ],
      "description": "Specifies the vertical position",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "font-weight",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C2",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "100",
          "description": "Thin"
        },
        {
          "name": "200",
          "description": "Extra Light (Ultra Light)"
        },
        {
          "name": "300",
          "description": "Light"
        },
        {
          "name": "400",
          "description": "Normal"
        },
        {
          "name": "500",
          "description": "Medium"
        },
        {
          "name": "600",
          "description": "Semi Bold (Demi Bold)"
        },
        {
          "name": "700",
          "description": "Bold"
        },
        {
          "name": "800",
          "description": "Extra Bold (Ultra Bold)"
        },
        {
          "name": "900",
          "description": "Black (Heavy)"
        },
        {
          "name": "bold",
          "description": "Same as 700"
        },
        {
          "name": "bolder",
          "description": "Specifies the weight of the face bolder than the inherited value."
        },
        {
          "name": "lighter",
          "description": "Specifies the weight of the face lighter than the inherited value."
        },
        {
          "name": "normal",
          "description": "Same as 400"
        }
      ],
      "atRule": "@font-face",
      "syntax": "<font-weight-absolute>{1,2}",
      "relevance": 93,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-weight"
        }
      ],
      "description": "Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "glyph-orientation-horizontal",
      "relevance": 50,
      "description": "Controls glyph orientation when the inline-progression-direction is horizontal.",
      "restrictions": [
        "angle",
        "number"
      ]
    },
    {
      "name": "glyph-orientation-vertical",
      "values": [
        {
          "name": "auto",
          "description": "Sets the orientation based on the fullwidth or non-fullwidth characters and the most common orientation."
        }
      ],
      "relevance": 50,
      "description": "Controls glyph orientation when the inline-progression-direction is vertical.",
      "restrictions": [
        "angle",
        "number",
        "enum"
      ]
    },
    {
      "name": "grid-area",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line> [ / <grid-line> ]{0,3}",
      "relevance": 57,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-area"
        }
      ],
      "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end'.",
      "restrictions": [
        "identifier",
        "integer"
      ]
    },
    {
      "name": "grid",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "syntax": "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid"
        }
      ],
      "description": "The grid CSS property is a shorthand property that sets all of the explicit grid properties ('grid-template-rows', 'grid-template-columns', and 'grid-template-areas'), and all the implicit grid properties ('grid-auto-rows', 'grid-auto-columns', and 'grid-auto-flow'), in a single declaration.",
      "restrictions": [
        "identifier",
        "length",
        "percentage",
        "string",
        "enum"
      ]
    },
    {
      "name": "grid-auto-columns",
      "browsers": [
        "E16",
        "FF70",
        "S10.1",
        "C57",
        "IE10",
        "O44"
      ],
      "values": [
        {
          "name": "min-content",
          "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "max-content",
          "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "auto",
          "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
        },
        {
          "name": "minmax()",
          "description": "Defines a size range greater than or equal to min and less than or equal to max."
        }
      ],
      "syntax": "<track-size>+",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns"
        }
      ],
      "description": "Specifies the size of implicitly created columns.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "grid-auto-flow",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "row",
          "description": "The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary."
        },
        {
          "name": "column",
          "description": "The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary."
        },
        {
          "name": "dense",
          "description": 'If specified, the auto-placement algorithm uses a "dense" packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later.'
        }
      ],
      "syntax": "[ row | column ] || dense",
      "relevance": 52,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow"
        }
      ],
      "description": "Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "grid-auto-rows",
      "browsers": [
        "E16",
        "FF70",
        "S10.1",
        "C57",
        "IE10",
        "O44"
      ],
      "values": [
        {
          "name": "min-content",
          "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "max-content",
          "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "auto",
          "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
        },
        {
          "name": "minmax()",
          "description": "Defines a size range greater than or equal to min and less than or equal to max."
        }
      ],
      "syntax": "<track-size>+",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows"
        }
      ],
      "description": "Specifies the size of implicitly created rows.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "grid-column",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line> [ / <grid-line> ]?",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column"
        }
      ],
      "description": "Shorthand for 'grid-column-start' and 'grid-column-end'.",
      "restrictions": [
        "identifier",
        "integer",
        "enum"
      ]
    },
    {
      "name": "grid-column-end",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column-end"
        }
      ],
      "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
      "restrictions": [
        "identifier",
        "integer",
        "enum"
      ]
    },
    {
      "name": "grid-column-gap",
      "browsers": [
        "FF52",
        "C57",
        "S10.1",
        "O44"
      ],
      "status": "obsolete",
      "syntax": "<length-percentage>",
      "relevance": 3,
      "description": "Specifies the gutters between grid columns. Replaced by 'column-gap' property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "grid-column-start",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column-start"
        }
      ],
      "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
      "restrictions": [
        "identifier",
        "integer",
        "enum"
      ]
    },
    {
      "name": "grid-gap",
      "browsers": [
        "FF52",
        "C57",
        "S10.1",
        "O44"
      ],
      "status": "obsolete",
      "syntax": "<'grid-row-gap'> <'grid-column-gap'>?",
      "relevance": 4,
      "description": "Shorthand that specifies the gutters between grid columns and grid rows in one declaration. Replaced by 'gap' property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "grid-row",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line> [ / <grid-line> ]?",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row"
        }
      ],
      "description": "Shorthand for 'grid-row-start' and 'grid-row-end'.",
      "restrictions": [
        "identifier",
        "integer",
        "enum"
      ]
    },
    {
      "name": "grid-row-end",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row-end"
        }
      ],
      "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
      "restrictions": [
        "identifier",
        "integer",
        "enum"
      ]
    },
    {
      "name": "grid-row-gap",
      "browsers": [
        "FF52",
        "C57",
        "S10.1",
        "O44"
      ],
      "status": "obsolete",
      "syntax": "<length-percentage>",
      "relevance": 2,
      "description": "Specifies the gutters between grid rows. Replaced by 'row-gap' property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "grid-row-start",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
        },
        {
          "name": "span",
          "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
        }
      ],
      "syntax": "<grid-line>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row-start"
        }
      ],
      "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
      "restrictions": [
        "identifier",
        "integer",
        "enum"
      ]
    },
    {
      "name": "grid-template",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "none",
          "description": "Sets all three properties to their initial values."
        },
        {
          "name": "min-content",
          "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "max-content",
          "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "auto",
          "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
        },
        {
          "name": "subgrid",
          "description": "Sets 'grid-template-rows' and 'grid-template-columns' to 'subgrid', and 'grid-template-areas' to its initial value."
        },
        {
          "name": "minmax()",
          "description": "Defines a size range greater than or equal to min and less than or equal to max."
        },
        {
          "name": "repeat()",
          "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
        }
      ],
      "syntax": "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template"
        }
      ],
      "description": "Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.",
      "restrictions": [
        "identifier",
        "length",
        "percentage",
        "string",
        "enum"
      ]
    },
    {
      "name": "grid-template-areas",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "none",
          "description": "The grid container doesn't define any named grid areas."
        }
      ],
      "syntax": "none | <string>+",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-areas"
        }
      ],
      "description": "Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.",
      "restrictions": [
        "string"
      ]
    },
    {
      "name": "grid-template-columns",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "IE10",
        "O44"
      ],
      "values": [
        {
          "name": "none",
          "description": "There is no explicit grid; any rows/columns will be implicitly generated."
        },
        {
          "name": "min-content",
          "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "max-content",
          "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "auto",
          "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
        },
        {
          "name": "subgrid",
          "description": "Indicates that the grid will align to its parent grid in that axis."
        },
        {
          "name": "minmax()",
          "description": "Defines a size range greater than or equal to min and less than or equal to max."
        },
        {
          "name": "repeat()",
          "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
        }
      ],
      "syntax": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
      "relevance": 63,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-columns"
        }
      ],
      "description": "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
      "restrictions": [
        "identifier",
        "length",
        "percentage",
        "enum"
      ]
    },
    {
      "name": "grid-template-rows",
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "IE10",
        "O44"
      ],
      "values": [
        {
          "name": "none",
          "description": "There is no explicit grid; any rows/columns will be implicitly generated."
        },
        {
          "name": "min-content",
          "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "max-content",
          "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
        },
        {
          "name": "auto",
          "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
        },
        {
          "name": "subgrid",
          "description": "Indicates that the grid will align to its parent grid in that axis."
        },
        {
          "name": "minmax()",
          "description": "Defines a size range greater than or equal to min and less than or equal to max."
        },
        {
          "name": "repeat()",
          "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
        }
      ],
      "syntax": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
      "relevance": 56,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-rows"
        }
      ],
      "description": "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
      "restrictions": [
        "identifier",
        "length",
        "percentage",
        "string",
        "enum"
      ]
    },
    {
      "name": "height",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The height depends on the values of other properties."
        },
        {
          "name": "fit-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
        },
        {
          "name": "max-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
        },
        {
          "name": "min-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
        }
      ],
      "atRule": "@viewport",
      "syntax": "<viewport-length>{1,2}",
      "relevance": 96,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/height"
        }
      ],
      "description": "Specifies the height of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "hyphens",
      "browsers": [
        "E79",
        "FF43",
        "S5.1",
        "C55",
        "IE10",
        "O42"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
        },
        {
          "name": "manual",
          "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
        },
        {
          "name": "none",
          "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
        }
      ],
      "syntax": "none | manual | auto",
      "relevance": 56,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/hyphens"
        }
      ],
      "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "image-orientation",
      "browsers": [
        "E81",
        "FF26",
        "S13.1",
        "C81",
        "O67"
      ],
      "values": [
        {
          "name": "flip",
          "description": "After rotating by the precededing angle, the image is flipped horizontally. Defaults to 0deg if the angle is ommitted."
        },
        {
          "name": "from-image",
          "description": "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image."
        }
      ],
      "syntax": "from-image | <angle> | [ <angle>? flip ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/image-orientation"
        }
      ],
      "description": "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
      "restrictions": [
        "angle"
      ]
    },
    {
      "name": "image-rendering",
      "browsers": [
        "E79",
        "FF3.6",
        "S6",
        "C13",
        "O15"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The image should be scaled with an algorithm that maximizes the appearance of the image."
        },
        {
          "name": "crisp-edges",
          "description": "The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process."
        },
        {
          "name": "-moz-crisp-edges",
          "browsers": [
            "E79",
            "FF3.6",
            "S6",
            "C13",
            "O15"
          ]
        },
        {
          "name": "optimizeQuality",
          "description": "Deprecated."
        },
        {
          "name": "optimizeSpeed",
          "description": "Deprecated."
        },
        {
          "name": "pixelated",
          "description": "When scaling the image up, the 'nearest neighbor' or similar algorithm must be used, so that the image appears to be simply composed of very large pixels."
        }
      ],
      "syntax": "auto | crisp-edges | pixelated",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/image-rendering"
        }
      ],
      "description": "Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "ime-mode",
      "browsers": [
        "E12",
        "FF3",
        "IE5"
      ],
      "values": [
        {
          "name": "active",
          "description": "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it."
        },
        {
          "name": "auto",
          "description": "No change is made to the current input method editor state. This is the default."
        },
        {
          "name": "disabled",
          "description": "The input method editor is disabled and may not be activated by the user."
        },
        {
          "name": "inactive",
          "description": "The input method editor is initially inactive, but the user may activate it if they wish."
        },
        {
          "name": "normal",
          "description": "The IME state should be normal; this value can be used in a user style sheet to override the page setting."
        }
      ],
      "status": "obsolete",
      "syntax": "auto | normal | active | inactive | disabled",
      "relevance": 0,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/ime-mode"
        }
      ],
      "description": "Controls the state of the input method editor for text fields.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "inline-size",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Depends on the values of other properties."
        }
      ],
      "syntax": "<'width'>",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inline-size"
        }
      ],
      "description": "Size of an element in the direction specified by 'writing-mode'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "isolation",
      "browsers": [
        "E79",
        "FF36",
        "S8",
        "C41",
        "O30"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Elements are not isolated unless an operation is applied that causes the creation of a stacking context."
        },
        {
          "name": "isolate",
          "description": "In CSS will turn the element into a stacking context."
        }
      ],
      "syntax": "auto | isolate",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/isolation"
        }
      ],
      "description": "In CSS setting to 'isolate' will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "justify-content",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "values": [
        {
          "name": "center",
          "description": "Flex items are packed toward the center of the line."
        },
        {
          "name": "start",
          "description": "The items are packed flush to each other toward the start edge of the alignment container in the main axis."
        },
        {
          "name": "end",
          "description": "The items are packed flush to each other toward the end edge of the alignment container in the main axis."
        },
        {
          "name": "left",
          "description": "The items are packed flush to each other toward the left edge of the alignment container in the main axis."
        },
        {
          "name": "right",
          "description": "The items are packed flush to each other toward the right edge of the alignment container in the main axis."
        },
        {
          "name": "safe",
          "description": "If the size of the item overflows the alignment container, the item is instead aligned as if the alignment mode were start."
        },
        {
          "name": "unsafe",
          "description": "Regardless of the relative sizes of the item and alignment container, the given alignment value is honored."
        },
        {
          "name": "stretch",
          "description": "If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container."
        },
        {
          "name": "space-evenly",
          "description": "The items are evenly distributed within the alignment container along the main axis."
        },
        {
          "name": "flex-end",
          "description": "Flex items are packed toward the end of the line."
        },
        {
          "name": "flex-start",
          "description": "Flex items are packed toward the start of the line."
        },
        {
          "name": "space-around",
          "description": "Flex items are evenly distributed in the line, with half-size spaces on either end."
        },
        {
          "name": "space-between",
          "description": "Flex items are evenly distributed in the line."
        },
        {
          "name": "baseline",
          "description": "Specifies participation in first-baseline alignment."
        },
        {
          "name": "first baseline",
          "description": "Specifies participation in first-baseline alignment."
        },
        {
          "name": "last baseline",
          "description": "Specifies participation in last-baseline alignment."
        }
      ],
      "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
      "relevance": 86,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/justify-content"
        }
      ],
      "description": "Aligns flex items along the main axis of the current line of the flex container.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "kerning",
      "values": [
        {
          "name": "auto",
          "description": "Indicates that the user agent should adjust inter-glyph spacing based on kerning tables that are included in the font that will be used."
        }
      ],
      "relevance": 50,
      "description": "Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.",
      "restrictions": [
        "length",
        "enum"
      ]
    },
    {
      "name": "left",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 95,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/left"
        }
      ],
      "description": "Specifies how far an absolutely positioned box's left margin edge is offset to the right of the left edge of the box's 'containing block'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "letter-spacing",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "normal",
          "description": "The spacing is the normal spacing for the current font. It is typically zero-length."
        }
      ],
      "syntax": "normal | <length>",
      "relevance": 81,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/letter-spacing"
        }
      ],
      "description": "Specifies the minimum, maximum, and optimal spacing between grapheme clusters.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "lighting-color",
      "browsers": [
        "E",
        "C5",
        "FF3",
        "IE10",
        "O9",
        "S6"
      ],
      "relevance": 50,
      "description": "Defines the color of the light source for filter primitives 'feDiffuseLighting' and 'feSpecularLighting'.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "line-break",
      "browsers": [
        "E14",
        "FF69",
        "S11",
        "C58",
        "IE5.5",
        "O45"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."
        },
        {
          "name": "loose",
          "description": "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."
        },
        {
          "name": "normal",
          "description": "Breaks text using the most common set of line-breaking rules."
        },
        {
          "name": "strict",
          "description": "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."
        },
        {
          "name": "anywhere",
          "description": "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property."
        }
      ],
      "syntax": "auto | loose | normal | strict | anywhere",
      "relevance": 52,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/line-break"
        }
      ],
      "description": "Specifies what set of line breaking restrictions are in effect within the element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "line-height",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "normal",
          "description": "Tells user agents to set the computed value to a 'reasonable' value based on the font size of the element."
        }
      ],
      "syntax": "normal | <number> | <length> | <percentage>",
      "relevance": 92,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/line-height"
        }
      ],
      "description": "Determines the block-progression dimension of the text content area of an inline box.",
      "restrictions": [
        "number",
        "length",
        "percentage"
      ]
    },
    {
      "name": "list-style",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "armenian"
        },
        {
          "name": "circle",
          "description": "A hollow circle."
        },
        {
          "name": "decimal"
        },
        {
          "name": "decimal-leading-zero"
        },
        {
          "name": "disc",
          "description": "A filled circle."
        },
        {
          "name": "georgian"
        },
        {
          "name": "inside",
          "description": "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below."
        },
        {
          "name": "lower-alpha"
        },
        {
          "name": "lower-greek"
        },
        {
          "name": "lower-latin"
        },
        {
          "name": "lower-roman"
        },
        {
          "name": "none"
        },
        {
          "name": "outside",
          "description": "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows."
        },
        {
          "name": "square",
          "description": "A filled square."
        },
        {
          "name": "symbols()",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Allows a counter style to be defined inline."
        },
        {
          "name": "upper-alpha"
        },
        {
          "name": "upper-latin"
        },
        {
          "name": "upper-roman"
        },
        {
          "name": "url()"
        }
      ],
      "syntax": "<'list-style-type'> || <'list-style-position'> || <'list-style-image'>",
      "relevance": 84,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/list-style"
        }
      ],
      "description": "Shorthand for setting 'list-style-type', 'list-style-position' and 'list-style-image'",
      "restrictions": [
        "image",
        "enum",
        "url"
      ]
    },
    {
      "name": "list-style-image",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "none",
          "description": "The default contents of the of the list item's marker are given by 'list-style-type' instead."
        }
      ],
      "syntax": "<image> | none",
      "relevance": 52,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-image"
        }
      ],
      "description": "Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the 'list-style-type' marker.",
      "restrictions": [
        "image"
      ]
    },
    {
      "name": "list-style-position",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "inside",
          "description": "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below."
        },
        {
          "name": "outside",
          "description": "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows."
        }
      ],
      "syntax": "inside | outside",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-position"
        }
      ],
      "description": "Specifies the position of the '::marker' pseudo-element's box in the list item.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "list-style-type",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "armenian",
          "description": "Traditional uppercase Armenian numbering."
        },
        {
          "name": "circle",
          "description": "A hollow circle."
        },
        {
          "name": "decimal",
          "description": "Western decimal numbers."
        },
        {
          "name": "decimal-leading-zero",
          "description": "Decimal numbers padded by initial zeros."
        },
        {
          "name": "disc",
          "description": "A filled circle."
        },
        {
          "name": "georgian",
          "description": "Traditional Georgian numbering."
        },
        {
          "name": "lower-alpha",
          "description": "Lowercase ASCII letters."
        },
        {
          "name": "lower-greek",
          "description": "Lowercase classical Greek."
        },
        {
          "name": "lower-latin",
          "description": "Lowercase ASCII letters."
        },
        {
          "name": "lower-roman",
          "description": "Lowercase ASCII Roman numerals."
        },
        {
          "name": "none",
          "description": "No marker"
        },
        {
          "name": "square",
          "description": "A filled square."
        },
        {
          "name": "symbols()",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O3.5"
          ],
          "description": "Allows a counter style to be defined inline."
        },
        {
          "name": "upper-alpha",
          "description": "Uppercase ASCII letters."
        },
        {
          "name": "upper-latin",
          "description": "Uppercase ASCII letters."
        },
        {
          "name": "upper-roman",
          "description": "Uppercase ASCII Roman numerals."
        }
      ],
      "syntax": "<counter-style> | <string> | none",
      "relevance": 74,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-type"
        }
      ],
      "description": "Used to construct the default contents of a list item's marker",
      "restrictions": [
        "enum",
        "string"
      ]
    },
    {
      "name": "margin",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "[ <length> | <percentage> | auto ]{1,4}",
      "relevance": 95,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-block-end",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<'margin-left'>",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block-end"
        }
      ],
      "description": "Logical 'margin-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-block-start",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<'margin-left'>",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block-start"
        }
      ],
      "description": "Logical 'margin-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-bottom",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-bottom"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-inline-end",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<'margin-left'>",
      "relevance": 57,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline-end"
        }
      ],
      "description": "Logical 'margin-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-inline-start",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<'margin-left'>",
      "relevance": 58,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline-start"
        }
      ],
      "description": "Logical 'margin-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-left",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-left"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-right",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-right"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "margin-top",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 94,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-top"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "marker",
      "values": [
        {
          "name": "none",
          "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
        },
        {
          "name": "url()",
          "description": "Indicates that the <marker> element referenced will be used."
        }
      ],
      "relevance": 50,
      "description": "Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given 'path' element or basic shape.",
      "restrictions": [
        "url"
      ]
    },
    {
      "name": "marker-end",
      "values": [
        {
          "name": "none",
          "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
        },
        {
          "name": "url()",
          "description": "Indicates that the <marker> element referenced will be used."
        }
      ],
      "relevance": 50,
      "description": "Specifies the marker that will be drawn at the last vertices of the given markable element.",
      "restrictions": [
        "url"
      ]
    },
    {
      "name": "marker-mid",
      "values": [
        {
          "name": "none",
          "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
        },
        {
          "name": "url()",
          "description": "Indicates that the <marker> element referenced will be used."
        }
      ],
      "relevance": 50,
      "description": "Specifies the marker that will be drawn at all vertices except the first and last.",
      "restrictions": [
        "url"
      ]
    },
    {
      "name": "marker-start",
      "values": [
        {
          "name": "none",
          "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
        },
        {
          "name": "url()",
          "description": "Indicates that the <marker> element referenced will be used."
        }
      ],
      "relevance": 50,
      "description": "Specifies the marker that will be drawn at the first vertices of the given markable element.",
      "restrictions": [
        "url"
      ]
    },
    {
      "name": "mask-image",
      "browsers": [
        "E79",
        "FF53",
        "S15.4",
        "C1",
        "O15"
      ],
      "values": [
        {
          "name": "none",
          "description": "Counts as a transparent black image layer."
        },
        {
          "name": "url()",
          "description": "Reference to a <mask element or to a CSS image."
        }
      ],
      "syntax": "<mask-reference>#",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-image"
        }
      ],
      "description": "Sets the mask layer image of an element.",
      "restrictions": [
        "url",
        "image",
        "enum"
      ]
    },
    {
      "name": "mask-mode",
      "browsers": [
        "FF53",
        "S15.4"
      ],
      "values": [
        {
          "name": "alpha",
          "description": "Alpha values of the mask layer image should be used as the mask values."
        },
        {
          "name": "auto",
          "description": "Use alpha values if 'mask-image' is an image, luminance if a <mask> element or a CSS image."
        },
        {
          "name": "luminance",
          "description": "Luminance values of the mask layer image should be used as the mask values."
        }
      ],
      "syntax": "<masking-mode>#",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-mode"
        }
      ],
      "description": "Indicates whether the mask layer image is treated as luminance mask or alpha mask.",
      "restrictions": [
        "url",
        "image",
        "enum"
      ]
    },
    {
      "name": "mask-origin",
      "browsers": [
        "E79",
        "FF53",
        "S15.4",
        "C1",
        "O15"
      ],
      "syntax": "<geometry-box>#",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-origin"
        }
      ],
      "description": "Specifies the mask positioning area.",
      "restrictions": [
        "geometry-box",
        "enum"
      ]
    },
    {
      "name": "mask-position",
      "browsers": [
        "E79",
        "FF53",
        "S15.4",
        "C1",
        "O15"
      ],
      "syntax": "<position>#",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-position"
        }
      ],
      "description": "Specifies how mask layer images are positioned.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "mask-repeat",
      "browsers": [
        "E79",
        "FF53",
        "S15.4",
        "C1",
        "O15"
      ],
      "syntax": "<repeat-style>#",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-repeat"
        }
      ],
      "description": "Specifies how mask layer images are tiled after they have been sized and positioned.",
      "restrictions": [
        "repeat"
      ]
    },
    {
      "name": "mask-size",
      "browsers": [
        "E79",
        "FF53",
        "S15.4",
        "C4",
        "O15"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%."
        },
        {
          "name": "contain",
          "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
        },
        {
          "name": "cover",
          "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
        }
      ],
      "syntax": "<bg-size>#",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-size"
        }
      ],
      "description": "Specifies the size of the mask layer images.",
      "restrictions": [
        "length",
        "percentage",
        "enum"
      ]
    },
    {
      "name": "mask-type",
      "browsers": [
        "E79",
        "FF35",
        "S7",
        "C24",
        "O15"
      ],
      "values": [
        {
          "name": "alpha",
          "description": "Indicates that the alpha values of the mask should be used."
        },
        {
          "name": "luminance",
          "description": "Indicates that the luminance values of the mask should be used."
        }
      ],
      "syntax": "luminance | alpha",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-type"
        }
      ],
      "description": "Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "max-block-size",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "none",
          "description": "No limit on the width of the box."
        }
      ],
      "syntax": "<'max-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/max-block-size"
        }
      ],
      "description": "Maximum size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "max-height",
      "browsers": [
        "E12",
        "FF1",
        "S1.3",
        "C18",
        "IE7",
        "O7"
      ],
      "values": [
        {
          "name": "none",
          "description": "No limit on the height of the box."
        },
        {
          "name": "fit-content",
          "browsers": [
            "E12",
            "FF1",
            "S1.3",
            "C18",
            "IE7",
            "O7"
          ],
          "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
        },
        {
          "name": "max-content",
          "browsers": [
            "E12",
            "FF1",
            "S1.3",
            "C18",
            "IE7",
            "O7"
          ],
          "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
        },
        {
          "name": "min-content",
          "browsers": [
            "E12",
            "FF1",
            "S1.3",
            "C18",
            "IE7",
            "O7"
          ],
          "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
        }
      ],
      "atRule": "@viewport",
      "syntax": "<viewport-length>",
      "relevance": 85,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/max-height"
        }
      ],
      "description": "Allows authors to constrain content height to a certain range.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "max-inline-size",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "none",
          "description": "No limit on the height of the box."
        }
      ],
      "syntax": "<'max-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/max-inline-size"
        }
      ],
      "description": "Maximum size of an element in the direction specified by 'writing-mode'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "max-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE7",
        "O4"
      ],
      "values": [
        {
          "name": "none",
          "description": "No limit on the width of the box."
        },
        {
          "name": "fit-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
        },
        {
          "name": "max-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
        },
        {
          "name": "min-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
        }
      ],
      "atRule": "@viewport",
      "syntax": "<viewport-length>",
      "relevance": 90,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/max-width"
        }
      ],
      "description": "Allows authors to constrain content width to a certain range.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "min-block-size",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C57",
        "O44"
      ],
      "syntax": "<'min-width'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/min-block-size"
        }
      ],
      "description": "Minimal size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "min-height",
      "browsers": [
        "E12",
        "FF3",
        "S1.3",
        "C1",
        "IE7",
        "O4"
      ],
      "values": [
        {
          "name": "auto",
          "browsers": [
            "E12",
            "FF3",
            "S1.3",
            "C1",
            "IE7",
            "O4"
          ]
        },
        {
          "name": "fit-content",
          "browsers": [
            "E12",
            "FF3",
            "S1.3",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
        },
        {
          "name": "max-content",
          "browsers": [
            "E12",
            "FF3",
            "S1.3",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
        },
        {
          "name": "min-content",
          "browsers": [
            "E12",
            "FF3",
            "S1.3",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
        }
      ],
      "atRule": "@viewport",
      "syntax": "<viewport-length>",
      "relevance": 89,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/min-height"
        }
      ],
      "description": "Allows authors to constrain content height to a certain range.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "min-inline-size",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C57",
        "O44"
      ],
      "syntax": "<'min-width'>",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/min-inline-size"
        }
      ],
      "description": "Minimal size of an element in the direction specified by 'writing-mode'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "min-width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE7",
        "O4"
      ],
      "values": [
        {
          "name": "auto",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ]
        },
        {
          "name": "fit-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
        },
        {
          "name": "max-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
        },
        {
          "name": "min-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE7",
            "O4"
          ],
          "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
        }
      ],
      "atRule": "@viewport",
      "syntax": "<viewport-length>",
      "relevance": 88,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/min-width"
        }
      ],
      "description": "Allows authors to constrain content width to a certain range.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "mix-blend-mode",
      "browsers": [
        "E79",
        "FF32",
        "S8",
        "C41",
        "O28"
      ],
      "values": [
        {
          "name": "normal",
          "description": "Default attribute which specifies no blending"
        },
        {
          "name": "multiply",
          "description": "The source color is multiplied by the destination color and replaces the destination."
        },
        {
          "name": "screen",
          "description": "Multiplies the complements of the backdrop and source color values, then complements the result."
        },
        {
          "name": "overlay",
          "description": "Multiplies or screens the colors, depending on the backdrop color value."
        },
        {
          "name": "darken",
          "description": "Selects the darker of the backdrop and source colors."
        },
        {
          "name": "lighten",
          "description": "Selects the lighter of the backdrop and source colors."
        },
        {
          "name": "color-dodge",
          "description": "Brightens the backdrop color to reflect the source color."
        },
        {
          "name": "color-burn",
          "description": "Darkens the backdrop color to reflect the source color."
        },
        {
          "name": "hard-light",
          "description": "Multiplies or screens the colors, depending on the source color value."
        },
        {
          "name": "soft-light",
          "description": "Darkens or lightens the colors, depending on the source color value."
        },
        {
          "name": "difference",
          "description": "Subtracts the darker of the two constituent colors from the lighter color.."
        },
        {
          "name": "exclusion",
          "description": "Produces an effect similar to that of the Difference mode but lower in contrast."
        },
        {
          "name": "hue",
          "browsers": [
            "E79",
            "FF32",
            "S8",
            "C41",
            "O28"
          ],
          "description": "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color."
        },
        {
          "name": "saturation",
          "browsers": [
            "E79",
            "FF32",
            "S8",
            "C41",
            "O28"
          ],
          "description": "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color."
        },
        {
          "name": "color",
          "browsers": [
            "E79",
            "FF32",
            "S8",
            "C41",
            "O28"
          ],
          "description": "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color."
        },
        {
          "name": "luminosity",
          "browsers": [
            "E79",
            "FF32",
            "S8",
            "C41",
            "O28"
          ],
          "description": "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color."
        }
      ],
      "syntax": "<blend-mode> | plus-lighter",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode"
        }
      ],
      "description": "Defines the formula that must be used to mix the colors with the backdrop.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "motion",
      "browsers": [
        "C46",
        "O33"
      ],
      "values": [
        {
          "name": "none",
          "description": "No motion path gets created."
        },
        {
          "name": "path()",
          "description": "Defines an SVG path as a string, with optional 'fill-rule' as the first argument."
        },
        {
          "name": "auto",
          "description": "Indicates that the object is rotated by the angle of the direction of the motion path."
        },
        {
          "name": "reverse",
          "description": "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property for setting 'motion-path', 'motion-offset' and 'motion-rotation'.",
      "restrictions": [
        "url",
        "length",
        "percentage",
        "angle",
        "shape",
        "geometry-box",
        "enum"
      ]
    },
    {
      "name": "motion-offset",
      "browsers": [
        "C46",
        "O33"
      ],
      "relevance": 50,
      "description": "A distance that describes the position along the specified motion path.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "motion-path",
      "browsers": [
        "C46",
        "O33"
      ],
      "values": [
        {
          "name": "none",
          "description": "No motion path gets created."
        },
        {
          "name": "path()",
          "description": "Defines an SVG path as a string, with optional 'fill-rule' as the first argument."
        }
      ],
      "relevance": 50,
      "description": "Specifies the motion path the element gets positioned at.",
      "restrictions": [
        "url",
        "shape",
        "geometry-box",
        "enum"
      ]
    },
    {
      "name": "motion-rotation",
      "browsers": [
        "C46",
        "O33"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Indicates that the object is rotated by the angle of the direction of the motion path."
        },
        {
          "name": "reverse",
          "description": "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."
        }
      ],
      "relevance": 50,
      "description": "Defines the direction of the element while positioning along the motion path.",
      "restrictions": [
        "angle"
      ]
    },
    {
      "name": "-moz-animation",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        },
        {
          "name": "none",
          "description": "No animation is performed"
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property combines six of the animation properties into a single property.",
      "restrictions": [
        "time",
        "enum",
        "timing-function",
        "identifier",
        "number"
      ]
    },
    {
      "name": "-moz-animation-delay",
      "browsers": [
        "FF9"
      ],
      "relevance": 50,
      "description": "Defines when the animation will start.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-moz-animation-direction",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "relevance": 50,
      "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-animation-duration",
      "browsers": [
        "FF9"
      ],
      "relevance": 50,
      "description": "Defines the length of time that an animation takes to complete one cycle.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-moz-animation-iteration-count",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        }
      ],
      "relevance": 50,
      "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
      "restrictions": [
        "number",
        "enum"
      ]
    },
    {
      "name": "-moz-animation-name",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "none",
          "description": "No animation is performed"
        }
      ],
      "relevance": 50,
      "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
      "restrictions": [
        "identifier",
        "enum"
      ]
    },
    {
      "name": "-moz-animation-play-state",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "paused",
          "description": "A running animation will be paused."
        },
        {
          "name": "running",
          "description": "Resume playback of a paused animation."
        }
      ],
      "relevance": 50,
      "description": "Defines whether the animation is running or paused.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-animation-timing-function",
      "browsers": [
        "FF9"
      ],
      "relevance": 50,
      "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "-moz-appearance",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "button"
        },
        {
          "name": "button-arrow-down"
        },
        {
          "name": "button-arrow-next"
        },
        {
          "name": "button-arrow-previous"
        },
        {
          "name": "button-arrow-up"
        },
        {
          "name": "button-bevel"
        },
        {
          "name": "checkbox"
        },
        {
          "name": "checkbox-container"
        },
        {
          "name": "checkbox-label"
        },
        {
          "name": "dialog"
        },
        {
          "name": "groupbox"
        },
        {
          "name": "listbox"
        },
        {
          "name": "menuarrow"
        },
        {
          "name": "menuimage"
        },
        {
          "name": "menuitem"
        },
        {
          "name": "menuitemtext"
        },
        {
          "name": "menulist"
        },
        {
          "name": "menulist-button"
        },
        {
          "name": "menulist-text"
        },
        {
          "name": "menulist-textfield"
        },
        {
          "name": "menupopup"
        },
        {
          "name": "menuradio"
        },
        {
          "name": "menuseparator"
        },
        {
          "name": "-moz-mac-unified-toolbar"
        },
        {
          "name": "-moz-win-borderless-glass"
        },
        {
          "name": "-moz-win-browsertabbar-toolbox"
        },
        {
          "name": "-moz-win-communications-toolbox"
        },
        {
          "name": "-moz-win-glass"
        },
        {
          "name": "-moz-win-media-toolbox"
        },
        {
          "name": "none"
        },
        {
          "name": "progressbar"
        },
        {
          "name": "progresschunk"
        },
        {
          "name": "radio"
        },
        {
          "name": "radio-container"
        },
        {
          "name": "radio-label"
        },
        {
          "name": "radiomenuitem"
        },
        {
          "name": "resizer"
        },
        {
          "name": "resizerpanel"
        },
        {
          "name": "scrollbarbutton-down"
        },
        {
          "name": "scrollbarbutton-left"
        },
        {
          "name": "scrollbarbutton-right"
        },
        {
          "name": "scrollbarbutton-up"
        },
        {
          "name": "scrollbar-small"
        },
        {
          "name": "scrollbartrack-horizontal"
        },
        {
          "name": "scrollbartrack-vertical"
        },
        {
          "name": "separator"
        },
        {
          "name": "spinner"
        },
        {
          "name": "spinner-downbutton"
        },
        {
          "name": "spinner-textfield"
        },
        {
          "name": "spinner-upbutton"
        },
        {
          "name": "statusbar"
        },
        {
          "name": "statusbarpanel"
        },
        {
          "name": "tab"
        },
        {
          "name": "tabpanels"
        },
        {
          "name": "tab-scroll-arrow-back"
        },
        {
          "name": "tab-scroll-arrow-forward"
        },
        {
          "name": "textfield"
        },
        {
          "name": "textfield-multiline"
        },
        {
          "name": "toolbar"
        },
        {
          "name": "toolbox"
        },
        {
          "name": "tooltip"
        },
        {
          "name": "treeheadercell"
        },
        {
          "name": "treeheadersortarrow"
        },
        {
          "name": "treeitem"
        },
        {
          "name": "treetwistyopen"
        },
        {
          "name": "treeview"
        },
        {
          "name": "treewisty"
        },
        {
          "name": "window"
        }
      ],
      "status": "nonstandard",
      "syntax": "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized",
      "relevance": 0,
      "description": "Used in Gecko (Firefox) to display an element using a platform-native styling based on the operating system's theme.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-backface-visibility",
      "browsers": [
        "FF10"
      ],
      "values": [
        {
          "name": "hidden"
        },
        {
          "name": "visible"
        }
      ],
      "relevance": 50,
      "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-background-clip",
      "browsers": [
        "FF1-3.6"
      ],
      "values": [
        {
          "name": "padding"
        }
      ],
      "relevance": 50,
      "description": "Determines the background painting area.",
      "restrictions": [
        "box",
        "enum"
      ]
    },
    {
      "name": "-moz-background-inline-policy",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "bounding-box"
        },
        {
          "name": "continuous"
        },
        {
          "name": "each-box"
        }
      ],
      "relevance": 50,
      "description": "In Gecko-based applications like Firefox, the -moz-background-inline-policy CSS property specifies how the background image of an inline element is determined when the content of the inline element wraps onto multiple lines. The choice of position has significant effects on repetition.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-background-origin",
      "browsers": [
        "FF1"
      ],
      "relevance": 50,
      "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "-moz-border-bottom-colors",
      "browsers": [
        "FF1"
      ],
      "status": "nonstandard",
      "syntax": "<color>+ | none",
      "relevance": 0,
      "description": "Sets a list of colors for the bottom border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-moz-border-image",
      "browsers": [
        "FF3.6"
      ],
      "values": [
        {
          "name": "auto",
          "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
        },
        {
          "name": "fill",
          "description": "Causes the middle part of the border-image to be preserved."
        },
        {
          "name": "none"
        },
        {
          "name": "repeat",
          "description": "The image is tiled (repeated) to fill the area."
        },
        {
          "name": "round",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
        },
        {
          "name": "space",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
        },
        {
          "name": "stretch",
          "description": "The image is stretched to fill the area."
        },
        {
          "name": "url()"
        }
      ],
      "relevance": 50,
      "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "percentage",
        "number",
        "url",
        "enum"
      ]
    },
    {
      "name": "-moz-border-left-colors",
      "browsers": [
        "FF1"
      ],
      "status": "nonstandard",
      "syntax": "<color>+ | none",
      "relevance": 0,
      "description": "Sets a list of colors for the bottom border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-moz-border-right-colors",
      "browsers": [
        "FF1"
      ],
      "status": "nonstandard",
      "syntax": "<color>+ | none",
      "relevance": 0,
      "description": "Sets a list of colors for the bottom border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-moz-border-top-colors",
      "browsers": [
        "FF1"
      ],
      "status": "nonstandard",
      "syntax": "<color>+ | none",
      "relevance": 0,
      "description": "Ske Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-moz-box-align",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "baseline",
          "description": "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."
        },
        {
          "name": "center",
          "description": "Any extra space is divided evenly, with half placed above the child and the other half placed after the child."
        },
        {
          "name": "end",
          "description": "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."
        },
        {
          "name": "start",
          "description": "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."
        },
        {
          "name": "stretch",
          "description": "The height of each child is adjusted to that of the containing block."
        }
      ],
      "relevance": 50,
      "description": "Specifies how a XUL box aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-box-direction",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "normal",
          "description": "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."
        },
        {
          "name": "reverse",
          "description": "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."
        }
      ],
      "relevance": 50,
      "description": "Specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-box-flex",
      "browsers": [
        "FF1"
      ],
      "relevance": 50,
      "description": "Specifies how a box grows to fill the box that contains it, in the direction of the containing box's layout.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "-moz-box-flexgroup",
      "browsers": [
        "FF1"
      ],
      "relevance": 50,
      "description": "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-moz-box-ordinal-group",
      "browsers": [
        "FF1"
      ],
      "relevance": 50,
      "description": "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-moz-box-orient",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "block-axis",
          "description": "Elements are oriented along the box's axis."
        },
        {
          "name": "horizontal",
          "description": "The box displays its children from left to right in a horizontal line."
        },
        {
          "name": "inline-axis",
          "description": "Elements are oriented vertically."
        },
        {
          "name": "vertical",
          "description": "The box displays its children from stacked from top to bottom vertically."
        }
      ],
      "relevance": 50,
      "description": "In Mozilla applications, -moz-box-orient specifies whether a box lays out its contents horizontally or vertically.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-box-pack",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "center",
          "description": "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."
        },
        {
          "name": "end",
          "description": "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."
        },
        {
          "name": "justify",
          "description": "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."
        },
        {
          "name": "start",
          "description": "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."
        }
      ],
      "relevance": 50,
      "description": "Specifies how a box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-box-sizing",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "border-box",
          "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
        },
        {
          "name": "content-box",
          "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
        },
        {
          "name": "padding-box",
          "description": "The specified width and height (and respective min/max properties) on this element determine the padding box of the element."
        }
      ],
      "relevance": 50,
      "description": "Box Model addition in CSS3.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-column-count",
      "browsers": [
        "FF3.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Determines the number of columns by the 'column-width' property and the element width."
        }
      ],
      "relevance": 50,
      "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-moz-column-gap",
      "browsers": [
        "FF3.5"
      ],
      "values": [
        {
          "name": "normal",
          "description": "User agent specific and typically equivalent to 1em."
        }
      ],
      "relevance": 50,
      "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-moz-column-rule",
      "browsers": [
        "FF3.5"
      ],
      "relevance": 50,
      "description": "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "-moz-column-rule-color",
      "browsers": [
        "FF3.5"
      ],
      "relevance": 50,
      "description": "Sets the color of the column rule",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-moz-column-rule-style",
      "browsers": [
        "FF3.5"
      ],
      "relevance": 50,
      "description": "Sets the style of the rule between columns of an element.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "-moz-column-rule-width",
      "browsers": [
        "FF3.5"
      ],
      "relevance": 50,
      "description": "Sets the width of the rule between columns. Negative values are not allowed.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "-moz-columns",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        }
      ],
      "relevance": 50,
      "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
      "restrictions": [
        "length",
        "integer"
      ]
    },
    {
      "name": "-moz-column-width",
      "browsers": [
        "FF3.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        }
      ],
      "relevance": 50,
      "description": "This property describes the width of columns in multicol elements.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-moz-font-feature-settings",
      "browsers": [
        "FF4"
      ],
      "values": [
        {
          "name": '"c2cs"'
        },
        {
          "name": '"dlig"'
        },
        {
          "name": '"kern"'
        },
        {
          "name": '"liga"'
        },
        {
          "name": '"lnum"'
        },
        {
          "name": '"onum"'
        },
        {
          "name": '"smcp"'
        },
        {
          "name": '"swsh"'
        },
        {
          "name": '"tnum"'
        },
        {
          "name": "normal",
          "description": "No change in glyph substitution or positioning occurs."
        },
        {
          "name": "off",
          "browsers": [
            "FF4"
          ]
        },
        {
          "name": "on",
          "browsers": [
            "FF4"
          ]
        }
      ],
      "relevance": 50,
      "description": "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
      "restrictions": [
        "string",
        "integer"
      ]
    },
    {
      "name": "-moz-hyphens",
      "browsers": [
        "FF9"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
        },
        {
          "name": "manual",
          "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
        },
        {
          "name": "none",
          "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
        }
      ],
      "relevance": 50,
      "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-perspective",
      "browsers": [
        "FF10"
      ],
      "values": [
        {
          "name": "none",
          "description": "No perspective transform is applied."
        }
      ],
      "relevance": 50,
      "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-moz-perspective-origin",
      "browsers": [
        "FF10"
      ],
      "relevance": 50,
      "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
      "restrictions": [
        "position",
        "percentage",
        "length"
      ]
    },
    {
      "name": "-moz-text-align-last",
      "browsers": [
        "FF12"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "center",
          "description": "The inline contents are centered within the line box."
        },
        {
          "name": "justify",
          "description": "The text is justified according to the method specified by the 'text-justify' property."
        },
        {
          "name": "left",
          "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
        },
        {
          "name": "right",
          "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
        }
      ],
      "relevance": 50,
      "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-text-decoration-color",
      "browsers": [
        "FF6"
      ],
      "relevance": 50,
      "description": "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-moz-text-decoration-line",
      "browsers": [
        "FF6"
      ],
      "values": [
        {
          "name": "line-through",
          "description": "Each line of text has a line through the middle."
        },
        {
          "name": "none",
          "description": "Neither produces nor inhibits text decoration."
        },
        {
          "name": "overline",
          "description": "Each line of text has a line above it."
        },
        {
          "name": "underline",
          "description": "Each line of text is underlined."
        }
      ],
      "relevance": 50,
      "description": "Specifies what line decorations, if any, are added to the element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-text-decoration-style",
      "browsers": [
        "FF6"
      ],
      "values": [
        {
          "name": "dashed",
          "description": "Produces a dashed line style."
        },
        {
          "name": "dotted",
          "description": "Produces a dotted line."
        },
        {
          "name": "double",
          "description": "Produces a double line."
        },
        {
          "name": "none",
          "description": "Produces no line."
        },
        {
          "name": "solid",
          "description": "Produces a solid line."
        },
        {
          "name": "wavy",
          "description": "Produces a wavy line."
        }
      ],
      "relevance": 50,
      "description": "Specifies the line style for underline, line-through and overline text decoration.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-text-size-adjust",
      "browsers": [
        "FF"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Renderers must use the default size adjustment when displaying on a small device."
        },
        {
          "name": "none",
          "description": "Renderers must not do size adjustment when displaying on a small device."
        }
      ],
      "relevance": 50,
      "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
      "restrictions": [
        "enum",
        "percentage"
      ]
    },
    {
      "name": "-moz-transform",
      "browsers": [
        "FF3.5"
      ],
      "values": [
        {
          "name": "matrix()",
          "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
        },
        {
          "name": "matrix3d()",
          "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
        },
        {
          "name": "none"
        },
        {
          "name": "perspective",
          "description": "Specifies a perspective projection matrix."
        },
        {
          "name": "rotate()",
          "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
        },
        {
          "name": "rotate3d()",
          "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
        },
        {
          "name": "rotateX('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the X axis."
        },
        {
          "name": "rotateY('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Y axis."
        },
        {
          "name": "rotateZ('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Z axis."
        },
        {
          "name": "scale()",
          "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
        },
        {
          "name": "scale3d()",
          "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
        },
        {
          "name": "scaleX()",
          "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
        },
        {
          "name": "scaleY()",
          "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
        },
        {
          "name": "scaleZ()",
          "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
        },
        {
          "name": "skew()",
          "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
        },
        {
          "name": "skewX()",
          "description": "Specifies a skew transformation along the X axis by the given angle."
        },
        {
          "name": "skewY()",
          "description": "Specifies a skew transformation along the Y axis by the given angle."
        },
        {
          "name": "translate()",
          "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
        },
        {
          "name": "translate3d()",
          "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
        },
        {
          "name": "translateX()",
          "description": "Specifies a translation by the given amount in the X direction."
        },
        {
          "name": "translateY()",
          "description": "Specifies a translation by the given amount in the Y direction."
        },
        {
          "name": "translateZ()",
          "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
        }
      ],
      "relevance": 50,
      "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-moz-transform-origin",
      "browsers": [
        "FF3.5"
      ],
      "relevance": 50,
      "description": "Establishes the origin of transformation for an element.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "-moz-transition",
      "browsers": [
        "FF4"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property combines four of the transition properties into a single property.",
      "restrictions": [
        "time",
        "property",
        "timing-function",
        "enum"
      ]
    },
    {
      "name": "-moz-transition-delay",
      "browsers": [
        "FF4"
      ],
      "relevance": 50,
      "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-moz-transition-duration",
      "browsers": [
        "FF4"
      ],
      "relevance": 50,
      "description": "Specifies how long the transition from the old value to the new value should take.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-moz-transition-property",
      "browsers": [
        "FF4"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "relevance": 50,
      "description": "Specifies the name of the CSS property to which the transition is applied.",
      "restrictions": [
        "property"
      ]
    },
    {
      "name": "-moz-transition-timing-function",
      "browsers": [
        "FF4"
      ],
      "relevance": 50,
      "description": "Describes how the intermediate values used during a transition will be calculated.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "-moz-user-focus",
      "browsers": [
        "FF1"
      ],
      "values": [
        {
          "name": "ignore"
        },
        {
          "name": "normal"
        }
      ],
      "status": "nonstandard",
      "syntax": "ignore | normal | select-after | select-before | select-menu | select-same | select-all | none",
      "relevance": 0,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-user-focus"
        }
      ],
      "description": "Used to indicate whether the element can have focus."
    },
    {
      "name": "-moz-user-select",
      "browsers": [
        "FF1.5"
      ],
      "values": [
        {
          "name": "all"
        },
        {
          "name": "element"
        },
        {
          "name": "elements"
        },
        {
          "name": "-moz-all"
        },
        {
          "name": "-moz-none"
        },
        {
          "name": "none"
        },
        {
          "name": "text"
        },
        {
          "name": "toggle"
        }
      ],
      "relevance": 50,
      "description": "Controls the appearance of selection.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-accelerator",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "false",
          "description": "The element does not contain an accelerator key sequence."
        },
        {
          "name": "true",
          "description": "The element contains an accelerator key sequence."
        }
      ],
      "status": "nonstandard",
      "syntax": "false | true",
      "relevance": 0,
      "description": "IE only. Has the ability to turn off its system underlines for accelerator keys until the ALT key is pressed",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-behavior",
      "browsers": [
        "IE8"
      ],
      "relevance": 50,
      "description": "IE only. Used to extend behaviors of the browser",
      "restrictions": [
        "url"
      ]
    },
    {
      "name": "-ms-block-progression",
      "browsers": [
        "IE8"
      ],
      "values": [
        {
          "name": "bt",
          "description": "Bottom-to-top block flow. Layout is horizontal."
        },
        {
          "name": "lr",
          "description": "Left-to-right direction. The flow orientation is vertical."
        },
        {
          "name": "rl",
          "description": "Right-to-left direction. The flow orientation is vertical."
        },
        {
          "name": "tb",
          "description": "Top-to-bottom direction. The flow orientation is horizontal."
        }
      ],
      "status": "nonstandard",
      "syntax": "tb | rl | bt | lr",
      "relevance": 0,
      "description": "Sets the block-progression value and the flow orientation",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-content-zoom-chaining",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "chained",
          "description": "The nearest zoomable parent element begins zooming when the user hits a zoom limit during a manipulation. No bounce effect is shown."
        },
        {
          "name": "none",
          "description": "A bounce effect is shown when the user hits a zoom limit during a manipulation."
        }
      ],
      "status": "nonstandard",
      "syntax": "none | chained",
      "relevance": 0,
      "description": "Specifies the zoom behavior that occurs when a user hits the zoom limit during a manipulation."
    },
    {
      "name": "-ms-content-zooming",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none",
          "description": "The element is not zoomable."
        },
        {
          "name": "zoom",
          "description": "The element is zoomable."
        }
      ],
      "status": "nonstandard",
      "syntax": "none | zoom",
      "relevance": 0,
      "description": "Specifies whether zooming is enabled.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-content-zoom-limit",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
      "relevance": 0,
      "description": "Shorthand property for the -ms-content-zoom-limit-min and -ms-content-zoom-limit-max properties.",
      "restrictions": [
        "percentage"
      ]
    },
    {
      "name": "-ms-content-zoom-limit-max",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<percentage>",
      "relevance": 0,
      "description": "Specifies the maximum zoom factor.",
      "restrictions": [
        "percentage"
      ]
    },
    {
      "name": "-ms-content-zoom-limit-min",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<percentage>",
      "relevance": 0,
      "description": "Specifies the minimum zoom factor.",
      "restrictions": [
        "percentage"
      ]
    },
    {
      "name": "-ms-content-zoom-snap",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "mandatory",
          "description": "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."
        },
        {
          "name": "none",
          "description": "Indicates that zooming is unaffected by any defined snap-points."
        },
        {
          "name": "proximity",
          "description": 'Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop "close enough" to a snap-point.'
        },
        {
          "name": "snapInterval(100%, 100%)",
          "description": "Specifies where the snap-points will be placed."
        },
        {
          "name": "snapList()",
          "description": "Specifies the position of individual snap-points as a comma-separated list of zoom factors."
        }
      ],
      "status": "nonstandard",
      "syntax": "<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>",
      "relevance": 0,
      "description": "Shorthand property for the -ms-content-zoom-snap-type and -ms-content-zoom-snap-points properties."
    },
    {
      "name": "-ms-content-zoom-snap-points",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "snapInterval(100%, 100%)",
          "description": "Specifies where the snap-points will be placed."
        },
        {
          "name": "snapList()",
          "description": "Specifies the position of individual snap-points as a comma-separated list of zoom factors."
        }
      ],
      "status": "nonstandard",
      "syntax": "snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )",
      "relevance": 0,
      "description": "Defines where zoom snap-points are located."
    },
    {
      "name": "-ms-content-zoom-snap-type",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "mandatory",
          "description": "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."
        },
        {
          "name": "none",
          "description": "Indicates that zooming is unaffected by any defined snap-points."
        },
        {
          "name": "proximity",
          "description": 'Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop "close enough" to a snap-point.'
        }
      ],
      "status": "nonstandard",
      "syntax": "none | proximity | mandatory",
      "relevance": 0,
      "description": "Specifies how zooming is affected by defined snap-points.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-filter",
      "browsers": [
        "IE8-9"
      ],
      "status": "nonstandard",
      "syntax": "<string>",
      "relevance": 0,
      "description": "IE only. Used to produce visual effects.",
      "restrictions": [
        "string"
      ]
    },
    {
      "name": "-ms-flex",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Retrieves the value of the main size property as the used 'flex-basis'."
        },
        {
          "name": "none",
          "description": "Expands to '0 0 auto'."
        }
      ],
      "relevance": 50,
      "description": "specifies the parameters of a flexible length: the positive and negative flexibility, and the preferred size.",
      "restrictions": [
        "length",
        "number",
        "percentage"
      ]
    },
    {
      "name": "-ms-flex-align",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "baseline",
          "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
        },
        {
          "name": "center",
          "description": "The flex item's margin box is centered in the cross axis within the line."
        },
        {
          "name": "end",
          "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
        },
        {
          "name": "start",
          "description": "The cross-start margin edge of the flexbox item is placed flush with the cross-start edge of the line."
        },
        {
          "name": "stretch",
          "description": "If the cross size property of the flexbox item is anything other than 'auto', this value is identical to 'start'."
        }
      ],
      "relevance": 50,
      "description": "Aligns flex items along the cross axis of the current line of the flex container.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flex-direction",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "column",
          "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
        },
        {
          "name": "column-reverse",
          "description": "Same as 'column', except the main-start and main-end directions are swapped."
        },
        {
          "name": "row",
          "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
        },
        {
          "name": "row-reverse",
          "description": "Same as 'row', except the main-start and main-end directions are swapped."
        }
      ],
      "relevance": 50,
      "description": "Specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flex-flow",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "column",
          "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
        },
        {
          "name": "column-reverse",
          "description": "Same as 'column', except the main-start and main-end directions are swapped."
        },
        {
          "name": "nowrap",
          "description": "The flex container is single-line."
        },
        {
          "name": "row",
          "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
        },
        {
          "name": "wrap",
          "description": "The flexbox is multi-line."
        },
        {
          "name": "wrap-reverse",
          "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
        }
      ],
      "relevance": 50,
      "description": "Specifies how flexbox items are placed in the flexbox.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flex-item-align",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Computes to the value of 'align-items' on the element's parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."
        },
        {
          "name": "baseline",
          "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
        },
        {
          "name": "center",
          "description": "The flex item's margin box is centered in the cross axis within the line."
        },
        {
          "name": "end",
          "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
        },
        {
          "name": "start",
          "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
        },
        {
          "name": "stretch",
          "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
        }
      ],
      "relevance": 50,
      "description": "Allows the default alignment along the cross axis to be overridden for individual flex items.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flex-line-pack",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "center",
          "description": "Lines are packed toward the center of the flex container."
        },
        {
          "name": "distribute",
          "description": "Lines are evenly distributed in the flex container, with half-size spaces on either end."
        },
        {
          "name": "end",
          "description": "Lines are packed toward the end of the flex container."
        },
        {
          "name": "justify",
          "description": "Lines are evenly distributed in the flex container."
        },
        {
          "name": "start",
          "description": "Lines are packed toward the start of the flex container."
        },
        {
          "name": "stretch",
          "description": "Lines stretch to take up the remaining space."
        }
      ],
      "relevance": 50,
      "description": "Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flex-order",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-ms-flex-pack",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "center",
          "description": "Flex items are packed toward the center of the line."
        },
        {
          "name": "distribute",
          "description": "Flex items are evenly distributed in the line, with half-size spaces on either end."
        },
        {
          "name": "end",
          "description": "Flex items are packed toward the end of the line."
        },
        {
          "name": "justify",
          "description": "Flex items are evenly distributed in the line."
        },
        {
          "name": "start",
          "description": "Flex items are packed toward the start of the line."
        }
      ],
      "relevance": 50,
      "description": "Aligns flex items along the main axis of the current line of the flex container.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flex-wrap",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "nowrap",
          "description": "The flex container is single-line."
        },
        {
          "name": "wrap",
          "description": "The flexbox is multi-line."
        },
        {
          "name": "wrap-reverse",
          "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
        }
      ],
      "relevance": 50,
      "description": "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-flow-from",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none",
          "description": "The block container is not a CSS Region."
        }
      ],
      "status": "nonstandard",
      "syntax": "[ none | <custom-ident> ]#",
      "relevance": 0,
      "description": "Makes a block container a region and associates it with a named flow.",
      "restrictions": [
        "identifier"
      ]
    },
    {
      "name": "-ms-flow-into",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none",
          "description": "The element is not moved to a named flow and normal CSS processing takes place."
        }
      ],
      "status": "nonstandard",
      "syntax": "[ none | <custom-ident> ]#",
      "relevance": 0,
      "description": "Places an element or its contents into a named flow.",
      "restrictions": [
        "identifier"
      ]
    },
    {
      "name": "-ms-grid-column",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "end"
        },
        {
          "name": "start"
        }
      ],
      "relevance": 50,
      "description": "Used to place grid items and explicitly defined grid cells in the Grid.",
      "restrictions": [
        "integer",
        "string",
        "enum"
      ]
    },
    {
      "name": "-ms-grid-column-align",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "center",
          "description": "Places the center of the Grid Item's margin box at the center of the Grid Item's column."
        },
        {
          "name": "end",
          "description": "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's column."
        },
        {
          "name": "start",
          "description": "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's column."
        },
        {
          "name": "stretch",
          "description": "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's column."
        }
      ],
      "relevance": 50,
      "description": "Aligns the columns in a grid.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-grid-columns",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "none | <track-list> | <auto-track-list>",
      "relevance": 0,
      "description": "Lays out the columns of the grid."
    },
    {
      "name": "-ms-grid-column-span",
      "browsers": [
        "E",
        "IE10"
      ],
      "relevance": 50,
      "description": "Specifies the number of columns to span.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-ms-grid-layer",
      "browsers": [
        "E",
        "IE10"
      ],
      "relevance": 50,
      "description": "Grid-layer is similar in concept to z-index, but avoids overloading the meaning of the z-index property, which is applicable only to positioned elements.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-ms-grid-row",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "end"
        },
        {
          "name": "start"
        }
      ],
      "relevance": 50,
      "description": "grid-row is used to place grid items and explicitly defined grid cells in the Grid.",
      "restrictions": [
        "integer",
        "string",
        "enum"
      ]
    },
    {
      "name": "-ms-grid-row-align",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "center",
          "description": "Places the center of the Grid Item's margin box at the center of the Grid Item's row."
        },
        {
          "name": "end",
          "description": "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's row."
        },
        {
          "name": "start",
          "description": "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's row."
        },
        {
          "name": "stretch",
          "description": "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's row."
        }
      ],
      "relevance": 50,
      "description": "Aligns the rows in a grid.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-grid-rows",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "none | <track-list> | <auto-track-list>",
      "relevance": 0,
      "description": "Lays out the columns of the grid."
    },
    {
      "name": "-ms-grid-row-span",
      "browsers": [
        "E",
        "IE10"
      ],
      "relevance": 50,
      "description": "Specifies the number of rows to span.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-ms-high-contrast-adjust",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Properties will be adjusted as applicable."
        },
        {
          "name": "none",
          "description": "No adjustments will be applied."
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | none",
      "relevance": 0,
      "description": "Specifies if properties should be adjusted in high contrast mode.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-hyphenate-limit-chars",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent chooses a value that adapts to the current layout."
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | <integer>{1,3}",
      "relevance": 0,
      "description": "Specifies the minimum number of characters in a hyphenated word.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-ms-hyphenate-limit-lines",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "no-limit",
          "description": "There is no limit."
        }
      ],
      "status": "nonstandard",
      "syntax": "no-limit | <integer>",
      "relevance": 0,
      "description": "Indicates the maximum number of successive hyphenated lines in an element.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-ms-hyphenate-limit-zone",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<percentage> | <length>",
      "relevance": 0,
      "description": "Specifies the maximum amount of unfilled space (before justification) that may be left in the line box before hyphenation is triggered to pull part of a word from the next line back up into the current line.",
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "-ms-hyphens",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
        },
        {
          "name": "manual",
          "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
        },
        {
          "name": "none",
          "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
        }
      ],
      "relevance": 50,
      "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-ime-mode",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "active",
          "description": "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it."
        },
        {
          "name": "auto",
          "description": "No change is made to the current input method editor state. This is the default."
        },
        {
          "name": "disabled",
          "description": "The input method editor is disabled and may not be activated by the user."
        },
        {
          "name": "inactive",
          "description": "The input method editor is initially inactive, but the user may activate it if they wish."
        },
        {
          "name": "normal",
          "description": "The IME state should be normal; this value can be used in a user style sheet to override the page setting."
        }
      ],
      "relevance": 50,
      "description": "Controls the state of the input method editor for text fields.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-interpolation-mode",
      "browsers": [
        "IE7"
      ],
      "values": [
        {
          "name": "bicubic"
        },
        {
          "name": "nearest-neighbor"
        }
      ],
      "relevance": 50,
      "description": "Gets or sets the interpolation (resampling) method used to stretch images.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-layout-grid",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "char",
          "description": "Any of the range of character values available to the -ms-layout-grid-char property."
        },
        {
          "name": "line",
          "description": "Any of the range of line values available to the -ms-layout-grid-line property."
        },
        {
          "name": "mode",
          "description": "Any of the range of mode values available to the -ms-layout-grid-mode property."
        },
        {
          "name": "type",
          "description": "Any of the range of type values available to the -ms-layout-grid-type property."
        }
      ],
      "relevance": 50,
      "description": "Sets or retrieves the composite document grid properties that specify the layout of text characters."
    },
    {
      "name": "-ms-layout-grid-char",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Largest character in the font of the element is used to set the character grid."
        },
        {
          "name": "none",
          "description": "Default. No character grid is set."
        }
      ],
      "relevance": 50,
      "description": "Sets or retrieves the size of the character grid used for rendering the text content of an element.",
      "restrictions": [
        "enum",
        "length",
        "percentage"
      ]
    },
    {
      "name": "-ms-layout-grid-line",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Largest character in the font of the element is used to set the character grid."
        },
        {
          "name": "none",
          "description": "Default. No grid line is set."
        }
      ],
      "relevance": 50,
      "description": "Sets or retrieves the gridline value used for rendering the text content of an element.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-layout-grid-mode",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "both",
          "description": "Default. Both the char and line grid modes are enabled. This setting is necessary to fully enable the layout grid on an element."
        },
        {
          "name": "char",
          "description": "Only a character grid is used. This is recommended for use with block-level elements, such as a blockquote, where the line grid is intended to be disabled."
        },
        {
          "name": "line",
          "description": "Only a line grid is used. This is recommended for use with inline elements, such as a span, to disable the horizontal grid on runs of text that act as a single entity in the grid layout."
        },
        {
          "name": "none",
          "description": "No grid is used."
        }
      ],
      "relevance": 50,
      "description": "Gets or sets whether the text layout grid uses two dimensions.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-layout-grid-type",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "fixed",
          "description": "Grid used for monospaced layout. All noncursive characters are treated as equal; every character is centered within a single grid space by default."
        },
        {
          "name": "loose",
          "description": "Default. Grid used for Japanese and Korean characters."
        },
        {
          "name": "strict",
          "description": "Grid used for Chinese, as well as Japanese (Genko) and Korean characters. Only the ideographs, kanas, and wide characters are snapped to the grid."
        }
      ],
      "relevance": 50,
      "description": "Sets or retrieves the type of grid used for rendering the text content of an element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-line-break",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."
        },
        {
          "name": "keep-all",
          "description": "Sequences of CJK characters can no longer break on implied break points. This option should only be used where the presence of word separator characters still creates line-breaking opportunities, as in Korean."
        },
        {
          "name": "newspaper",
          "description": "Breaks CJK scripts using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."
        },
        {
          "name": "normal",
          "description": "Breaks CJK scripts using a normal set of line-breaking rules."
        },
        {
          "name": "strict",
          "description": "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."
        }
      ],
      "relevance": 50,
      "description": "Specifies what set of line breaking restrictions are in effect within the element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-overflow-style",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "No preference, UA should use the first scrolling method in the list that it supports."
        },
        {
          "name": "-ms-autohiding-scrollbar",
          "description": "Indicates the element displays auto-hiding scrollbars during mouse interactions and panning indicators during touch and keyboard interactions."
        },
        {
          "name": "none",
          "description": "Indicates the element does not display scrollbars or panning indicators, even when its content overflows."
        },
        {
          "name": "scrollbar",
          "description": 'Scrollbars are typically narrow strips inserted on one or two edges of an element and which often have arrows to click on and a "thumb" to drag up and down (or left and right) to move the contents of the element.'
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | none | scrollbar | -ms-autohiding-scrollbar",
      "relevance": 0,
      "description": "Specify whether content is clipped when it overflows the element's content area.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-perspective",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "none",
          "description": "No perspective transform is applied."
        }
      ],
      "relevance": 50,
      "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-perspective-origin",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
      "restrictions": [
        "position",
        "percentage",
        "length"
      ]
    },
    {
      "name": "-ms-perspective-origin-x",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "Establishes the origin for the perspective property. It effectively sets the X  position at which the viewer appears to be looking at the children of the element.",
      "restrictions": [
        "position",
        "percentage",
        "length"
      ]
    },
    {
      "name": "-ms-perspective-origin-y",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "Establishes the origin for the perspective property. It effectively sets the Y position at which the viewer appears to be looking at the children of the element.",
      "restrictions": [
        "position",
        "percentage",
        "length"
      ]
    },
    {
      "name": "-ms-progress-appearance",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "bar"
        },
        {
          "name": "ring"
        }
      ],
      "relevance": 50,
      "description": "Gets or sets a value that specifies whether a progress control displays as a bar or a ring.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-scrollbar-3dlight-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-arrow-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the arrow elements of a scroll arrow.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-base-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-darkshadow-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the gutter of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-face-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-highlight-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-shadow-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scrollbar-track-color",
      "browsers": [
        "IE8"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "Determines the color of the track element of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-ms-scroll-chaining",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "chained"
        },
        {
          "name": "none"
        }
      ],
      "status": "nonstandard",
      "syntax": "chained | none",
      "relevance": 0,
      "description": "Gets or sets a value that indicates the scrolling behavior that occurs when a user hits the content boundary during a manipulation.",
      "restrictions": [
        "enum",
        "length"
      ]
    },
    {
      "name": "-ms-scroll-limit",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "status": "nonstandard",
      "syntax": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
      "relevance": 0,
      "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-limit-x-min, -ms-scroll-limit-y-min, -ms-scroll-limit-x-max, and -ms-scroll-limit-y-max properties.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-scroll-limit-x-max",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | <length>",
      "relevance": 0,
      "description": "Gets or sets a value that specifies the maximum value for the scrollLeft property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-scroll-limit-x-min",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<length>",
      "relevance": 0,
      "description": "Gets or sets a value that specifies the minimum value for the scrollLeft property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-scroll-limit-y-max",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | <length>",
      "relevance": 0,
      "description": "Gets or sets a value that specifies the maximum value for the scrollTop property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-scroll-limit-y-min",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<length>",
      "relevance": 0,
      "description": "Gets or sets a value that specifies the minimum value for the scrollTop property.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-ms-scroll-rails",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none"
        },
        {
          "name": "railed"
        }
      ],
      "status": "nonstandard",
      "syntax": "none | railed",
      "relevance": 0,
      "description": "Gets or sets a value that indicates whether or not small motions perpendicular to the primary axis of motion will result in either changes to both the scrollTop and scrollLeft properties or a change to the primary axis (for instance, either the scrollTop or scrollLeft properties will change, but not both).",
      "restrictions": [
        "enum",
        "length"
      ]
    },
    {
      "name": "-ms-scroll-snap-points-x",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "snapInterval(100%, 100%)"
        },
        {
          "name": "snapList()"
        }
      ],
      "status": "nonstandard",
      "syntax": "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
      "relevance": 0,
      "description": "Gets or sets a value that defines where snap-points will be located along the x-axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-scroll-snap-points-y",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "snapInterval(100%, 100%)"
        },
        {
          "name": "snapList()"
        }
      ],
      "status": "nonstandard",
      "syntax": "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
      "relevance": 0,
      "description": "Gets or sets a value that defines where snap-points will be located along the y-axis.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-scroll-snap-type",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none",
          "description": "The visual viewport of this scroll container must ignore snap points, if any, when scrolled."
        },
        {
          "name": "mandatory",
          "description": "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."
        },
        {
          "name": "proximity",
          "description": "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."
        }
      ],
      "status": "nonstandard",
      "syntax": "none | proximity | mandatory",
      "relevance": 0,
      "description": "Gets or sets a value that defines what type of snap-point should be used for the current element. There are two type of snap-points, with the primary difference being whether or not the user is guaranteed to always stop on a snap-point.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-scroll-snap-x",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "mandatory"
        },
        {
          "name": "none"
        },
        {
          "name": "proximity"
        },
        {
          "name": "snapInterval(100%, 100%)"
        },
        {
          "name": "snapList()"
        }
      ],
      "status": "nonstandard",
      "syntax": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
      "relevance": 0,
      "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-x properties.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-scroll-snap-y",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "mandatory"
        },
        {
          "name": "none"
        },
        {
          "name": "proximity"
        },
        {
          "name": "snapInterval(100%, 100%)"
        },
        {
          "name": "snapList()"
        }
      ],
      "status": "nonstandard",
      "syntax": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
      "relevance": 0,
      "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-y properties.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-scroll-translation",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none"
        },
        {
          "name": "vertical-to-horizontal"
        }
      ],
      "status": "nonstandard",
      "syntax": "none | vertical-to-horizontal",
      "relevance": 0,
      "description": "Gets or sets a value that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-text-align-last",
      "browsers": [
        "E",
        "IE8"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "center",
          "description": "The inline contents are centered within the line box."
        },
        {
          "name": "justify",
          "description": "The text is justified according to the method specified by the 'text-justify' property."
        },
        {
          "name": "left",
          "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
        },
        {
          "name": "right",
          "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
        }
      ],
      "relevance": 50,
      "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-text-autospace",
      "browsers": [
        "E",
        "IE8"
      ],
      "values": [
        {
          "name": "ideograph-alpha",
          "description": "Creates 1/4em extra spacing between runs of ideographic letters and non-ideographic letters, such as Latin-based, Cyrillic, Greek, Arabic or Hebrew."
        },
        {
          "name": "ideograph-numeric",
          "description": "Creates 1/4em extra spacing between runs of ideographic letters and numeric glyphs."
        },
        {
          "name": "ideograph-parenthesis",
          "description": "Creates extra spacing between normal (non wide) parenthesis and ideographs."
        },
        {
          "name": "ideograph-space",
          "description": "Extends the width of the space character while surrounded by ideographs."
        },
        {
          "name": "none",
          "description": "No extra space is created."
        },
        {
          "name": "punctuation",
          "description": "Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions."
        }
      ],
      "status": "nonstandard",
      "syntax": "none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space",
      "relevance": 0,
      "description": "Determines whether or not a full-width punctuation mark character should be trimmed if it appears at the beginning of a line, so that its 'ink' lines up with the first glyph in the line above and below.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-text-combine-horizontal",
      "browsers": [
        "E",
        "IE11"
      ],
      "values": [
        {
          "name": "all",
          "description": "Attempt to typeset horizontally all consecutive characters within the box such that they take up the space of a single character within the vertical line box."
        },
        {
          "name": "digits",
          "description": "Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030-U+0039) that has as many or fewer characters than the specified integer such that it takes up the space of a single character within the vertical line box."
        },
        {
          "name": "none",
          "description": "No special processing."
        }
      ],
      "relevance": 50,
      "description": "This property specifies the combination of multiple characters into the space of a single character.",
      "restrictions": [
        "enum",
        "integer"
      ]
    },
    {
      "name": "-ms-text-justify",
      "browsers": [
        "E",
        "IE8"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."
        },
        {
          "name": "distribute",
          "description": "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."
        },
        {
          "name": "inter-cluster",
          "description": "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai."
        },
        {
          "name": "inter-ideograph",
          "description": "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages."
        },
        {
          "name": "inter-word",
          "description": "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean."
        },
        {
          "name": "kashida",
          "description": "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation."
        }
      ],
      "relevance": 50,
      "description": "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-text-kashida-space",
      "browsers": [
        "E",
        "IE10"
      ],
      "relevance": 50,
      "description": "Sets or retrieves the ratio of kashida expansion to white space expansion when justifying lines of text in the object.",
      "restrictions": [
        "percentage"
      ]
    },
    {
      "name": "-ms-text-overflow",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "clip",
          "description": "Clip inline content that overflows. Characters may be only partially rendered."
        },
        {
          "name": "ellipsis",
          "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
        }
      ],
      "relevance": 50,
      "description": "Text can overflow for example when it is prevented from wrapping",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-text-size-adjust",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Renderers must use the default size adjustment when displaying on a small device."
        },
        {
          "name": "none",
          "description": "Renderers must not do size adjustment when displaying on a small device."
        }
      ],
      "relevance": 50,
      "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
      "restrictions": [
        "enum",
        "percentage"
      ]
    },
    {
      "name": "-ms-text-underline-position",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "alphabetic",
          "description": "The underline is aligned with the alphabetic baseline. In this case the underline is likely to cross some descenders."
        },
        {
          "name": "auto",
          "description": "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."
        },
        {
          "name": "over",
          "description": "The underline is aligned with the 'top' (right in vertical writing) edge of the element's em-box. In this mode, an overline also switches sides."
        },
        {
          "name": "under",
          "description": "The underline is aligned with the 'bottom' (left in vertical writing) edge of the element's em-box. In this case the underline usually does not cross the descenders. This is sometimes called 'accounting' underline."
        }
      ],
      "relevance": 50,
      "description": "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements.This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-touch-action",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The element is a passive element, with several exceptions."
        },
        {
          "name": "double-tap-zoom",
          "description": "The element will zoom on double-tap."
        },
        {
          "name": "manipulation",
          "description": "The element is a manipulation-causing element."
        },
        {
          "name": "none",
          "description": "The element is a manipulation-blocking element."
        },
        {
          "name": "pan-x",
          "description": "The element permits touch-driven panning on the horizontal axis. The touch pan is performed on the nearest ancestor with horizontally scrollable content."
        },
        {
          "name": "pan-y",
          "description": "The element permits touch-driven panning on the vertical axis. The touch pan is performed on the nearest ancestor with vertically scrollable content."
        },
        {
          "name": "pinch-zoom",
          "description": "The element permits pinch-zooming. The pinch-zoom is performed on the nearest ancestor with zoomable content."
        }
      ],
      "relevance": 50,
      "description": "Gets or sets a value that indicates whether and how a given region can be manipulated by the user.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-touch-select",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "grippers",
          "description": "Grippers are always on."
        },
        {
          "name": "none",
          "description": "Grippers are always off."
        }
      ],
      "status": "nonstandard",
      "syntax": "grippers | none",
      "relevance": 0,
      "description": "Gets or sets a value that toggles the 'gripper' visual elements that enable touch text selection.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-transform",
      "browsers": [
        "IE9-9"
      ],
      "values": [
        {
          "name": "matrix()",
          "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
        },
        {
          "name": "matrix3d()",
          "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
        },
        {
          "name": "none"
        },
        {
          "name": "rotate()",
          "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
        },
        {
          "name": "rotate3d()",
          "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
        },
        {
          "name": "rotateX('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the X axis."
        },
        {
          "name": "rotateY('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Y axis."
        },
        {
          "name": "rotateZ('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Z axis."
        },
        {
          "name": "scale()",
          "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
        },
        {
          "name": "scale3d()",
          "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
        },
        {
          "name": "scaleX()",
          "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
        },
        {
          "name": "scaleY()",
          "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
        },
        {
          "name": "scaleZ()",
          "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
        },
        {
          "name": "skew()",
          "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
        },
        {
          "name": "skewX()",
          "description": "Specifies a skew transformation along the X axis by the given angle."
        },
        {
          "name": "skewY()",
          "description": "Specifies a skew transformation along the Y axis by the given angle."
        },
        {
          "name": "translate()",
          "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
        },
        {
          "name": "translate3d()",
          "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
        },
        {
          "name": "translateX()",
          "description": "Specifies a translation by the given amount in the X direction."
        },
        {
          "name": "translateY()",
          "description": "Specifies a translation by the given amount in the Y direction."
        },
        {
          "name": "translateZ()",
          "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
        }
      ],
      "relevance": 50,
      "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-transform-origin",
      "browsers": [
        "IE9-9"
      ],
      "relevance": 50,
      "description": "Establishes the origin of transformation for an element.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "-ms-transform-origin-x",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-ms-transform-origin-y",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-ms-transform-origin-z",
      "browsers": [
        "IE10"
      ],
      "relevance": 50,
      "description": "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-ms-user-select",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "element"
        },
        {
          "name": "none"
        },
        {
          "name": "text"
        }
      ],
      "status": "nonstandard",
      "syntax": "none | element | text",
      "relevance": 0,
      "description": "Controls the appearance of selection.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-word-break",
      "browsers": [
        "IE8"
      ],
      "values": [
        {
          "name": "break-all",
          "description": "Lines may break between any two grapheme clusters for non-CJK scripts."
        },
        {
          "name": "keep-all",
          "description": "Block characters can no longer create implied break points."
        },
        {
          "name": "normal",
          "description": "Breaks non-CJK scripts according to their own rules."
        }
      ],
      "relevance": 50,
      "description": "Specifies line break opportunities for non-CJK scripts.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-word-wrap",
      "browsers": [
        "IE8"
      ],
      "values": [
        {
          "name": "break-word",
          "description": "An unbreakable 'word' may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
        },
        {
          "name": "normal",
          "description": "Lines may break only at allowed break points."
        }
      ],
      "relevance": 50,
      "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-wrap-flow",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For floats an exclusion is created, for all other elements an exclusion is not created."
        },
        {
          "name": "both",
          "description": "Inline flow content can flow on all sides of the exclusion."
        },
        {
          "name": "clear",
          "description": "Inline flow content can only wrap on top and bottom of the exclusion and must leave the areas to the start and end edges of the exclusion box empty."
        },
        {
          "name": "end",
          "description": "Inline flow content can wrap on the end side of the exclusion area but must leave the area to the start edge of the exclusion area empty."
        },
        {
          "name": "maximum",
          "description": "Inline flow content can wrap on the side of the exclusion with the largest available space for the given line, and must leave the other side of the exclusion empty."
        },
        {
          "name": "minimum",
          "description": "Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content's containing block, and must leave the other edge of the exclusion empty."
        },
        {
          "name": "start",
          "description": "Inline flow content can wrap on the start edge of the exclusion area but must leave the area to end edge of the exclusion area empty."
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | both | start | end | maximum | clear",
      "relevance": 0,
      "description": "An element becomes an exclusion when its 'wrap-flow' property has a computed value other than 'auto'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-wrap-margin",
      "browsers": [
        "E",
        "IE10"
      ],
      "status": "nonstandard",
      "syntax": "<length>",
      "relevance": 0,
      "description": "Gets or sets a value that is used to offset the inner wrap shape from other shapes.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-ms-wrap-through",
      "browsers": [
        "E",
        "IE10"
      ],
      "values": [
        {
          "name": "none",
          "description": "The exclusion element does not inherit its parent node's wrapping context. Its descendants are only subject to exclusion shapes defined inside the element."
        },
        {
          "name": "wrap",
          "description": "The exclusion element inherits its parent node's wrapping context. Its descendant inline content wraps around exclusions defined outside the element."
        }
      ],
      "status": "nonstandard",
      "syntax": "wrap | none",
      "relevance": 0,
      "description": "Specifies if an element inherits its parent wrapping context. In other words if it is subject to the exclusions defined outside the element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-writing-mode",
      "browsers": [
        "IE8"
      ],
      "values": [
        {
          "name": "bt-lr"
        },
        {
          "name": "bt-rl"
        },
        {
          "name": "lr-bt"
        },
        {
          "name": "lr-tb"
        },
        {
          "name": "rl-bt"
        },
        {
          "name": "rl-tb"
        },
        {
          "name": "tb-lr"
        },
        {
          "name": "tb-rl"
        }
      ],
      "relevance": 50,
      "description": "Shorthand property for both 'direction' and 'block-progression'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-ms-zoom",
      "browsers": [
        "IE8"
      ],
      "values": [
        {
          "name": "normal"
        }
      ],
      "relevance": 50,
      "description": "Sets or retrieves the magnification scale of the object.",
      "restrictions": [
        "enum",
        "integer",
        "number",
        "percentage"
      ]
    },
    {
      "name": "-ms-zoom-animation",
      "browsers": [
        "IE10"
      ],
      "values": [
        {
          "name": "default"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "description": "Gets or sets a value that indicates whether an animation is used when zooming.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "nav-down",
      "browsers": [
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
        },
        {
          "name": "current",
          "description": "Indicates that the user agent should target the frame that the element is in."
        },
        {
          "name": "root",
          "description": "Indicates that the user agent should target the full window."
        }
      ],
      "relevance": 50,
      "description": "Provides an way to control directional focus navigation.",
      "restrictions": [
        "enum",
        "identifier",
        "string"
      ]
    },
    {
      "name": "nav-index",
      "browsers": [
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The element's sequential navigation order is assigned automatically by the user agent."
        }
      ],
      "relevance": 50,
      "description": "Provides an input-method-neutral way of specifying the sequential navigation order (also known as 'tabbing order').",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "nav-left",
      "browsers": [
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
        },
        {
          "name": "current",
          "description": "Indicates that the user agent should target the frame that the element is in."
        },
        {
          "name": "root",
          "description": "Indicates that the user agent should target the full window."
        }
      ],
      "relevance": 50,
      "description": "Provides an way to control directional focus navigation.",
      "restrictions": [
        "enum",
        "identifier",
        "string"
      ]
    },
    {
      "name": "nav-right",
      "browsers": [
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
        },
        {
          "name": "current",
          "description": "Indicates that the user agent should target the frame that the element is in."
        },
        {
          "name": "root",
          "description": "Indicates that the user agent should target the full window."
        }
      ],
      "relevance": 50,
      "description": "Provides an way to control directional focus navigation.",
      "restrictions": [
        "enum",
        "identifier",
        "string"
      ]
    },
    {
      "name": "nav-up",
      "browsers": [
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
        },
        {
          "name": "current",
          "description": "Indicates that the user agent should target the frame that the element is in."
        },
        {
          "name": "root",
          "description": "Indicates that the user agent should target the full window."
        }
      ],
      "relevance": 50,
      "description": "Provides an way to control directional focus navigation.",
      "restrictions": [
        "enum",
        "identifier",
        "string"
      ]
    },
    {
      "name": "negative",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "<symbol> <symbol>?",
      "relevance": 50,
      "description": "@counter-style descriptor. Defines how to alter the representation when the counter value is negative.",
      "restrictions": [
        "image",
        "identifier",
        "string"
      ]
    },
    {
      "name": "-o-animation",
      "browsers": [
        "O12"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        },
        {
          "name": "none",
          "description": "No animation is performed"
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property combines six of the animation properties into a single property.",
      "restrictions": [
        "time",
        "enum",
        "timing-function",
        "identifier",
        "number"
      ]
    },
    {
      "name": "-o-animation-delay",
      "browsers": [
        "O12"
      ],
      "relevance": 50,
      "description": "Defines when the animation will start.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-o-animation-direction",
      "browsers": [
        "O12"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "relevance": 50,
      "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-o-animation-duration",
      "browsers": [
        "O12"
      ],
      "relevance": 50,
      "description": "Defines the length of time that an animation takes to complete one cycle.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-o-animation-fill-mode",
      "browsers": [
        "O12"
      ],
      "values": [
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "none",
          "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
        }
      ],
      "relevance": 50,
      "description": "Defines what values are applied by the animation outside the time it is executing.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-o-animation-iteration-count",
      "browsers": [
        "O12"
      ],
      "values": [
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        }
      ],
      "relevance": 50,
      "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
      "restrictions": [
        "number",
        "enum"
      ]
    },
    {
      "name": "-o-animation-name",
      "browsers": [
        "O12"
      ],
      "values": [
        {
          "name": "none",
          "description": "No animation is performed"
        }
      ],
      "relevance": 50,
      "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
      "restrictions": [
        "identifier",
        "enum"
      ]
    },
    {
      "name": "-o-animation-play-state",
      "browsers": [
        "O12"
      ],
      "values": [
        {
          "name": "paused",
          "description": "A running animation will be paused."
        },
        {
          "name": "running",
          "description": "Resume playback of a paused animation."
        }
      ],
      "relevance": 50,
      "description": "Defines whether the animation is running or paused.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-o-animation-timing-function",
      "browsers": [
        "O12"
      ],
      "relevance": 50,
      "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "object-fit",
      "browsers": [
        "E79",
        "FF36",
        "S10",
        "C32",
        "O19"
      ],
      "values": [
        {
          "name": "contain",
          "description": "The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height."
        },
        {
          "name": "cover",
          "description": "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height."
        },
        {
          "name": "fill",
          "description": "The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height."
        },
        {
          "name": "none",
          "description": "The replaced content is not resized to fit inside the element's content box"
        },
        {
          "name": "scale-down",
          "description": "Size the content as if 'none' or 'contain' were specified, whichever would result in a smaller concrete object size."
        }
      ],
      "syntax": "fill | contain | cover | none | scale-down",
      "relevance": 71,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/object-fit"
        }
      ],
      "description": "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "object-position",
      "browsers": [
        "E79",
        "FF36",
        "S10",
        "C32",
        "O19"
      ],
      "syntax": "<position>",
      "relevance": 57,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/object-position"
        }
      ],
      "description": "Determines the alignment of the replaced element inside its box.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "-o-border-image",
      "browsers": [
        "O11.6"
      ],
      "values": [
        {
          "name": "auto",
          "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
        },
        {
          "name": "fill",
          "description": "Causes the middle part of the border-image to be preserved."
        },
        {
          "name": "none"
        },
        {
          "name": "repeat",
          "description": "The image is tiled (repeated) to fill the area."
        },
        {
          "name": "round",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
        },
        {
          "name": "space",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
        },
        {
          "name": "stretch",
          "description": "The image is stretched to fill the area."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "percentage",
        "number",
        "image",
        "enum"
      ]
    },
    {
      "name": "-o-object-fit",
      "browsers": [
        "O10.6"
      ],
      "values": [
        {
          "name": "contain",
          "description": "The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height."
        },
        {
          "name": "cover",
          "description": "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height."
        },
        {
          "name": "fill",
          "description": "The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height."
        },
        {
          "name": "none",
          "description": "The replaced content is not resized to fit inside the element's content box"
        },
        {
          "name": "scale-down",
          "description": "Size the content as if 'none' or 'contain' were specified, whichever would result in a smaller concrete object size."
        }
      ],
      "relevance": 50,
      "description": "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-o-object-position",
      "browsers": [
        "O10.6"
      ],
      "relevance": 50,
      "description": "Determines the alignment of the replaced element inside its box.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "opacity",
      "browsers": [
        "E12",
        "FF1",
        "S2",
        "C1",
        "IE9",
        "O9"
      ],
      "syntax": "<alpha-value>",
      "relevance": 93,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/opacity"
        }
      ],
      "description": "Opacity of an element's text, where 1 is opaque and 0 is entirely transparent.",
      "restrictions": [
        "number(0-1)"
      ]
    },
    {
      "name": "order",
      "browsers": [
        "E12",
        "FF20",
        "S9",
        "C29",
        "IE11",
        "O12.1"
      ],
      "syntax": "<integer>",
      "relevance": 65,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/order"
        }
      ],
      "description": "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "orphans",
      "browsers": [
        "E12",
        "S1.3",
        "C25",
        "IE8",
        "O9.2"
      ],
      "syntax": "<integer>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/orphans"
        }
      ],
      "description": "Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-o-table-baseline",
      "browsers": [
        "O9.6"
      ],
      "relevance": 50,
      "description": "Determines which row of a inline-table should be used as baseline of inline-table.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-o-tab-size",
      "browsers": [
        "O10.6"
      ],
      "relevance": 50,
      "description": "This property determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
      "restrictions": [
        "integer",
        "length"
      ]
    },
    {
      "name": "-o-text-overflow",
      "browsers": [
        "O10"
      ],
      "values": [
        {
          "name": "clip",
          "description": "Clip inline content that overflows. Characters may be only partially rendered."
        },
        {
          "name": "ellipsis",
          "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
        }
      ],
      "relevance": 50,
      "description": "Text can overflow for example when it is prevented from wrapping",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-o-transform",
      "browsers": [
        "O10.5"
      ],
      "values": [
        {
          "name": "matrix()",
          "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
        },
        {
          "name": "matrix3d()",
          "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
        },
        {
          "name": "none"
        },
        {
          "name": "rotate()",
          "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
        },
        {
          "name": "rotate3d()",
          "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
        },
        {
          "name": "rotateX('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the X axis."
        },
        {
          "name": "rotateY('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Y axis."
        },
        {
          "name": "rotateZ('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Z axis."
        },
        {
          "name": "scale()",
          "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
        },
        {
          "name": "scale3d()",
          "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
        },
        {
          "name": "scaleX()",
          "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
        },
        {
          "name": "scaleY()",
          "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
        },
        {
          "name": "scaleZ()",
          "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
        },
        {
          "name": "skew()",
          "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
        },
        {
          "name": "skewX()",
          "description": "Specifies a skew transformation along the X axis by the given angle."
        },
        {
          "name": "skewY()",
          "description": "Specifies a skew transformation along the Y axis by the given angle."
        },
        {
          "name": "translate()",
          "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
        },
        {
          "name": "translate3d()",
          "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
        },
        {
          "name": "translateX()",
          "description": "Specifies a translation by the given amount in the X direction."
        },
        {
          "name": "translateY()",
          "description": "Specifies a translation by the given amount in the Y direction."
        },
        {
          "name": "translateZ()",
          "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
        }
      ],
      "relevance": 50,
      "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-o-transform-origin",
      "browsers": [
        "O10.5"
      ],
      "relevance": 50,
      "description": "Establishes the origin of transformation for an element.",
      "restrictions": [
        "positon",
        "length",
        "percentage"
      ]
    },
    {
      "name": "-o-transition",
      "browsers": [
        "O11.5"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property combines four of the transition properties into a single property.",
      "restrictions": [
        "time",
        "property",
        "timing-function",
        "enum"
      ]
    },
    {
      "name": "-o-transition-delay",
      "browsers": [
        "O11.5"
      ],
      "relevance": 50,
      "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-o-transition-duration",
      "browsers": [
        "O11.5"
      ],
      "relevance": 50,
      "description": "Specifies how long the transition from the old value to the new value should take.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-o-transition-property",
      "browsers": [
        "O11.5"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "relevance": 50,
      "description": "Specifies the name of the CSS property to which the transition is applied.",
      "restrictions": [
        "property"
      ]
    },
    {
      "name": "-o-transition-timing-function",
      "browsers": [
        "O11.5"
      ],
      "relevance": 50,
      "description": "Describes how the intermediate values used during a transition will be calculated.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "offset-block-end",
      "browsers": [
        "FF41"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
        }
      ],
      "relevance": 50,
      "description": "Logical 'bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "offset-block-start",
      "browsers": [
        "FF41"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
        }
      ],
      "relevance": 50,
      "description": "Logical 'top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "offset-inline-end",
      "browsers": [
        "FF41"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
        }
      ],
      "relevance": 50,
      "description": "Logical 'right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "offset-inline-start",
      "browsers": [
        "FF41"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
        }
      ],
      "relevance": 50,
      "description": "Logical 'left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "outline",
      "browsers": [
        "E94",
        "FF88",
        "S16.4",
        "C94",
        "IE8",
        "O80"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Permits the user agent to render a custom outline style, typically the default platform style."
        },
        {
          "name": "invert",
          "browsers": [
            "E94",
            "FF88",
            "S16.4",
            "C94",
            "IE8",
            "O80"
          ],
          "description": "Performs a color inversion on the pixels on the screen."
        }
      ],
      "syntax": "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
      "relevance": 88,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/outline"
        }
      ],
      "description": "Shorthand property for 'outline-style', 'outline-width', and 'outline-color'.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color",
        "enum"
      ]
    },
    {
      "name": "outline-color",
      "browsers": [
        "E12",
        "FF1.5",
        "S1.2",
        "C1",
        "IE8",
        "O7"
      ],
      "values": [
        {
          "name": "invert",
          "browsers": [
            "E12",
            "FF1.5",
            "S1.2",
            "C1",
            "IE8",
            "O7"
          ],
          "description": "Performs a color inversion on the pixels on the screen."
        }
      ],
      "syntax": "<color> | invert",
      "relevance": 62,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/outline-color"
        }
      ],
      "description": "The color of the outline.",
      "restrictions": [
        "enum",
        "color"
      ]
    },
    {
      "name": "outline-offset",
      "browsers": [
        "E15",
        "FF1.5",
        "S1.2",
        "C1",
        "O9.5"
      ],
      "syntax": "<length>",
      "relevance": 69,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/outline-offset"
        }
      ],
      "description": "Offset the outline and draw it beyond the border edge.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "outline-style",
      "browsers": [
        "E12",
        "FF1.5",
        "S1.2",
        "C1",
        "IE8",
        "O7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Permits the user agent to render a custom outline style, typically the default platform style."
        }
      ],
      "syntax": "auto | <'border-style'>",
      "relevance": 61,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/outline-style"
        }
      ],
      "description": "Style of the outline.",
      "restrictions": [
        "line-style",
        "enum"
      ]
    },
    {
      "name": "outline-width",
      "browsers": [
        "E12",
        "FF1.5",
        "S1.2",
        "C1",
        "IE8",
        "O7"
      ],
      "syntax": "<line-width>",
      "relevance": 61,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/outline-width"
        }
      ],
      "description": "Width of the outline.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "overflow",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
        },
        {
          "name": "hidden",
          "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
        },
        {
          "name": "-moz-hidden-unscrollable",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O7"
          ],
          "description": "Same as the standardized 'clip', except doesn't establish a block formatting context."
        },
        {
          "name": "scroll",
          "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
        },
        {
          "name": "visible",
          "description": "Content is not clipped, i.e., it may be rendered outside the content box."
        }
      ],
      "syntax": "[ visible | hidden | clip | scroll | auto ]{1,2}",
      "relevance": 93,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow"
        }
      ],
      "description": "Shorthand for setting 'overflow-x' and 'overflow-y'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "overflow-wrap",
      "browsers": [
        "E18",
        "FF49",
        "S7",
        "C23",
        "IE5.5",
        "O12.1"
      ],
      "values": [
        {
          "name": "break-word",
          "description": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
        },
        {
          "name": "normal",
          "description": "Lines may break only at allowed break points."
        }
      ],
      "syntax": "normal | break-word | anywhere",
      "relevance": 65,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap"
        }
      ],
      "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "overflow-x",
      "browsers": [
        "E12",
        "FF3.5",
        "S3",
        "C1",
        "IE5",
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
        },
        {
          "name": "hidden",
          "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
        },
        {
          "name": "scroll",
          "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
        },
        {
          "name": "visible",
          "description": "Content is not clipped, i.e., it may be rendered outside the content box."
        }
      ],
      "syntax": "visible | hidden | clip | scroll | auto",
      "relevance": 81,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-x"
        }
      ],
      "description": "Specifies the handling of overflow in the horizontal direction.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "overflow-y",
      "browsers": [
        "E12",
        "FF3.5",
        "S3",
        "C1",
        "IE5",
        "O9.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
        },
        {
          "name": "hidden",
          "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
        },
        {
          "name": "scroll",
          "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
        },
        {
          "name": "visible",
          "description": "Content is not clipped, i.e., it may be rendered outside the content box."
        }
      ],
      "syntax": "visible | hidden | clip | scroll | auto",
      "relevance": 82,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-y"
        }
      ],
      "description": "Specifies the handling of overflow in the vertical direction.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "pad",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "<integer> && <symbol>",
      "relevance": 50,
      "description": '@counter-style descriptor. Specifies a "fixed-width" counter style, where representations shorter than the pad value are padded with a particular <symbol>',
      "restrictions": [
        "integer",
        "image",
        "string",
        "identifier"
      ]
    },
    {
      "name": "padding",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [],
      "syntax": "[ <length> | <percentage> ]{1,4}",
      "relevance": 95,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-bottom",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<length> | <percentage>",
      "relevance": 89,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-bottom"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-block-end",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'padding-left'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block-end"
        }
      ],
      "description": "Logical 'padding-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-block-start",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'padding-left'>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block-start"
        }
      ],
      "description": "Logical 'padding-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-inline-end",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'padding-left'>",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline-end"
        }
      ],
      "description": "Logical 'padding-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-inline-start",
      "browsers": [
        "E79",
        "FF41",
        "S12.1",
        "C69",
        "O56"
      ],
      "syntax": "<'padding-left'>",
      "relevance": 56,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline-start"
        }
      ],
      "description": "Logical 'padding-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-left",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<length> | <percentage>",
      "relevance": 90,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-left"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-right",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<length> | <percentage>",
      "relevance": 89,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-right"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "padding-top",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "syntax": "<length> | <percentage>",
      "relevance": 90,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-top"
        }
      ],
      "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "page-break-after",
      "browsers": [
        "E12",
        "FF1",
        "S1.2",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page break after generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page break after the generated box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "right",
          "description": "Force one or two page breaks after the generated box so that the next page is formatted as a right page."
        }
      ],
      "syntax": "auto | always | avoid | left | right | recto | verso",
      "relevance": 52,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-after"
        }
      ],
      "description": "Defines rules for page breaks after an element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "page-break-before",
      "browsers": [
        "E12",
        "FF1",
        "S1.2",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page break before the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page break before the generated box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before the generated box so that the next page is formatted as a right page."
        }
      ],
      "syntax": "auto | always | avoid | left | right | recto | verso",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-before"
        }
      ],
      "description": "Defines rules for page breaks before an element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "page-break-inside",
      "browsers": [
        "E12",
        "FF19",
        "S1.3",
        "C1",
        "IE8",
        "O7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Neither force nor forbid a page break inside the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page break inside the generated box."
        }
      ],
      "syntax": "auto | avoid",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-inside"
        }
      ],
      "description": "Defines rules for page breaks inside an element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "paint-order",
      "browsers": [
        "E17",
        "FF60",
        "S8",
        "C35",
        "O22"
      ],
      "values": [
        {
          "name": "fill"
        },
        {
          "name": "markers"
        },
        {
          "name": "normal",
          "description": "The element is painted with the standard order of painting operations: the 'fill' is painted first, then its 'stroke' and finally its markers."
        },
        {
          "name": "stroke"
        }
      ],
      "syntax": "normal | [ fill || stroke || markers ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/paint-order"
        }
      ],
      "description": "Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "perspective",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C36",
        "IE10",
        "O23"
      ],
      "values": [
        {
          "name": "none",
          "description": "No perspective transform is applied."
        }
      ],
      "syntax": "none | <length>",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/perspective"
        }
      ],
      "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
      "restrictions": [
        "length",
        "enum"
      ]
    },
    {
      "name": "perspective-origin",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C36",
        "IE10",
        "O23"
      ],
      "syntax": "<position>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/perspective-origin"
        }
      ],
      "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
      "restrictions": [
        "position",
        "percentage",
        "length"
      ]
    },
    {
      "name": "pointer-events",
      "browsers": [
        "E12",
        "FF1.5",
        "S4",
        "C1",
        "IE11",
        "O9"
      ],
      "values": [
        {
          "name": "all",
          "description": "The given element can be the target element for pointer events whenever the pointer is over either the interior or the perimeter of the element."
        },
        {
          "name": "fill",
          "description": "The given element can be the target element for pointer events whenever the pointer is over the interior of the element."
        },
        {
          "name": "none",
          "description": "The given element does not receive pointer events."
        },
        {
          "name": "painted",
          "description": 'The given element can be the target element for pointer events when the pointer is over a "painted" area. '
        },
        {
          "name": "stroke",
          "description": "The given element can be the target element for pointer events whenever the pointer is over the perimeter of the element."
        },
        {
          "name": "visible",
          "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and the pointer is over either the interior or the perimeter of the element."
        },
        {
          "name": "visibleFill",
          "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over the interior of the element."
        },
        {
          "name": "visiblePainted",
          "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over a 'painted' area."
        },
        {
          "name": "visibleStroke",
          "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over the perimeter of the element."
        }
      ],
      "syntax": "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
      "relevance": 82,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/pointer-events"
        }
      ],
      "description": "Specifies under what circumstances a given element can be the target element for a pointer event.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "position",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O4"
      ],
      "values": [
        {
          "name": "absolute",
          "description": "The box's position (and possibly size) is specified with the 'top', 'right', 'bottom', and 'left' properties. These properties specify offsets with respect to the box's 'containing block'."
        },
        {
          "name": "fixed",
          "description": "The box's position is calculated according to the 'absolute' model, but in addition, the box is fixed with respect to some reference. As with the 'absolute' model, the box's margins do not collapse with any other margins."
        },
        {
          "name": "-ms-page",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O4"
          ],
          "description": "The box's position is calculated according to the 'absolute' model."
        },
        {
          "name": "relative",
          "description": "The box's position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position."
        },
        {
          "name": "static",
          "description": "The box is a normal box, laid out according to the normal flow. The 'top', 'right', 'bottom', and 'left' properties do not apply."
        },
        {
          "name": "sticky",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O4"
          ],
          "description": "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes."
        },
        {
          "name": "-webkit-sticky",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O4"
          ],
          "description": "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes."
        }
      ],
      "syntax": "static | relative | absolute | sticky | fixed",
      "relevance": 95,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/position"
        }
      ],
      "description": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "prefix",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "<symbol>",
      "relevance": 50,
      "description": "@counter-style descriptor. Specifies a <symbol> that is prepended to the marker representation.",
      "restrictions": [
        "image",
        "string",
        "identifier"
      ]
    },
    {
      "name": "quotes",
      "browsers": [
        "E12",
        "FF1.5",
        "S9",
        "C11",
        "IE8",
        "O4"
      ],
      "values": [
        {
          "name": "none",
          "description": "The 'open-quote' and 'close-quote' values of the 'content' property produce no quotations marks, as if they were 'no-open-quote' and 'no-close-quote' respectively."
        }
      ],
      "syntax": "none | auto | [ <string> <string> ]+",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/quotes"
        }
      ],
      "description": "Specifies quotation marks for any number of embedded quotations.",
      "restrictions": [
        "string"
      ]
    },
    {
      "name": "range",
      "browsers": [
        "FF33"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The range depends on the counter system."
        },
        {
          "name": "infinite",
          "description": "If used as the first value in a range, it represents negative infinity; if used as the second value, it represents positive infinity."
        }
      ],
      "atRule": "@counter-style",
      "syntax": "[ [ <integer> | infinite ]{2} ]# | auto",
      "relevance": 50,
      "description": "@counter-style descriptor. Defines the ranges over which the counter style is defined.",
      "restrictions": [
        "integer",
        "enum"
      ]
    },
    {
      "name": "resize",
      "browsers": [
        "E79",
        "FF4",
        "S3",
        "C1",
        "O12.1"
      ],
      "values": [
        {
          "name": "both",
          "description": "The UA presents a bidirectional resizing mechanism to allow the user to adjust both the height and the width of the element."
        },
        {
          "name": "horizontal",
          "description": "The UA presents a unidirectional horizontal resizing mechanism to allow the user to adjust only the width of the element."
        },
        {
          "name": "none",
          "description": "The UA does not present a resizing mechanism on the element, and the user is given no direct manipulation mechanism to resize the element."
        },
        {
          "name": "vertical",
          "description": "The UA presents a unidirectional vertical resizing mechanism to allow the user to adjust only the height of the element."
        }
      ],
      "syntax": "none | both | horizontal | vertical | block | inline",
      "relevance": 64,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/resize"
        }
      ],
      "description": "Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "right",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/right"
        }
      ],
      "description": "Specifies how far an absolutely positioned box's right margin edge is offset to the left of the right edge of the box's 'containing block'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "ruby-align",
      "browsers": [
        "FF38"
      ],
      "values": [
        {
          "name": "auto",
          "browsers": [
            "FF38"
          ],
          "description": "The user agent determines how the ruby contents are aligned. This is the initial value."
        },
        {
          "name": "center",
          "description": "The ruby content is centered within its box."
        },
        {
          "name": "distribute-letter",
          "browsers": [
            "FF38"
          ],
          "description": "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with the first and last ruby text glyphs lining up with the corresponding first and last base glyphs. If the width of the ruby text is at least the width of the base, then the letters of the base are evenly distributed across the width of the ruby text."
        },
        {
          "name": "distribute-space",
          "browsers": [
            "FF38"
          ],
          "description": "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with a certain amount of white space preceding the first and following the last character in the ruby text. That amount of white space is normally equal to half the amount of inter-character space of the ruby text."
        },
        {
          "name": "left",
          "description": "The ruby text content is aligned with the start edge of the base."
        },
        {
          "name": "line-edge",
          "browsers": [
            "FF38"
          ],
          "description": "If the ruby text is not adjacent to a line edge, it is aligned as in 'auto'. If it is adjacent to a line edge, then it is still aligned as in auto, but the side of the ruby text that touches the end of the line is lined up with the corresponding edge of the base."
        },
        {
          "name": "right",
          "browsers": [
            "FF38"
          ],
          "description": "The ruby text content is aligned with the end edge of the base."
        },
        {
          "name": "start",
          "browsers": [
            "FF38"
          ],
          "description": "The ruby text content is aligned with the start edge of the base."
        },
        {
          "name": "space-between",
          "browsers": [
            "FF38"
          ],
          "description": "The ruby content expands as defined for normal text justification (as defined by 'text-justify'),"
        },
        {
          "name": "space-around",
          "browsers": [
            "FF38"
          ],
          "description": "As for 'space-between' except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content."
        }
      ],
      "status": "experimental",
      "syntax": "start | center | space-between | space-around",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/ruby-align"
        }
      ],
      "description": "Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "ruby-overhang",
      "browsers": [
        "FF10",
        "IE5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The ruby text can overhang text adjacent to the base on either side. This is the initial value."
        },
        {
          "name": "end",
          "description": "The ruby text can overhang the text that follows it."
        },
        {
          "name": "none",
          "description": "The ruby text cannot overhang any text adjacent to its base, only its own base."
        },
        {
          "name": "start",
          "description": "The ruby text can overhang the text that precedes it."
        }
      ],
      "relevance": 50,
      "description": "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "ruby-position",
      "browsers": [
        "E84",
        "FF38",
        "S7",
        "C84",
        "O70"
      ],
      "values": [
        {
          "name": "after",
          "description": "The ruby text appears after the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text."
        },
        {
          "name": "before",
          "description": "The ruby text appears before the base. This is the most common setting used in ideographic East Asian writing systems."
        },
        {
          "name": "inline"
        },
        {
          "name": "right",
          "description": "The ruby text appears on the right of the base. Unlike 'before' and 'after', this value is not relative to the text flow direction."
        }
      ],
      "syntax": "[ alternate || [ over | under ] ] | inter-character",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/ruby-position"
        }
      ],
      "description": "Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "ruby-span",
      "browsers": [
        "FF10"
      ],
      "values": [
        {
          "name": "attr(x)",
          "description": "The value of attribute 'x' is a string value. The string value is evaluated as a <number> to determine the number of ruby base elements to be spanned by the annotation element."
        },
        {
          "name": "none",
          "description": "No spanning. The computed value is '1'."
        }
      ],
      "relevance": 50,
      "description": "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "scrollbar-3dlight-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-3dlight-color"
        }
      ],
      "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-arrow-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-arrow-color"
        }
      ],
      "description": "Determines the color of the arrow elements of a scroll arrow.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-base-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-base-color"
        }
      ],
      "description": "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-darkshadow-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-darkshadow-color"
        }
      ],
      "description": "Determines the color of the gutter of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-face-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-face-color"
        }
      ],
      "description": "Determines the color of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-highlight-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-highlight-color"
        }
      ],
      "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-shadow-color",
      "browsers": [
        "IE5"
      ],
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-shadow-color"
        }
      ],
      "description": "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scrollbar-track-color",
      "browsers": [
        "IE6"
      ],
      "relevance": 50,
      "description": "Determines the color of the track element of a scroll bar.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "scroll-behavior",
      "browsers": [
        "E79",
        "FF36",
        "S15.4",
        "C61",
        "O48"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Scrolls in an instant fashion."
        },
        {
          "name": "smooth",
          "description": "Scrolls in a smooth fashion using a user-agent-defined timing function and time period."
        }
      ],
      "syntax": "auto | smooth",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-behavior"
        }
      ],
      "description": "Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "scroll-snap-coordinate",
      "browsers": [
        "FF39"
      ],
      "values": [
        {
          "name": "none",
          "description": "Specifies that this element does not contribute a snap point."
        }
      ],
      "status": "obsolete",
      "syntax": "none | <position>#",
      "relevance": 0,
      "description": "Defines the x and y coordinate within the element which will align with the nearest ancestor scroll container's snap-destination for the respective axis.",
      "restrictions": [
        "position",
        "length",
        "percentage",
        "enum"
      ]
    },
    {
      "name": "scroll-snap-destination",
      "browsers": [
        "FF39"
      ],
      "status": "obsolete",
      "syntax": "<position>",
      "relevance": 0,
      "description": "Define the x and y coordinate within the scroll container's visual viewport which element snap points will align with.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "scroll-snap-points-x",
      "browsers": [
        "FF39"
      ],
      "values": [
        {
          "name": "none",
          "description": "No snap points are defined by this scroll container."
        },
        {
          "name": "repeat()",
          "description": "Defines an interval at which snap points are defined, starting from the container's relevant start edge."
        }
      ],
      "status": "obsolete",
      "syntax": "none | repeat( <length-percentage> )",
      "relevance": 0,
      "description": "Defines the positioning of snap points along the x axis of the scroll container it is applied to.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "scroll-snap-points-y",
      "browsers": [
        "FF39"
      ],
      "values": [
        {
          "name": "none",
          "description": "No snap points are defined by this scroll container."
        },
        {
          "name": "repeat()",
          "description": "Defines an interval at which snap points are defined, starting from the container's relevant start edge."
        }
      ],
      "status": "obsolete",
      "syntax": "none | repeat( <length-percentage> )",
      "relevance": 0,
      "description": "Defines the positioning of snap points along the y axis of the scroll container it is applied to.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "scroll-snap-type",
      "browsers": [
        "E79",
        "FF99",
        "S11",
        "C69",
        "IE10",
        "O56"
      ],
      "values": [
        {
          "name": "none",
          "description": "The visual viewport of this scroll container must ignore snap points, if any, when scrolled."
        },
        {
          "name": "mandatory",
          "description": "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."
        },
        {
          "name": "proximity",
          "description": "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."
        }
      ],
      "syntax": "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
      "relevance": 54,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type"
        }
      ],
      "description": "Defines how strictly snap points are enforced on the scroll container.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "shape-image-threshold",
      "browsers": [
        "E79",
        "FF62",
        "S10.1",
        "C37",
        "O24"
      ],
      "syntax": "<alpha-value>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold"
        }
      ],
      "description": "Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "shape-margin",
      "browsers": [
        "E79",
        "FF62",
        "S10.1",
        "C37",
        "O24"
      ],
      "syntax": "<length-percentage>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/shape-margin"
        }
      ],
      "description": "Adds a margin to a 'shape-outside'. This defines a new shape that is the smallest contour that includes all the points that are the 'shape-margin' distance outward in the perpendicular direction from a point on the underlying shape.",
      "restrictions": [
        "url",
        "length",
        "percentage"
      ]
    },
    {
      "name": "shape-outside",
      "browsers": [
        "E79",
        "FF62",
        "S10.1",
        "C37",
        "O24"
      ],
      "values": [
        {
          "name": "margin-box",
          "description": "The background is painted within (clipped to) the margin box."
        },
        {
          "name": "none",
          "description": "The float area is unaffected."
        }
      ],
      "syntax": "none | [ <shape-box> || <basic-shape> ] | <image>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/shape-outside"
        }
      ],
      "description": "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
      "restrictions": [
        "image",
        "box",
        "shape",
        "enum"
      ]
    },
    {
      "name": "shape-rendering",
      "values": [
        {
          "name": "auto",
          "description": "Suppresses aural rendering."
        },
        {
          "name": "crispEdges",
          "description": "Emphasize the contrast between clean edges of artwork over rendering speed and geometric precision."
        },
        {
          "name": "geometricPrecision",
          "description": "Emphasize geometric precision over speed and crisp edges."
        },
        {
          "name": "optimizeSpeed",
          "description": "Emphasize rendering speed over geometric precision and crisp edges."
        }
      ],
      "relevance": 50,
      "description": "Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "size",
      "browsers": [
        "C",
        "O8"
      ],
      "atRule": "@page",
      "syntax": "<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]",
      "relevance": 53,
      "description": "The size CSS at-rule descriptor, used with the @page at-rule, defines the size and orientation of the box which is used to represent a page. Most of the time, this size corresponds to the target size of the printed page if applicable.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "src",
      "values": [
        {
          "name": "url()",
          "description": "Reference font by URL"
        },
        {
          "name": "format()",
          "description": "Optional hint describing the format of the font resource."
        },
        {
          "name": "local()",
          "description": "Format-specific string that identifies a locally available copy of a given font."
        }
      ],
      "atRule": "@font-face",
      "syntax": "[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#",
      "relevance": 86,
      "description": "@font-face descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.",
      "restrictions": [
        "enum",
        "url",
        "identifier"
      ]
    },
    {
      "name": "stop-color",
      "relevance": 50,
      "description": "Indicates what color to use at that gradient stop.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "stop-opacity",
      "relevance": 50,
      "description": "Defines the opacity of a given gradient stop.",
      "restrictions": [
        "number(0-1)"
      ]
    },
    {
      "name": "stroke",
      "values": [
        {
          "name": "url()",
          "description": "A URL reference to a paint server element, which is an element that defines a paint server: 'hatch', 'linearGradient', 'mesh', 'pattern', 'radialGradient' and 'solidcolor'."
        },
        {
          "name": "none",
          "description": "No paint is applied in this layer."
        }
      ],
      "relevance": 66,
      "description": "Paints along the outline of the given graphical element.",
      "restrictions": [
        "color",
        "enum",
        "url"
      ]
    },
    {
      "name": "stroke-dasharray",
      "values": [
        {
          "name": "none",
          "description": "Indicates that no dashing is used."
        }
      ],
      "relevance": 61,
      "description": "Controls the pattern of dashes and gaps used to stroke paths.",
      "restrictions": [
        "length",
        "percentage",
        "number",
        "enum"
      ]
    },
    {
      "name": "stroke-dashoffset",
      "relevance": 62,
      "description": "Specifies the distance into the dash pattern to start the dash.",
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "stroke-linecap",
      "values": [
        {
          "name": "butt",
          "description": "Indicates that the stroke for each subpath does not extend beyond its two endpoints."
        },
        {
          "name": "round",
          "description": "Indicates that at each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width."
        },
        {
          "name": "square",
          "description": "Indicates that at the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width."
        }
      ],
      "relevance": 53,
      "description": "Specifies the shape to be used at the end of open subpaths when they are stroked.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "stroke-linejoin",
      "values": [
        {
          "name": "bevel",
          "description": "Indicates that a bevelled corner is to be used to join path segments."
        },
        {
          "name": "miter",
          "description": "Indicates that a sharp corner is to be used to join path segments."
        },
        {
          "name": "round",
          "description": "Indicates that a round corner is to be used to join path segments."
        }
      ],
      "relevance": 51,
      "description": "Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "stroke-miterlimit",
      "relevance": 51,
      "description": "When two line segments meet at a sharp angle and miter joins have been specified for 'stroke-linejoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "stroke-opacity",
      "relevance": 52,
      "description": "Specifies the opacity of the painting operation used to stroke the current object.",
      "restrictions": [
        "number(0-1)"
      ]
    },
    {
      "name": "stroke-width",
      "relevance": 63,
      "description": "Specifies the width of the stroke on the current object.",
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "suffix",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "<symbol>",
      "relevance": 50,
      "description": "@counter-style descriptor. Specifies a <symbol> that is appended to the marker representation.",
      "restrictions": [
        "image",
        "string",
        "identifier"
      ]
    },
    {
      "name": "system",
      "browsers": [
        "FF33"
      ],
      "values": [
        {
          "name": "additive",
          "description": 'Represents "sign-value" numbering systems, which, rather than using reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together.'
        },
        {
          "name": "alphabetic",
          "description": 'Interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from "a", "b", "c", to "aa", "ab", "ac".'
        },
        {
          "name": "cyclic",
          "description": "Cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list."
        },
        {
          "name": "extends",
          "description": "Use the algorithm of another counter style, but alter other aspects."
        },
        {
          "name": "fixed",
          "description": "Runs through its list of counter symbols once, then falls back."
        },
        {
          "name": "numeric",
          "description": `interprets the list of counter symbols as digits to a "place-value" numbering system, similar to the default 'decimal' counter style.`
        },
        {
          "name": "symbolic",
          "description": "Cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list."
        }
      ],
      "atRule": "@counter-style",
      "syntax": "cyclic | numeric | alphabetic | symbolic | additive | [ fixed <integer>? ] | [ extends <counter-style-name> ]",
      "relevance": 50,
      "description": "@counter-style descriptor. Specifies which algorithm will be used to construct the counter's representation based on the counter value.",
      "restrictions": [
        "enum",
        "integer"
      ]
    },
    {
      "name": "symbols",
      "browsers": [
        "FF33"
      ],
      "atRule": "@counter-style",
      "syntax": "<symbol>+",
      "relevance": 50,
      "description": "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.",
      "restrictions": [
        "image",
        "string",
        "identifier"
      ]
    },
    {
      "name": "table-layout",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C14",
        "IE5",
        "O7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Use any automatic table layout algorithm."
        },
        {
          "name": "fixed",
          "description": "Use the fixed table layout algorithm."
        }
      ],
      "syntax": "auto | fixed",
      "relevance": 60,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/table-layout"
        }
      ],
      "description": "Controls the algorithm used to lay out the table cells, rows, and columns.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "tab-size",
      "browsers": [
        "E79",
        "FF91",
        "S7",
        "C21",
        "O15"
      ],
      "syntax": "<integer> | <length>",
      "relevance": 53,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/tab-size"
        }
      ],
      "description": "Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
      "restrictions": [
        "integer",
        "length"
      ]
    },
    {
      "name": "text-align",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "center",
          "description": "The inline contents are centered within the line box."
        },
        {
          "name": "end",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE3",
            "O3.5"
          ],
          "description": "The inline contents are aligned to the end edge of the line box."
        },
        {
          "name": "justify",
          "description": "The text is justified according to the method specified by the 'text-justify' property."
        },
        {
          "name": "left",
          "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
        },
        {
          "name": "right",
          "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
        },
        {
          "name": "start",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE3",
            "O3.5"
          ],
          "description": "The inline contents are aligned to the start edge of the line box."
        }
      ],
      "syntax": "start | end | left | right | center | justify | match-parent",
      "relevance": 93,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-align"
        }
      ],
      "description": "Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.",
      "restrictions": [
        "string"
      ]
    },
    {
      "name": "text-align-last",
      "browsers": [
        "E12",
        "FF49",
        "S16",
        "C47",
        "IE5.5",
        "O34"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Content on the affected line is aligned per 'text-align' unless 'text-align' is set to 'justify', in which case it is 'start-aligned'."
        },
        {
          "name": "center",
          "description": "The inline contents are centered within the line box."
        },
        {
          "name": "justify",
          "description": "The text is justified according to the method specified by the 'text-justify' property."
        },
        {
          "name": "left",
          "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
        },
        {
          "name": "right",
          "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
        }
      ],
      "syntax": "auto | start | end | left | right | center | justify",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-align-last"
        }
      ],
      "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-anchor",
      "values": [
        {
          "name": "end",
          "description": "The rendered characters are aligned such that the end of the resulting rendered text is at the initial current text position."
        },
        {
          "name": "middle",
          "description": "The rendered characters are aligned such that the geometric middle of the resulting rendered text is at the initial current text position."
        },
        {
          "name": "start",
          "description": "The rendered characters are aligned such that the start of the resulting rendered text is at the initial current text position."
        }
      ],
      "relevance": 50,
      "description": "Used to align (start-, middle- or end-alignment) a string of text relative to a given point.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-decoration",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [
        {
          "name": "dashed",
          "description": "Produces a dashed line style."
        },
        {
          "name": "dotted",
          "description": "Produces a dotted line."
        },
        {
          "name": "double",
          "description": "Produces a double line."
        },
        {
          "name": "line-through",
          "description": "Each line of text has a line through the middle."
        },
        {
          "name": "none",
          "description": "Produces no line."
        },
        {
          "name": "overline",
          "description": "Each line of text has a line above it."
        },
        {
          "name": "solid",
          "description": "Produces a solid line."
        },
        {
          "name": "underline",
          "description": "Each line of text is underlined."
        },
        {
          "name": "wavy",
          "description": "Produces a wavy line."
        }
      ],
      "syntax": "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration"
        }
      ],
      "description": "Decorations applied to font used for an element's text.",
      "restrictions": [
        "enum",
        "color"
      ]
    },
    {
      "name": "text-decoration-color",
      "browsers": [
        "E79",
        "FF36",
        "S12.1",
        "C57",
        "O44"
      ],
      "syntax": "<color>",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-color"
        }
      ],
      "description": "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "text-decoration-line",
      "browsers": [
        "E79",
        "FF36",
        "S12.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "line-through",
          "description": "Each line of text has a line through the middle."
        },
        {
          "name": "none",
          "description": "Neither produces nor inhibits text decoration."
        },
        {
          "name": "overline",
          "description": "Each line of text has a line above it."
        },
        {
          "name": "underline",
          "description": "Each line of text is underlined."
        }
      ],
      "syntax": "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
      "relevance": 57,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-line"
        }
      ],
      "description": "Specifies what line decorations, if any, are added to the element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-decoration-style",
      "browsers": [
        "E79",
        "FF36",
        "S12.1",
        "C57",
        "O44"
      ],
      "values": [
        {
          "name": "dashed",
          "description": "Produces a dashed line style."
        },
        {
          "name": "dotted",
          "description": "Produces a dotted line."
        },
        {
          "name": "double",
          "description": "Produces a double line."
        },
        {
          "name": "none",
          "description": "Produces no line."
        },
        {
          "name": "solid",
          "description": "Produces a solid line."
        },
        {
          "name": "wavy",
          "description": "Produces a wavy line."
        }
      ],
      "syntax": "solid | double | dotted | dashed | wavy",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-style"
        }
      ],
      "description": "Specifies the line style for underline, line-through and overline text decoration.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-indent",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "values": [],
      "syntax": "<length-percentage> && hanging? && each-line?",
      "relevance": 68,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-indent"
        }
      ],
      "description": "Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the 'hanging' keyword is specified, in which case it affects all lines except the first.",
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "text-justify",
      "browsers": [
        "E79",
        "FF55",
        "C32",
        "IE11",
        "O19"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."
        },
        {
          "name": "distribute",
          "description": "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."
        },
        {
          "name": "distribute-all-lines"
        },
        {
          "name": "inter-cluster",
          "description": "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai."
        },
        {
          "name": "inter-ideograph",
          "description": "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages."
        },
        {
          "name": "inter-word",
          "description": "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean."
        },
        {
          "name": "kashida",
          "description": "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation."
        },
        {
          "name": "newspaper"
        }
      ],
      "syntax": "auto | inter-character | inter-word | none",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-justify"
        }
      ],
      "description": "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-orientation",
      "browsers": [
        "E79",
        "FF41",
        "S14",
        "C48",
        "O35"
      ],
      "values": [
        {
          "name": "sideways",
          "browsers": [
            "E79",
            "FF41",
            "S14",
            "C48",
            "O35"
          ],
          "description": "This value is equivalent to 'sideways-right' in 'vertical-rl' writing mode and equivalent to 'sideways-left' in 'vertical-lr' writing mode."
        },
        {
          "name": "sideways-right",
          "browsers": [
            "E79",
            "FF41",
            "S14",
            "C48",
            "O35"
          ],
          "description": "In vertical writing modes, this causes text to be set as if in a horizontal layout, but rotated 90\xB0 clockwise."
        },
        {
          "name": "upright",
          "description": "In vertical writing modes, characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation."
        }
      ],
      "syntax": "mixed | upright | sideways",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-orientation"
        }
      ],
      "description": "Specifies the orientation of text within a line.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-overflow",
      "browsers": [
        "E12",
        "FF7",
        "S1.3",
        "C1",
        "IE6",
        "O11"
      ],
      "values": [
        {
          "name": "clip",
          "description": "Clip inline content that overflows. Characters may be only partially rendered."
        },
        {
          "name": "ellipsis",
          "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
        }
      ],
      "syntax": "[ clip | ellipsis | <string> ]{1,2}",
      "relevance": 81,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-overflow"
        }
      ],
      "description": "Text can overflow for example when it is prevented from wrapping.",
      "restrictions": [
        "enum",
        "string"
      ]
    },
    {
      "name": "text-rendering",
      "browsers": [
        "E79",
        "FF1",
        "S5",
        "C4",
        "O15"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "geometricPrecision",
          "description": "Indicates that the user agent shall emphasize geometric precision over legibility and rendering speed."
        },
        {
          "name": "optimizeLegibility",
          "description": "Indicates that the user agent shall emphasize legibility over rendering speed and geometric precision."
        },
        {
          "name": "optimizeSpeed",
          "description": "Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision."
        }
      ],
      "syntax": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
      "relevance": 69,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-rendering"
        }
      ],
      "description": "The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The 'text-rendering' property provides these hints.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-shadow",
      "browsers": [
        "E12",
        "FF3.5",
        "S1.1",
        "C2",
        "IE10",
        "O9.5"
      ],
      "values": [
        {
          "name": "none",
          "description": "No shadow."
        }
      ],
      "syntax": "none | <shadow-t>#",
      "relevance": 72,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-shadow"
        }
      ],
      "description": "Enables shadow effects to be applied to the text of the element.",
      "restrictions": [
        "length",
        "color"
      ]
    },
    {
      "name": "text-transform",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O7"
      ],
      "values": [
        {
          "name": "capitalize",
          "description": "Puts the first typographic letter unit of each word in titlecase."
        },
        {
          "name": "lowercase",
          "description": "Puts all letters in lowercase."
        },
        {
          "name": "none",
          "description": "No effects."
        },
        {
          "name": "uppercase",
          "description": "Puts all letters in uppercase."
        }
      ],
      "syntax": "none | capitalize | uppercase | lowercase | full-width | full-size-kana",
      "relevance": 85,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-transform"
        }
      ],
      "description": "Controls capitalization effects of an element's text.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "text-underline-position",
      "browsers": [
        "E12",
        "FF74",
        "S12.1",
        "C33",
        "IE6",
        "O20"
      ],
      "values": [
        {
          "name": "above"
        },
        {
          "name": "auto",
          "description": "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."
        },
        {
          "name": "below",
          "description": "The underline is aligned with the under edge of the element's content box."
        }
      ],
      "syntax": "auto | from-font | [ under || [ left | right ] ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-underline-position"
        }
      ],
      "description": "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "top",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5",
        "O6"
      ],
      "values": [
        {
          "name": "auto",
          "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
        }
      ],
      "syntax": "<length> | <percentage> | auto",
      "relevance": 95,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/top"
        }
      ],
      "description": "Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's 'containing block'.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "touch-action",
      "browsers": [
        "E12",
        "FF52",
        "S13",
        "C36",
        "IE11",
        "O23"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The user agent may determine any permitted touch behaviors for touches that begin on the element."
        },
        {
          "name": "cross-slide-x",
          "browsers": [
            "E12",
            "FF52",
            "S13",
            "C36",
            "IE11",
            "O23"
          ]
        },
        {
          "name": "cross-slide-y",
          "browsers": [
            "E12",
            "FF52",
            "S13",
            "C36",
            "IE11",
            "O23"
          ]
        },
        {
          "name": "double-tap-zoom",
          "browsers": [
            "E12",
            "FF52",
            "S13",
            "C36",
            "IE11",
            "O23"
          ]
        },
        {
          "name": "manipulation",
          "description": "The user agent may consider touches that begin on the element only for the purposes of scrolling and continuous zooming."
        },
        {
          "name": "none",
          "description": "Touches that begin on the element must not trigger default touch behaviors."
        },
        {
          "name": "pan-x",
          "description": "The user agent may consider touches that begin on the element only for the purposes of horizontally scrolling the element's nearest ancestor with horizontally scrollable content."
        },
        {
          "name": "pan-y",
          "description": "The user agent may consider touches that begin on the element only for the purposes of vertically scrolling the element's nearest ancestor with vertically scrollable content."
        },
        {
          "name": "pinch-zoom",
          "browsers": [
            "E12",
            "FF52",
            "S13",
            "C36",
            "IE11",
            "O23"
          ]
        }
      ],
      "syntax": "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
      "relevance": 69,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/touch-action"
        }
      ],
      "description": "Determines whether touch input may trigger default behavior supplied by user agent.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "transform",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C36",
        "IE10",
        "O23"
      ],
      "values": [
        {
          "name": "matrix()",
          "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
        },
        {
          "name": "matrix3d()",
          "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
        },
        {
          "name": "none"
        },
        {
          "name": "perspective()",
          "description": "Specifies a perspective projection matrix."
        },
        {
          "name": "rotate()",
          "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
        },
        {
          "name": "rotate3d()",
          "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
        },
        {
          "name": "rotateX('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the X axis."
        },
        {
          "name": "rotateY('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Y axis."
        },
        {
          "name": "rotateZ('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Z axis."
        },
        {
          "name": "scale()",
          "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
        },
        {
          "name": "scale3d()",
          "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
        },
        {
          "name": "scaleX()",
          "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
        },
        {
          "name": "scaleY()",
          "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
        },
        {
          "name": "scaleZ()",
          "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
        },
        {
          "name": "skew()",
          "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
        },
        {
          "name": "skewX()",
          "description": "Specifies a skew transformation along the X axis by the given angle."
        },
        {
          "name": "skewY()",
          "description": "Specifies a skew transformation along the Y axis by the given angle."
        },
        {
          "name": "translate()",
          "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
        },
        {
          "name": "translate3d()",
          "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
        },
        {
          "name": "translateX()",
          "description": "Specifies a translation by the given amount in the X direction."
        },
        {
          "name": "translateY()",
          "description": "Specifies a translation by the given amount in the Y direction."
        },
        {
          "name": "translateZ()",
          "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
        }
      ],
      "syntax": "none | <transform-list>",
      "relevance": 90,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transform"
        }
      ],
      "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "transform-origin",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C36",
        "IE10",
        "O23"
      ],
      "syntax": "[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?",
      "relevance": 76,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transform-origin"
        }
      ],
      "description": "Establishes the origin of transformation for an element.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "transform-style",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C36",
        "O23"
      ],
      "values": [
        {
          "name": "flat",
          "description": "All children of this element are rendered flattened into the 2D plane of the element."
        },
        {
          "name": "preserve-3d",
          "browsers": [
            "E12",
            "FF16",
            "S9",
            "C36",
            "O23"
          ],
          "description": "Flattening is not performed, so children maintain their position in 3D space."
        }
      ],
      "syntax": "flat | preserve-3d",
      "relevance": 55,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transform-style"
        }
      ],
      "description": "Defines how nested elements are rendered in 3D space.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "transition",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C26",
        "IE10",
        "O12.1"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "syntax": "<single-transition>#",
      "relevance": 88,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transition"
        }
      ],
      "description": "Shorthand property combines four of the transition properties into a single property.",
      "restrictions": [
        "time",
        "property",
        "timing-function",
        "enum"
      ]
    },
    {
      "name": "transition-delay",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C26",
        "IE10",
        "O12.1"
      ],
      "syntax": "<time>#",
      "relevance": 63,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transition-delay"
        }
      ],
      "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "transition-duration",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C26",
        "IE10",
        "O12.1"
      ],
      "syntax": "<time>#",
      "relevance": 67,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transition-duration"
        }
      ],
      "description": "Specifies how long the transition from the old value to the new value should take.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "transition-property",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C26",
        "IE10",
        "O12.1"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "syntax": "none | <single-transition-property>#",
      "relevance": 67,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transition-property"
        }
      ],
      "description": "Specifies the name of the CSS property to which the transition is applied.",
      "restrictions": [
        "property"
      ]
    },
    {
      "name": "transition-timing-function",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C26",
        "IE10",
        "O12.1"
      ],
      "syntax": "<easing-function>#",
      "relevance": 64,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transition-timing-function"
        }
      ],
      "description": "Describes how the intermediate values used during a transition will be calculated.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "unicode-bidi",
      "browsers": [
        "E12",
        "FF1",
        "S1.3",
        "C2",
        "IE5.5",
        "O9.2"
      ],
      "values": [
        {
          "name": "bidi-override",
          "description": "Inside the element, reordering is strictly in sequence according to the 'direction' property; the implicit part of the bidirectional algorithm is ignored."
        },
        {
          "name": "embed",
          "description": "If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the 'direction' property."
        },
        {
          "name": "isolate",
          "browsers": [
            "E12",
            "FF1",
            "S1.3",
            "C2",
            "IE5.5",
            "O9.2"
          ],
          "description": "The contents of the element are considered to be inside a separate, independent paragraph."
        },
        {
          "name": "isolate-override",
          "browsers": [
            "E12",
            "FF1",
            "S1.3",
            "C2",
            "IE5.5",
            "O9.2"
          ],
          "description": "This combines the isolation behavior of 'isolate' with the directional override behavior of 'bidi-override'"
        },
        {
          "name": "normal",
          "description": "The element does not open an additional level of embedding with respect to the bidirectional algorithm. For inline-level elements, implicit reordering works across element boundaries."
        },
        {
          "name": "plaintext",
          "browsers": [
            "E12",
            "FF1",
            "S1.3",
            "C2",
            "IE5.5",
            "O9.2"
          ],
          "description": "For the purposes of the Unicode bidirectional algorithm, the base directionality of each bidi paragraph for which the element forms the containing block is determined not by the element's computed 'direction'."
        }
      ],
      "syntax": "normal | embed | isolate | bidi-override | isolate-override | plaintext",
      "relevance": 56,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/unicode-bidi"
        }
      ],
      "description": "The level of embedding with respect to the bidirectional algorithm.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "unicode-range",
      "values": [
        {
          "name": "U+26",
          "description": "Ampersand."
        },
        {
          "name": "U+20-24F, U+2B0-2FF, U+370-4FF, U+1E00-1EFF, U+2000-20CF, U+2100-23FF, U+2500-26FF, U+E000-F8FF, U+FB00-FB4F",
          "description": "WGL4 character set (Pan-European)."
        },
        {
          "name": "U+20-17F, U+2B0-2FF, U+2000-206F, U+20A0-20CF, U+2100-21FF, U+2600-26FF",
          "description": "The Multilingual European Subset No. 1. Latin. Covers ~44 languages."
        },
        {
          "name": "U+20-2FF, U+370-4FF, U+1E00-20CF, U+2100-23FF, U+2500-26FF, U+FB00-FB4F, U+FFF0-FFFD",
          "description": "The Multilingual European Subset No. 2. Latin, Greek, and Cyrillic. Covers ~128 language."
        },
        {
          "name": "U+20-4FF, U+530-58F, U+10D0-10FF, U+1E00-23FF, U+2440-245F, U+2500-26FF, U+FB00-FB4F, U+FE20-FE2F, U+FFF0-FFFD",
          "description": "The Multilingual European Subset No. 3. Covers all characters belonging to European scripts."
        },
        {
          "name": "U+00-7F",
          "description": "Basic Latin (ASCII)."
        },
        {
          "name": "U+80-FF",
          "description": "Latin-1 Supplement. Accented characters for Western European languages, common punctuation characters, multiplication and division signs."
        },
        {
          "name": "U+100-17F",
          "description": "Latin Extended-A. Accented characters for for Czech, Dutch, Polish, and Turkish."
        },
        {
          "name": "U+180-24F",
          "description": "Latin Extended-B. Croatian, Slovenian, Romanian, Non-European and historic latin, Khoisan, Pinyin, Livonian, Sinology."
        },
        {
          "name": "U+1E00-1EFF",
          "description": "Latin Extended Additional. Vietnamese, German captial sharp s, Medievalist, Latin general use."
        },
        {
          "name": "U+250-2AF",
          "description": "International Phonetic Alphabet Extensions."
        },
        {
          "name": "U+370-3FF",
          "description": "Greek and Coptic."
        },
        {
          "name": "U+1F00-1FFF",
          "description": "Greek Extended. Accented characters for polytonic Greek."
        },
        {
          "name": "U+400-4FF",
          "description": "Cyrillic."
        },
        {
          "name": "U+500-52F",
          "description": "Cyrillic Supplement. Extra letters for Komi, Khanty, Chukchi, Mordvin, Kurdish, Aleut, Chuvash, Abkhaz, Azerbaijani, and Orok."
        },
        {
          "name": "U+00-52F, U+1E00-1FFF, U+2200-22FF",
          "description": "Latin, Greek, Cyrillic, some punctuation and symbols."
        },
        {
          "name": "U+530-58F",
          "description": "Armenian."
        },
        {
          "name": "U+590-5FF",
          "description": "Hebrew."
        },
        {
          "name": "U+600-6FF",
          "description": "Arabic."
        },
        {
          "name": "U+750-77F",
          "description": "Arabic Supplement. Additional letters for African languages, Khowar, Torwali, Burushaski, and early Persian."
        },
        {
          "name": "U+8A0-8FF",
          "description": "Arabic Extended-A. Additional letters for African languages, European and Central Asian languages, Rohingya, Tamazight, Arwi, and Koranic annotation signs."
        },
        {
          "name": "U+700-74F",
          "description": "Syriac."
        },
        {
          "name": "U+900-97F",
          "description": "Devanagari."
        },
        {
          "name": "U+980-9FF",
          "description": "Bengali."
        },
        {
          "name": "U+A00-A7F",
          "description": "Gurmukhi."
        },
        {
          "name": "U+A80-AFF",
          "description": "Gujarati."
        },
        {
          "name": "U+B00-B7F",
          "description": "Oriya."
        },
        {
          "name": "U+B80-BFF",
          "description": "Tamil."
        },
        {
          "name": "U+C00-C7F",
          "description": "Telugu."
        },
        {
          "name": "U+C80-CFF",
          "description": "Kannada."
        },
        {
          "name": "U+D00-D7F",
          "description": "Malayalam."
        },
        {
          "name": "U+D80-DFF",
          "description": "Sinhala."
        },
        {
          "name": "U+118A0-118FF",
          "description": "Warang Citi."
        },
        {
          "name": "U+E00-E7F",
          "description": "Thai."
        },
        {
          "name": "U+1A20-1AAF",
          "description": "Tai Tham."
        },
        {
          "name": "U+AA80-AADF",
          "description": "Tai Viet."
        },
        {
          "name": "U+E80-EFF",
          "description": "Lao."
        },
        {
          "name": "U+F00-FFF",
          "description": "Tibetan."
        },
        {
          "name": "U+1000-109F",
          "description": "Myanmar (Burmese)."
        },
        {
          "name": "U+10A0-10FF",
          "description": "Georgian."
        },
        {
          "name": "U+1200-137F",
          "description": "Ethiopic."
        },
        {
          "name": "U+1380-139F",
          "description": "Ethiopic Supplement. Extra Syllables for Sebatbeit, and Tonal marks"
        },
        {
          "name": "U+2D80-2DDF",
          "description": "Ethiopic Extended. Extra Syllables for Me'en, Blin, and Sebatbeit."
        },
        {
          "name": "U+AB00-AB2F",
          "description": "Ethiopic Extended-A. Extra characters for Gamo-Gofa-Dawro, Basketo, and Gumuz."
        },
        {
          "name": "U+1780-17FF",
          "description": "Khmer."
        },
        {
          "name": "U+1800-18AF",
          "description": "Mongolian."
        },
        {
          "name": "U+1B80-1BBF",
          "description": "Sundanese."
        },
        {
          "name": "U+1CC0-1CCF",
          "description": "Sundanese Supplement. Punctuation."
        },
        {
          "name": "U+4E00-9FD5",
          "description": "CJK (Chinese, Japanese, Korean) Unified Ideographs. Most common ideographs for modern Chinese and Japanese."
        },
        {
          "name": "U+3400-4DB5",
          "description": "CJK Unified Ideographs Extension A. Rare ideographs."
        },
        {
          "name": "U+2F00-2FDF",
          "description": "Kangxi Radicals."
        },
        {
          "name": "U+2E80-2EFF",
          "description": "CJK Radicals Supplement. Alternative forms of Kangxi Radicals."
        },
        {
          "name": "U+1100-11FF",
          "description": "Hangul Jamo."
        },
        {
          "name": "U+AC00-D7AF",
          "description": "Hangul Syllables."
        },
        {
          "name": "U+3040-309F",
          "description": "Hiragana."
        },
        {
          "name": "U+30A0-30FF",
          "description": "Katakana."
        },
        {
          "name": "U+A5, U+4E00-9FFF, U+30??, U+FF00-FF9F",
          "description": "Japanese Kanji, Hiragana and Katakana characters plus Yen/Yuan symbol."
        },
        {
          "name": "U+A4D0-A4FF",
          "description": "Lisu."
        },
        {
          "name": "U+A000-A48F",
          "description": "Yi Syllables."
        },
        {
          "name": "U+A490-A4CF",
          "description": "Yi Radicals."
        },
        {
          "name": "U+2000-206F",
          "description": "General Punctuation."
        },
        {
          "name": "U+3000-303F",
          "description": "CJK Symbols and Punctuation."
        },
        {
          "name": "U+2070-209F",
          "description": "Superscripts and Subscripts."
        },
        {
          "name": "U+20A0-20CF",
          "description": "Currency Symbols."
        },
        {
          "name": "U+2100-214F",
          "description": "Letterlike Symbols."
        },
        {
          "name": "U+2150-218F",
          "description": "Number Forms."
        },
        {
          "name": "U+2190-21FF",
          "description": "Arrows."
        },
        {
          "name": "U+2200-22FF",
          "description": "Mathematical Operators."
        },
        {
          "name": "U+2300-23FF",
          "description": "Miscellaneous Technical."
        },
        {
          "name": "U+E000-F8FF",
          "description": "Private Use Area."
        },
        {
          "name": "U+FB00-FB4F",
          "description": "Alphabetic Presentation Forms. Ligatures for latin, Armenian, and Hebrew."
        },
        {
          "name": "U+FB50-FDFF",
          "description": "Arabic Presentation Forms-A. Contextual forms / ligatures for Persian, Urdu, Sindhi, Central Asian languages, etc, Arabic pedagogical symbols, word ligatures."
        },
        {
          "name": "U+1F600-1F64F",
          "description": "Emoji: Emoticons."
        },
        {
          "name": "U+2600-26FF",
          "description": "Emoji: Miscellaneous Symbols."
        },
        {
          "name": "U+1F300-1F5FF",
          "description": "Emoji: Miscellaneous Symbols and Pictographs."
        },
        {
          "name": "U+1F900-1F9FF",
          "description": "Emoji: Supplemental Symbols and Pictographs."
        },
        {
          "name": "U+1F680-1F6FF",
          "description": "Emoji: Transport and Map Symbols."
        }
      ],
      "atRule": "@font-face",
      "syntax": "<unicode-range>#",
      "relevance": 72,
      "description": "@font-face descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.",
      "restrictions": [
        "unicode-range"
      ]
    },
    {
      "name": "user-select",
      "browsers": [
        "E79",
        "FF69",
        "S3",
        "C54",
        "IE10",
        "O41"
      ],
      "values": [
        {
          "name": "all",
          "description": "The content of the element must be selected atomically"
        },
        {
          "name": "auto"
        },
        {
          "name": "contain",
          "description": "UAs must not allow a selection which is started in this element to be extended outside of this element."
        },
        {
          "name": "none",
          "description": "The UA must not allow selections to be started in this element."
        },
        {
          "name": "text",
          "description": "The element imposes no constraint on the selection."
        }
      ],
      "syntax": "auto | text | none | contain | all",
      "relevance": 82,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/user-select"
        }
      ],
      "description": "Controls the appearance of selection.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "vertical-align",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O4"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Align the dominant baseline of the parent box with the equivalent, or heuristically reconstructed, baseline of the element inline box."
        },
        {
          "name": "baseline",
          "description": "Align the 'alphabetic' baseline of the element with the 'alphabetic' baseline of the parent element."
        },
        {
          "name": "bottom",
          "description": "Align the after edge of the extended inline box with the after-edge of the line box."
        },
        {
          "name": "middle",
          "description": "Align the 'middle' baseline of the inline element with the middle baseline of the parent."
        },
        {
          "name": "sub",
          "description": "Lower the baseline of the box to the proper position for subscripts of the parent's box. (This value has no effect on the font size of the element's text.)"
        },
        {
          "name": "super",
          "description": "Raise the baseline of the box to the proper position for superscripts of the parent's box. (This value has no effect on the font size of the element's text.)"
        },
        {
          "name": "text-bottom",
          "description": "Align the bottom of the box with the after-edge of the parent element's font."
        },
        {
          "name": "text-top",
          "description": "Align the top of the box with the before-edge of the parent element's font."
        },
        {
          "name": "top",
          "description": "Align the before edge of the extended inline box with the before-edge of the line box."
        },
        {
          "name": "-webkit-baseline-middle",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O4"
          ]
        }
      ],
      "syntax": "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
      "relevance": 91,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/vertical-align"
        }
      ],
      "description": "Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.",
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "visibility",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O4"
      ],
      "values": [
        {
          "name": "collapse",
          "description": "Table-specific. If used on elements other than rows, row groups, columns, or column groups, 'collapse' has the same meaning as 'hidden'."
        },
        {
          "name": "hidden",
          "description": "The generated box is invisible (fully transparent, nothing is drawn), but still affects layout."
        },
        {
          "name": "visible",
          "description": "The generated box is visible."
        }
      ],
      "syntax": "visible | hidden | collapse",
      "relevance": 87,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/visibility"
        }
      ],
      "description": "Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the 'display' property to 'none' to suppress box generation altogether).",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-animation",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        },
        {
          "name": "none",
          "description": "No animation is performed"
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property combines six of the animation properties into a single property.",
      "restrictions": [
        "time",
        "enum",
        "timing-function",
        "identifier",
        "number"
      ]
    },
    {
      "name": "-webkit-animation-delay",
      "browsers": [
        "C",
        "S5"
      ],
      "relevance": 50,
      "description": "Defines when the animation will start.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-webkit-animation-direction",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "alternate",
          "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
        },
        {
          "name": "alternate-reverse",
          "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
        },
        {
          "name": "normal",
          "description": "Normal playback."
        },
        {
          "name": "reverse",
          "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
        }
      ],
      "relevance": 50,
      "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-animation-duration",
      "browsers": [
        "C",
        "S5"
      ],
      "relevance": 50,
      "description": "Defines the length of time that an animation takes to complete one cycle.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-webkit-animation-fill-mode",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "backwards",
          "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
        },
        {
          "name": "both",
          "description": "Both forwards and backwards fill modes are applied."
        },
        {
          "name": "forwards",
          "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
        },
        {
          "name": "none",
          "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
        }
      ],
      "relevance": 50,
      "description": "Defines what values are applied by the animation outside the time it is executing.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-animation-iteration-count",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "infinite",
          "description": "Causes the animation to repeat forever."
        }
      ],
      "relevance": 50,
      "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
      "restrictions": [
        "number",
        "enum"
      ]
    },
    {
      "name": "-webkit-animation-name",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "none",
          "description": "No animation is performed"
        }
      ],
      "relevance": 50,
      "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
      "restrictions": [
        "identifier",
        "enum"
      ]
    },
    {
      "name": "-webkit-animation-play-state",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "paused",
          "description": "A running animation will be paused."
        },
        {
          "name": "running",
          "description": "Resume playback of a paused animation."
        }
      ],
      "relevance": 50,
      "description": "Defines whether the animation is running or paused.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-animation-timing-function",
      "browsers": [
        "C",
        "S5"
      ],
      "relevance": 50,
      "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "-webkit-appearance",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "button"
        },
        {
          "name": "button-bevel"
        },
        {
          "name": "caps-lock-indicator"
        },
        {
          "name": "caret"
        },
        {
          "name": "checkbox"
        },
        {
          "name": "default-button"
        },
        {
          "name": "listbox"
        },
        {
          "name": "listitem"
        },
        {
          "name": "media-fullscreen-button"
        },
        {
          "name": "media-mute-button"
        },
        {
          "name": "media-play-button"
        },
        {
          "name": "media-seek-back-button"
        },
        {
          "name": "media-seek-forward-button"
        },
        {
          "name": "media-slider"
        },
        {
          "name": "media-sliderthumb"
        },
        {
          "name": "menulist"
        },
        {
          "name": "menulist-button"
        },
        {
          "name": "menulist-text"
        },
        {
          "name": "menulist-textfield"
        },
        {
          "name": "none"
        },
        {
          "name": "push-button"
        },
        {
          "name": "radio"
        },
        {
          "name": "scrollbarbutton-down"
        },
        {
          "name": "scrollbarbutton-left"
        },
        {
          "name": "scrollbarbutton-right"
        },
        {
          "name": "scrollbarbutton-up"
        },
        {
          "name": "scrollbargripper-horizontal"
        },
        {
          "name": "scrollbargripper-vertical"
        },
        {
          "name": "scrollbarthumb-horizontal"
        },
        {
          "name": "scrollbarthumb-vertical"
        },
        {
          "name": "scrollbartrack-horizontal"
        },
        {
          "name": "scrollbartrack-vertical"
        },
        {
          "name": "searchfield"
        },
        {
          "name": "searchfield-cancel-button"
        },
        {
          "name": "searchfield-decoration"
        },
        {
          "name": "searchfield-results-button"
        },
        {
          "name": "searchfield-results-decoration"
        },
        {
          "name": "slider-horizontal"
        },
        {
          "name": "sliderthumb-horizontal"
        },
        {
          "name": "sliderthumb-vertical"
        },
        {
          "name": "slider-vertical"
        },
        {
          "name": "square-button"
        },
        {
          "name": "textarea"
        },
        {
          "name": "textfield"
        }
      ],
      "status": "nonstandard",
      "syntax": "none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button",
      "relevance": 0,
      "description": "Changes the appearance of buttons and other controls to resemble native controls.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-backdrop-filter",
      "browsers": [
        "S9"
      ],
      "values": [
        {
          "name": "none",
          "description": "No filter effects are applied."
        },
        {
          "name": "blur()",
          "description": "Applies a Gaussian blur to the input image."
        },
        {
          "name": "brightness()",
          "description": "Applies a linear multiplier to input image, making it appear more or less bright."
        },
        {
          "name": "contrast()",
          "description": "Adjusts the contrast of the input."
        },
        {
          "name": "drop-shadow()",
          "description": "Applies a drop shadow effect to the input image."
        },
        {
          "name": "grayscale()",
          "description": "Converts the input image to grayscale."
        },
        {
          "name": "hue-rotate()",
          "description": "Applies a hue rotation on the input image. "
        },
        {
          "name": "invert()",
          "description": "Inverts the samples in the input image."
        },
        {
          "name": "opacity()",
          "description": "Applies transparency to the samples in the input image."
        },
        {
          "name": "saturate()",
          "description": "Saturates the input image."
        },
        {
          "name": "sepia()",
          "description": "Converts the input image to sepia."
        },
        {
          "name": "url()",
          "description": "A filter reference to a <filter> element."
        }
      ],
      "relevance": 50,
      "description": "Applies a filter effect where the first filter in the list takes the element's background image as the input image.",
      "restrictions": [
        "enum",
        "url"
      ]
    },
    {
      "name": "-webkit-backface-visibility",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "hidden"
        },
        {
          "name": "visible"
        }
      ],
      "relevance": 50,
      "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-background-clip",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Determines the background painting area.",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "-webkit-background-composite",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "border"
        },
        {
          "name": "padding"
        }
      ],
      "relevance": 50,
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-background-origin",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "-webkit-border-image",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
        },
        {
          "name": "fill",
          "description": "Causes the middle part of the border-image to be preserved."
        },
        {
          "name": "none"
        },
        {
          "name": "repeat",
          "description": "The image is tiled (repeated) to fill the area."
        },
        {
          "name": "round",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
        },
        {
          "name": "space",
          "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
        },
        {
          "name": "stretch",
          "description": "The image is stretched to fill the area."
        },
        {
          "name": "url()"
        }
      ],
      "relevance": 50,
      "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "percentage",
        "number",
        "url",
        "enum"
      ]
    },
    {
      "name": "-webkit-box-align",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "baseline",
          "description": "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."
        },
        {
          "name": "center",
          "description": "Any extra space is divided evenly, with half placed above the child and the other half placed after the child."
        },
        {
          "name": "end",
          "description": "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."
        },
        {
          "name": "start",
          "description": "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."
        },
        {
          "name": "stretch",
          "description": "The height of each child is adjusted to that of the containing block."
        }
      ],
      "relevance": 50,
      "description": "Specifies the alignment of nested elements within an outer flexible box element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-box-direction",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "normal",
          "description": "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."
        },
        {
          "name": "reverse",
          "description": "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."
        }
      ],
      "relevance": 50,
      "description": "In webkit applications, -webkit-box-direction specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-box-flex",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Specifies an element's flexibility.",
      "restrictions": [
        "number"
      ]
    },
    {
      "name": "-webkit-box-flex-group",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-webkit-box-ordinal-group",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-webkit-box-orient",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "block-axis",
          "description": "Elements are oriented along the box's axis."
        },
        {
          "name": "horizontal",
          "description": "The box displays its children from left to right in a horizontal line."
        },
        {
          "name": "inline-axis",
          "description": "Elements are oriented vertically."
        },
        {
          "name": "vertical",
          "description": "The box displays its children from stacked from top to bottom vertically."
        }
      ],
      "relevance": 50,
      "description": "In webkit applications, -webkit-box-orient specifies whether a box lays out its contents horizontally or vertically.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-box-pack",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "center",
          "description": "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."
        },
        {
          "name": "end",
          "description": "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."
        },
        {
          "name": "justify",
          "description": "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."
        },
        {
          "name": "start",
          "description": "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."
        }
      ],
      "relevance": 50,
      "description": "Specifies alignment of child elements within the current element in the direction of orientation.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-box-reflect",
      "browsers": [
        "E79",
        "S4",
        "C4",
        "O15"
      ],
      "values": [
        {
          "name": "above",
          "description": "The reflection appears above the border box."
        },
        {
          "name": "below",
          "description": "The reflection appears below the border box."
        },
        {
          "name": "left",
          "description": "The reflection appears to the left of the border box."
        },
        {
          "name": "right",
          "description": "The reflection appears to the right of the border box."
        }
      ],
      "status": "nonstandard",
      "syntax": "[ above | below | right | left ]? <length>? <image>?",
      "relevance": 0,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-box-reflect"
        }
      ],
      "description": "Defines a reflection of a border box."
    },
    {
      "name": "-webkit-box-sizing",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "border-box",
          "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
        },
        {
          "name": "content-box",
          "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
        }
      ],
      "relevance": 50,
      "description": "Box Model addition in CSS3.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-break-after",
      "browsers": [
        "S7"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break before/after the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page/column break before/after the generated box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break before/after the generated box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break before/after the generated box."
        },
        {
          "name": "avoid-region"
        },
        {
          "name": "column",
          "description": "Always force a column break before/after the generated box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "page",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "region"
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior before the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-break-before",
      "browsers": [
        "S7"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break before/after the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page/column break before/after the generated box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break before/after the generated box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break before/after the generated box."
        },
        {
          "name": "avoid-region"
        },
        {
          "name": "column",
          "description": "Always force a column break before/after the generated box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "page",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "region"
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior before the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-break-inside",
      "browsers": [
        "S7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break inside the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page/column break inside the generated box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break inside the generated box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break inside the generated box."
        },
        {
          "name": "avoid-region"
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior inside the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-column-break-after",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break before/after the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page/column break before/after the generated box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break before/after the generated box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break before/after the generated box."
        },
        {
          "name": "avoid-region"
        },
        {
          "name": "column",
          "description": "Always force a column break before/after the generated box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "page",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "region"
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior before the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-column-break-before",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "always",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break before/after the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page/column break before/after the generated box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break before/after the generated box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break before/after the generated box."
        },
        {
          "name": "avoid-region"
        },
        {
          "name": "column",
          "description": "Always force a column break before/after the generated box."
        },
        {
          "name": "left",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
        },
        {
          "name": "page",
          "description": "Always force a page break before/after the generated box."
        },
        {
          "name": "region"
        },
        {
          "name": "right",
          "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior before the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-column-break-inside",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Neither force nor forbid a page/column break inside the generated box."
        },
        {
          "name": "avoid",
          "description": "Avoid a page/column break inside the generated box."
        },
        {
          "name": "avoid-column",
          "description": "Avoid a column break inside the generated box."
        },
        {
          "name": "avoid-page",
          "description": "Avoid a page break inside the generated box."
        },
        {
          "name": "avoid-region"
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior inside the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-column-count",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Determines the number of columns by the 'column-width' property and the element width."
        }
      ],
      "relevance": 50,
      "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "-webkit-column-gap",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "normal",
          "description": "User agent specific and typically equivalent to 1em."
        }
      ],
      "relevance": 50,
      "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-webkit-column-rule",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "This property is a shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
      "restrictions": [
        "length",
        "line-width",
        "line-style",
        "color"
      ]
    },
    {
      "name": "-webkit-column-rule-color",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Sets the color of the column rule",
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-webkit-column-rule-style",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Sets the style of the rule between columns of an element.",
      "restrictions": [
        "line-style"
      ]
    },
    {
      "name": "-webkit-column-rule-width",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "description": "Sets the width of the rule between columns. Negative values are not allowed.",
      "restrictions": [
        "length",
        "line-width"
      ]
    },
    {
      "name": "-webkit-columns",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        }
      ],
      "relevance": 50,
      "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
      "restrictions": [
        "length",
        "integer"
      ]
    },
    {
      "name": "-webkit-column-span",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "all",
          "description": "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."
        },
        {
          "name": "none",
          "description": "The element does not span multiple columns."
        }
      ],
      "relevance": 50,
      "description": "Describes the page/column break behavior after the generated box.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-column-width",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        }
      ],
      "relevance": 50,
      "description": "This property describes the width of columns in multicol elements.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-webkit-filter",
      "browsers": [
        "C18",
        "O15",
        "S6"
      ],
      "values": [
        {
          "name": "none",
          "description": "No filter effects are applied."
        },
        {
          "name": "blur()",
          "description": "Applies a Gaussian blur to the input image."
        },
        {
          "name": "brightness()",
          "description": "Applies a linear multiplier to input image, making it appear more or less bright."
        },
        {
          "name": "contrast()",
          "description": "Adjusts the contrast of the input."
        },
        {
          "name": "drop-shadow()",
          "description": "Applies a drop shadow effect to the input image."
        },
        {
          "name": "grayscale()",
          "description": "Converts the input image to grayscale."
        },
        {
          "name": "hue-rotate()",
          "description": "Applies a hue rotation on the input image. "
        },
        {
          "name": "invert()",
          "description": "Inverts the samples in the input image."
        },
        {
          "name": "opacity()",
          "description": "Applies transparency to the samples in the input image."
        },
        {
          "name": "saturate()",
          "description": "Saturates the input image."
        },
        {
          "name": "sepia()",
          "description": "Converts the input image to sepia."
        },
        {
          "name": "url()",
          "description": "A filter reference to a <filter> element."
        }
      ],
      "relevance": 50,
      "description": "Processes an element's rendering before it is displayed in the document, by applying one or more filter effects.",
      "restrictions": [
        "enum",
        "url"
      ]
    },
    {
      "name": "-webkit-flow-from",
      "browsers": [
        "S6.1"
      ],
      "values": [
        {
          "name": "none",
          "description": "The block container is not a CSS Region."
        }
      ],
      "relevance": 50,
      "description": "Makes a block container a region and associates it with a named flow.",
      "restrictions": [
        "identifier"
      ]
    },
    {
      "name": "-webkit-flow-into",
      "browsers": [
        "S6.1"
      ],
      "values": [
        {
          "name": "none",
          "description": "The element is not moved to a named flow and normal CSS processing takes place."
        }
      ],
      "relevance": 50,
      "description": "Places an element or its contents into a named flow.",
      "restrictions": [
        "identifier"
      ]
    },
    {
      "name": "-webkit-font-feature-settings",
      "browsers": [
        "C16"
      ],
      "values": [
        {
          "name": '"c2cs"'
        },
        {
          "name": '"dlig"'
        },
        {
          "name": '"kern"'
        },
        {
          "name": '"liga"'
        },
        {
          "name": '"lnum"'
        },
        {
          "name": '"onum"'
        },
        {
          "name": '"smcp"'
        },
        {
          "name": '"swsh"'
        },
        {
          "name": '"tnum"'
        },
        {
          "name": "normal",
          "description": "No change in glyph substitution or positioning occurs."
        },
        {
          "name": "off"
        },
        {
          "name": "on"
        }
      ],
      "relevance": 50,
      "description": "This property provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
      "restrictions": [
        "string",
        "integer"
      ]
    },
    {
      "name": "-webkit-hyphens",
      "browsers": [
        "S5.1"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
        },
        {
          "name": "manual",
          "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
        },
        {
          "name": "none",
          "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
        }
      ],
      "relevance": 50,
      "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-line-break",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "after-white-space"
        },
        {
          "name": "normal"
        }
      ],
      "relevance": 50,
      "description": "Specifies line-breaking rules for CJK (Chinese, Japanese, and Korean) text."
    },
    {
      "name": "-webkit-margin-bottom-collapse",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "collapse"
        },
        {
          "name": "discard"
        },
        {
          "name": "separate"
        }
      ],
      "relevance": 50,
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-margin-collapse",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "collapse"
        },
        {
          "name": "discard"
        },
        {
          "name": "separate"
        }
      ],
      "relevance": 50,
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-margin-start",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "-webkit-margin-top-collapse",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "collapse"
        },
        {
          "name": "discard"
        },
        {
          "name": "separate"
        }
      ],
      "relevance": 50,
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-mask-clip",
      "browsers": [
        "C",
        "O15",
        "S4"
      ],
      "status": "nonstandard",
      "syntax": "[ <box> | border | padding | content | text ]#",
      "relevance": 0,
      "description": "Determines the mask painting area, which determines the area that is affected by the mask.",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "-webkit-mask-image",
      "browsers": [
        "C",
        "O15",
        "S4"
      ],
      "values": [
        {
          "name": "none",
          "description": "Counts as a transparent black image layer."
        },
        {
          "name": "url()",
          "description": "Reference to a <mask element or to a CSS image."
        }
      ],
      "status": "nonstandard",
      "syntax": "<mask-reference>#",
      "relevance": 0,
      "description": "Sets the mask layer image of an element.",
      "restrictions": [
        "url",
        "image",
        "enum"
      ]
    },
    {
      "name": "-webkit-mask-origin",
      "browsers": [
        "C",
        "O15",
        "S4"
      ],
      "status": "nonstandard",
      "syntax": "[ <box> | border | padding | content ]#",
      "relevance": 0,
      "description": "Specifies the mask positioning area.",
      "restrictions": [
        "box"
      ]
    },
    {
      "name": "-webkit-mask-repeat",
      "browsers": [
        "C",
        "O15",
        "S4"
      ],
      "status": "nonstandard",
      "syntax": "<repeat-style>#",
      "relevance": 0,
      "description": "Specifies how mask layer images are tiled after they have been sized and positioned.",
      "restrictions": [
        "repeat"
      ]
    },
    {
      "name": "-webkit-mask-size",
      "browsers": [
        "C",
        "O15",
        "S4"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%."
        },
        {
          "name": "contain",
          "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
        },
        {
          "name": "cover",
          "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
        }
      ],
      "status": "nonstandard",
      "syntax": "<bg-size>#",
      "relevance": 0,
      "description": "Specifies the size of the mask layer images.",
      "restrictions": [
        "length",
        "percentage",
        "enum"
      ]
    },
    {
      "name": "-webkit-nbsp-mode",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "space"
        }
      ],
      "relevance": 50,
      "description": "Defines the behavior of nonbreaking spaces within text."
    },
    {
      "name": "-webkit-overflow-scrolling",
      "browsers": [
        "C",
        "S5"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "touch"
        }
      ],
      "status": "nonstandard",
      "syntax": "auto | touch",
      "relevance": 0,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-overflow-scrolling"
        }
      ],
      "description": "Specifies whether to use native-style scrolling in an overflow:scroll element."
    },
    {
      "name": "-webkit-padding-start",
      "browsers": [
        "C",
        "S3"
      ],
      "relevance": 50,
      "restrictions": [
        "percentage",
        "length"
      ]
    },
    {
      "name": "-webkit-perspective",
      "browsers": [
        "C",
        "S4"
      ],
      "values": [
        {
          "name": "none",
          "description": "No perspective transform is applied."
        }
      ],
      "relevance": 50,
      "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
      "restrictions": [
        "length"
      ]
    },
    {
      "name": "-webkit-perspective-origin",
      "browsers": [
        "C",
        "S4"
      ],
      "relevance": 50,
      "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
      "restrictions": [
        "position",
        "percentage",
        "length"
      ]
    },
    {
      "name": "-webkit-region-fragment",
      "browsers": [
        "S7"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Content flows as it would in a regular content box."
        },
        {
          "name": "break",
          "description": "If the content fits within the CSS Region, then this property has no effect."
        }
      ],
      "relevance": 50,
      "description": "The 'region-fragment' property controls the behavior of the last region associated with a named flow.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-tap-highlight-color",
      "browsers": [
        "E12",
        "C16",
        "O15"
      ],
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-tap-highlight-color"
        }
      ],
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-webkit-text-fill-color",
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "syntax": "<color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color"
        }
      ],
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-webkit-text-size-adjust",
      "browsers": [
        "E",
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Renderers must use the default size adjustment when displaying on a small device."
        },
        {
          "name": "none",
          "description": "Renderers must not do size adjustment when displaying on a small device."
        }
      ],
      "relevance": 50,
      "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
      "restrictions": [
        "percentage"
      ]
    },
    {
      "name": "-webkit-text-stroke",
      "browsers": [
        "E15",
        "FF49",
        "S3",
        "C4",
        "O15"
      ],
      "syntax": "<length> || <color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke"
        }
      ],
      "restrictions": [
        "length",
        "line-width",
        "color",
        "percentage"
      ]
    },
    {
      "name": "-webkit-text-stroke-color",
      "browsers": [
        "E15",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "syntax": "<color>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color"
        }
      ],
      "restrictions": [
        "color"
      ]
    },
    {
      "name": "-webkit-text-stroke-width",
      "browsers": [
        "E15",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "syntax": "<length>",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width"
        }
      ],
      "restrictions": [
        "length",
        "line-width",
        "percentage"
      ]
    },
    {
      "name": "-webkit-touch-callout",
      "browsers": [
        "S3"
      ],
      "values": [
        {
          "name": "none"
        }
      ],
      "status": "nonstandard",
      "syntax": "default | none",
      "relevance": 0,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-touch-callout"
        }
      ],
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-transform",
      "browsers": [
        "C",
        "O12",
        "S3.1"
      ],
      "values": [
        {
          "name": "matrix()",
          "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
        },
        {
          "name": "matrix3d()",
          "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
        },
        {
          "name": "none"
        },
        {
          "name": "perspective()",
          "description": "Specifies a perspective projection matrix."
        },
        {
          "name": "rotate()",
          "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
        },
        {
          "name": "rotate3d()",
          "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
        },
        {
          "name": "rotateX('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the X axis."
        },
        {
          "name": "rotateY('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Y axis."
        },
        {
          "name": "rotateZ('angle')",
          "description": "Specifies a clockwise rotation by the given angle about the Z axis."
        },
        {
          "name": "scale()",
          "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
        },
        {
          "name": "scale3d()",
          "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
        },
        {
          "name": "scaleX()",
          "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
        },
        {
          "name": "scaleY()",
          "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
        },
        {
          "name": "scaleZ()",
          "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
        },
        {
          "name": "skew()",
          "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
        },
        {
          "name": "skewX()",
          "description": "Specifies a skew transformation along the X axis by the given angle."
        },
        {
          "name": "skewY()",
          "description": "Specifies a skew transformation along the Y axis by the given angle."
        },
        {
          "name": "translate()",
          "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
        },
        {
          "name": "translate3d()",
          "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
        },
        {
          "name": "translateX()",
          "description": "Specifies a translation by the given amount in the X direction."
        },
        {
          "name": "translateY()",
          "description": "Specifies a translation by the given amount in the Y direction."
        },
        {
          "name": "translateZ()",
          "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
        }
      ],
      "relevance": 50,
      "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-transform-origin",
      "browsers": [
        "C",
        "O15",
        "S3.1"
      ],
      "relevance": 50,
      "description": "Establishes the origin of transformation for an element.",
      "restrictions": [
        "position",
        "length",
        "percentage"
      ]
    },
    {
      "name": "-webkit-transform-origin-x",
      "browsers": [
        "C",
        "S3.1"
      ],
      "relevance": 50,
      "description": "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-webkit-transform-origin-y",
      "browsers": [
        "C",
        "S3.1"
      ],
      "relevance": 50,
      "description": "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-webkit-transform-origin-z",
      "browsers": [
        "C",
        "S4"
      ],
      "relevance": 50,
      "description": "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "-webkit-transform-style",
      "browsers": [
        "C",
        "S4"
      ],
      "values": [
        {
          "name": "flat",
          "description": "All children of this element are rendered flattened into the 2D plane of the element."
        }
      ],
      "relevance": 50,
      "description": "Defines how nested elements are rendered in 3D space.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-transition",
      "browsers": [
        "C",
        "O12",
        "S5"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "relevance": 50,
      "description": "Shorthand property combines four of the transition properties into a single property.",
      "restrictions": [
        "time",
        "property",
        "timing-function",
        "enum"
      ]
    },
    {
      "name": "-webkit-transition-delay",
      "browsers": [
        "C",
        "O12",
        "S5"
      ],
      "relevance": 50,
      "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-webkit-transition-duration",
      "browsers": [
        "C",
        "O12",
        "S5"
      ],
      "relevance": 50,
      "description": "Specifies how long the transition from the old value to the new value should take.",
      "restrictions": [
        "time"
      ]
    },
    {
      "name": "-webkit-transition-property",
      "browsers": [
        "C",
        "O12",
        "S5"
      ],
      "values": [
        {
          "name": "all",
          "description": "Every property that is able to undergo a transition will do so."
        },
        {
          "name": "none",
          "description": "No property will transition."
        }
      ],
      "relevance": 50,
      "description": "Specifies the name of the CSS property to which the transition is applied.",
      "restrictions": [
        "property"
      ]
    },
    {
      "name": "-webkit-transition-timing-function",
      "browsers": [
        "C",
        "O12",
        "S5"
      ],
      "relevance": 50,
      "description": "Describes how the intermediate values used during a transition will be calculated.",
      "restrictions": [
        "timing-function"
      ]
    },
    {
      "name": "-webkit-user-drag",
      "browsers": [
        "S3"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "element"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-user-modify",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "read-only"
        },
        {
          "name": "read-write"
        },
        {
          "name": "read-write-plaintext-only"
        }
      ],
      "status": "nonstandard",
      "syntax": "read-only | read-write | read-write-plaintext-only",
      "relevance": 0,
      "description": "Determines whether a user can edit the content of an element.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "-webkit-user-select",
      "browsers": [
        "C",
        "S3"
      ],
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        },
        {
          "name": "text"
        }
      ],
      "relevance": 50,
      "description": "Controls the appearance of selection.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "widows",
      "browsers": [
        "E12",
        "S1.3",
        "C25",
        "IE8",
        "O9.2"
      ],
      "syntax": "<integer>",
      "relevance": 51,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/widows"
        }
      ],
      "description": "Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "width",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The width depends on the values of other properties."
        },
        {
          "name": "fit-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O3.5"
          ],
          "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
        },
        {
          "name": "max-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O3.5"
          ],
          "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
        },
        {
          "name": "min-content",
          "browsers": [
            "E12",
            "FF1",
            "S1",
            "C1",
            "IE4",
            "O3.5"
          ],
          "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
        }
      ],
      "atRule": "@viewport",
      "syntax": "<viewport-length>{1,2}",
      "relevance": 96,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/width"
        }
      ],
      "description": "Specifies the width of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "will-change",
      "browsers": [
        "E79",
        "FF36",
        "S9.1",
        "C36",
        "O24"
      ],
      "values": [
        {
          "name": "auto",
          "description": "Expresses no particular intent."
        },
        {
          "name": "contents",
          "description": "Indicates that the author expects to animate or change something about the element's contents in the near future."
        },
        {
          "name": "scroll-position",
          "description": "Indicates that the author expects to animate or change the scroll position of the element in the near future."
        }
      ],
      "syntax": "auto | <animateable-feature>#",
      "relevance": 65,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/will-change"
        }
      ],
      "description": "Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.",
      "restrictions": [
        "enum",
        "identifier"
      ]
    },
    {
      "name": "word-break",
      "browsers": [
        "E12",
        "FF15",
        "S3",
        "C1",
        "IE5.5",
        "O15"
      ],
      "values": [
        {
          "name": "break-all",
          "description": "Lines may break between any two grapheme clusters for non-CJK scripts."
        },
        {
          "name": "keep-all",
          "description": "Block characters can no longer create implied break points."
        },
        {
          "name": "normal",
          "description": "Breaks non-CJK scripts according to their own rules."
        }
      ],
      "syntax": "normal | break-all | keep-all | break-word",
      "relevance": 76,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/word-break"
        }
      ],
      "description": "Specifies line break opportunities for non-CJK scripts.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "word-spacing",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE6",
        "O3.5"
      ],
      "values": [
        {
          "name": "normal",
          "description": "No additional spacing is applied. Computes to zero."
        }
      ],
      "syntax": "normal | <length>",
      "relevance": 57,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/word-spacing"
        }
      ],
      "description": 'Specifies additional spacing between "words".',
      "restrictions": [
        "length",
        "percentage"
      ]
    },
    {
      "name": "word-wrap",
      "values": [
        {
          "name": "break-word",
          "description": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
        },
        {
          "name": "normal",
          "description": "Lines may break only at allowed break points."
        }
      ],
      "syntax": "normal | break-word",
      "relevance": 77,
      "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "writing-mode",
      "browsers": [
        "E12",
        "FF41",
        "S10.1",
        "C48",
        "IE9",
        "O35"
      ],
      "values": [
        {
          "name": "horizontal-tb",
          "description": "Top-to-bottom block flow direction. The writing mode is horizontal."
        },
        {
          "name": "sideways-lr",
          "browsers": [
            "E12",
            "FF41",
            "S10.1",
            "C48",
            "IE9",
            "O35"
          ],
          "description": "Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal."
        },
        {
          "name": "sideways-rl",
          "browsers": [
            "E12",
            "FF41",
            "S10.1",
            "C48",
            "IE9",
            "O35"
          ],
          "description": "Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal."
        },
        {
          "name": "vertical-lr",
          "description": "Left-to-right block flow direction. The writing mode is vertical."
        },
        {
          "name": "vertical-rl",
          "description": "Right-to-left block flow direction. The writing mode is vertical."
        }
      ],
      "syntax": "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/writing-mode"
        }
      ],
      "description": "This is a shorthand property for both 'direction' and 'block-progression'.",
      "restrictions": [
        "enum"
      ]
    },
    {
      "name": "z-index",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O4"
      ],
      "values": [
        {
          "name": "auto",
          "description": "The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element."
        }
      ],
      "syntax": "auto | <integer>",
      "relevance": 92,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/z-index"
        }
      ],
      "description": "For a positioned box, the 'z-index' property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.",
      "restrictions": [
        "integer"
      ]
    },
    {
      "name": "zoom",
      "browsers": [
        "E12",
        "S3.1",
        "C1",
        "IE5.5",
        "O15"
      ],
      "values": [
        {
          "name": "normal"
        }
      ],
      "atRule": "@viewport",
      "syntax": "auto | <number> | <percentage>",
      "relevance": 65,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/zoom"
        }
      ],
      "description": "Non-standard. Specifies the magnification scale of the object. See 'transform: scale()' for a standards-based alternative.",
      "restrictions": [
        "enum",
        "integer",
        "number",
        "percentage"
      ]
    },
    {
      "name": "-ms-ime-align",
      "status": "nonstandard",
      "syntax": "auto | after",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "after"
        }
      ],
      "relevance": 0,
      "description": "Aligns the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active."
    },
    {
      "name": "-moz-binding",
      "status": "nonstandard",
      "syntax": "<url> | none",
      "relevance": 0,
      "description": "The -moz-binding CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element."
    },
    {
      "name": "-moz-context-properties",
      "status": "nonstandard",
      "syntax": "none | [ fill | fill-opacity | stroke | stroke-opacity ]#",
      "relevance": 0,
      "description": "If you reference an SVG image in a webpage (such as with the <img> element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the -moz-context-properties property, and the image needs to opt in to using those properties by using values such as the context-fill value.\n\nThis feature is available since Firefox 55, but is only currently supported with SVG images loaded via chrome:// or resource:// URLs. To experiment with the feature in SVG on the Web it is necessary to set the svg.context-properties.content.enabled pref to true."
    },
    {
      "name": "-moz-float-edge",
      "status": "obsolete",
      "syntax": "border-box | content-box | margin-box | padding-box",
      "values": [
        {
          "name": "border-box"
        },
        {
          "name": "content-box"
        },
        {
          "name": "margin-box"
        },
        {
          "name": "padding-box"
        }
      ],
      "relevance": 0,
      "browsers": [
        "FF1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-float-edge"
        }
      ],
      "description": "The non-standard -moz-float-edge CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness."
    },
    {
      "name": "-moz-force-broken-image-icon",
      "status": "obsolete",
      "syntax": "0 | 1",
      "values": [
        {
          "name": "0"
        },
        {
          "name": "1"
        }
      ],
      "relevance": 0,
      "browsers": [
        "FF1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-force-broken-image-icon"
        }
      ],
      "description": "The -moz-force-broken-image-icon extended CSS property can be used to force the broken image icon to be shown even when a broken image has an alt attribute."
    },
    {
      "name": "-moz-image-region",
      "status": "nonstandard",
      "syntax": "<shape> | auto",
      "relevance": 0,
      "browsers": [
        "FF1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-image-region"
        }
      ],
      "description": "For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance."
    },
    {
      "name": "-moz-orient",
      "status": "nonstandard",
      "syntax": "inline | block | horizontal | vertical",
      "values": [
        {
          "name": "inline"
        },
        {
          "name": "block"
        },
        {
          "name": "horizontal"
        },
        {
          "name": "vertical"
        }
      ],
      "relevance": 0,
      "browsers": [
        "FF6"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-orient"
        }
      ],
      "description": "The -moz-orient CSS property specifies the orientation of the element to which it's applied."
    },
    {
      "name": "-moz-outline-radius",
      "status": "nonstandard",
      "syntax": "<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?",
      "relevance": 0,
      "description": "In Mozilla applications like Firefox, the -moz-outline-radius CSS property can be used to give an element's outline rounded corners."
    },
    {
      "name": "-moz-outline-radius-bottomleft",
      "status": "nonstandard",
      "syntax": "<outline-radius>",
      "relevance": 0,
      "description": "In Mozilla applications, the -moz-outline-radius-bottomleft CSS property can be used to round the bottom-left corner of an element's outline."
    },
    {
      "name": "-moz-outline-radius-bottomright",
      "status": "nonstandard",
      "syntax": "<outline-radius>",
      "relevance": 0,
      "description": "In Mozilla applications, the -moz-outline-radius-bottomright CSS property can be used to round the bottom-right corner of an element's outline."
    },
    {
      "name": "-moz-outline-radius-topleft",
      "status": "nonstandard",
      "syntax": "<outline-radius>",
      "relevance": 0,
      "description": "In Mozilla applications, the -moz-outline-radius-topleft CSS property can be used to round the top-left corner of an element's outline."
    },
    {
      "name": "-moz-outline-radius-topright",
      "status": "nonstandard",
      "syntax": "<outline-radius>",
      "relevance": 0,
      "description": "In Mozilla applications, the -moz-outline-radius-topright CSS property can be used to round the top-right corner of an element's outline."
    },
    {
      "name": "-moz-stack-sizing",
      "status": "nonstandard",
      "syntax": "ignore | stretch-to-fit",
      "values": [
        {
          "name": "ignore"
        },
        {
          "name": "stretch-to-fit"
        }
      ],
      "relevance": 0,
      "description": "-moz-stack-sizing is an extended CSS property. Normally, a stack will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible."
    },
    {
      "name": "-moz-text-blink",
      "status": "nonstandard",
      "syntax": "none | blink",
      "values": [
        {
          "name": "none"
        },
        {
          "name": "blink"
        }
      ],
      "relevance": 0,
      "description": "The -moz-text-blink non-standard Mozilla CSS extension specifies the blink mode."
    },
    {
      "name": "-moz-user-input",
      "status": "obsolete",
      "syntax": "auto | none | enabled | disabled",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        },
        {
          "name": "enabled"
        },
        {
          "name": "disabled"
        }
      ],
      "relevance": 0,
      "browsers": [
        "FF1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-user-input"
        }
      ],
      "description": "In Mozilla applications, -moz-user-input determines if an element will accept user input."
    },
    {
      "name": "-moz-user-modify",
      "status": "nonstandard",
      "syntax": "read-only | read-write | write-only",
      "values": [
        {
          "name": "read-only"
        },
        {
          "name": "read-write"
        },
        {
          "name": "write-only"
        }
      ],
      "relevance": 0,
      "description": "The -moz-user-modify property has no effect. It was originally planned to determine whether or not the content of an element can be edited by a user."
    },
    {
      "name": "-moz-window-dragging",
      "status": "nonstandard",
      "syntax": "drag | no-drag",
      "values": [
        {
          "name": "drag"
        },
        {
          "name": "no-drag"
        }
      ],
      "relevance": 0,
      "description": "The -moz-window-dragging CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X."
    },
    {
      "name": "-moz-window-shadow",
      "status": "nonstandard",
      "syntax": "default | menu | tooltip | sheet | none",
      "values": [
        {
          "name": "default"
        },
        {
          "name": "menu"
        },
        {
          "name": "tooltip"
        },
        {
          "name": "sheet"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 0,
      "description": "The -moz-window-shadow CSS property specifies whether a window will have a shadow. It only works on Mac OS X."
    },
    {
      "name": "-webkit-border-before",
      "status": "nonstandard",
      "syntax": "<'border-width'> || <'border-style'> || <color>",
      "relevance": 0,
      "browsers": [
        "E79",
        "S5.1",
        "C8",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-border-before"
        }
      ],
      "description": "The -webkit-border-before CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet."
    },
    {
      "name": "-webkit-border-before-color",
      "status": "nonstandard",
      "syntax": "<color>",
      "relevance": 0,
      "description": "The -webkit-border-before-color CSS property sets the color of the individual logical block start border in a single place in the style sheet."
    },
    {
      "name": "-webkit-border-before-style",
      "status": "nonstandard",
      "syntax": "<'border-style'>",
      "relevance": 0,
      "description": "The -webkit-border-before-style CSS property sets the style of the individual logical block start border in a single place in the style sheet."
    },
    {
      "name": "-webkit-border-before-width",
      "status": "nonstandard",
      "syntax": "<'border-width'>",
      "relevance": 0,
      "description": "The -webkit-border-before-width CSS property sets the width of the individual logical block start border in a single place in the style sheet."
    },
    {
      "name": "-webkit-line-clamp",
      "syntax": "none | <integer>",
      "relevance": 50,
      "browsers": [
        "E17",
        "FF68",
        "S5",
        "C6",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp"
        }
      ],
      "description": "The -webkit-line-clamp CSS property allows limiting of the contents of a block container to the specified number of lines."
    },
    {
      "name": "-webkit-mask",
      "status": "nonstandard",
      "syntax": "[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#",
      "relevance": 0,
      "description": "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points."
    },
    {
      "name": "-webkit-mask-attachment",
      "status": "nonstandard",
      "syntax": "<attachment>#",
      "relevance": 0,
      "browsers": [
        "S4",
        "C1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment"
        }
      ],
      "description": "If a -webkit-mask-image is specified, -webkit-mask-attachment determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block."
    },
    {
      "name": "-webkit-mask-composite",
      "status": "nonstandard",
      "syntax": "<composite-style>#",
      "relevance": 0,
      "browsers": [
        "E18",
        "FF53",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite"
        }
      ],
      "description": "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the -webkit-mask-image property."
    },
    {
      "name": "-webkit-mask-position",
      "status": "nonstandard",
      "syntax": "<position>#",
      "relevance": 0,
      "description": "The mask-position CSS property sets the initial position, relative to the mask position layer defined by mask-origin, for each defined mask image."
    },
    {
      "name": "-webkit-mask-position-x",
      "status": "nonstandard",
      "syntax": "[ <length-percentage> | left | center | right ]#",
      "relevance": 0,
      "browsers": [
        "E18",
        "FF49",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-x"
        }
      ],
      "description": "The -webkit-mask-position-x CSS property sets the initial horizontal position of a mask image."
    },
    {
      "name": "-webkit-mask-position-y",
      "status": "nonstandard",
      "syntax": "[ <length-percentage> | top | center | bottom ]#",
      "relevance": 0,
      "browsers": [
        "E18",
        "FF49",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-y"
        }
      ],
      "description": "The -webkit-mask-position-y CSS property sets the initial vertical position of a mask image."
    },
    {
      "name": "-webkit-mask-repeat-x",
      "status": "nonstandard",
      "syntax": "repeat | no-repeat | space | round",
      "values": [
        {
          "name": "repeat"
        },
        {
          "name": "no-repeat"
        },
        {
          "name": "space"
        },
        {
          "name": "round"
        }
      ],
      "relevance": 0,
      "browsers": [
        "E79",
        "S5",
        "C3",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-x"
        }
      ],
      "description": "The -webkit-mask-repeat-x property specifies whether and how a mask image is repeated (tiled) horizontally."
    },
    {
      "name": "-webkit-mask-repeat-y",
      "status": "nonstandard",
      "syntax": "repeat | no-repeat | space | round",
      "values": [
        {
          "name": "repeat"
        },
        {
          "name": "no-repeat"
        },
        {
          "name": "space"
        },
        {
          "name": "round"
        }
      ],
      "relevance": 0,
      "browsers": [
        "E79",
        "S5",
        "C3",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-y"
        }
      ],
      "description": "The -webkit-mask-repeat-y property specifies whether and how a mask image is repeated (tiled) vertically."
    },
    {
      "name": "accent-color",
      "syntax": "auto | <color>",
      "relevance": 50,
      "browsers": [
        "E93",
        "FF92",
        "S15.4",
        "C93",
        "O79"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/accent-color"
        }
      ],
      "description": "Sets the color of the elements accent"
    },
    {
      "name": "align-tracks",
      "status": "experimental",
      "syntax": "[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#",
      "relevance": 50,
      "browsers": [
        "FF77"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/align-tracks"
        }
      ],
      "description": "The align-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis."
    },
    {
      "name": "animation-composition",
      "syntax": "<single-animation-composition>#",
      "relevance": 50,
      "browsers": [
        "E112",
        "FF115",
        "S16",
        "C112",
        "O98"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-composition"
        }
      ],
      "description": "The composite operation to use when multiple animations affect the same property."
    },
    {
      "name": "animation-range",
      "status": "experimental",
      "syntax": "[ <'animation-range-start'> <'animation-range-end'>? ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-range"
        }
      ],
      "description": "The animation-range CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end."
    },
    {
      "name": "animation-range-end",
      "status": "experimental",
      "syntax": "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-range-end"
        }
      ],
      "description": "The animation-range-end CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end."
    },
    {
      "name": "animation-range-start",
      "status": "experimental",
      "syntax": "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-range-start"
        }
      ],
      "description": "The animation-range-start CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start."
    },
    {
      "name": "animation-timeline",
      "status": "experimental",
      "syntax": "<single-animation-timeline>#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF110",
        "C115",
        "O71"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/animation-timeline"
        }
      ],
      "description": "Specifies the names of one or more @scroll-timeline at-rules to describe the element's scroll animations."
    },
    {
      "name": "appearance",
      "syntax": "none | auto | textfield | menulist-button | <compat-auto>",
      "relevance": 69,
      "browsers": [
        "E84",
        "FF80",
        "S15.4",
        "C84",
        "O70"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/appearance"
        }
      ],
      "description": "Changes the appearance of buttons and other controls to resemble native controls."
    },
    {
      "name": "aspect-ratio",
      "syntax": "auto | <ratio>",
      "relevance": 58,
      "browsers": [
        "E88",
        "FF89",
        "S15",
        "C88",
        "O74"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/aspect-ratio"
        }
      ],
      "description": "The aspect-ratio   CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions."
    },
    {
      "name": "azimuth",
      "status": "obsolete",
      "syntax": "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards",
      "relevance": 0,
      "description": "In combination with elevation, the azimuth CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage."
    },
    {
      "name": "backdrop-filter",
      "syntax": "none | <filter-function-list>",
      "relevance": 56,
      "browsers": [
        "E17",
        "FF103",
        "S9",
        "C76",
        "O63"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/backdrop-filter"
        }
      ],
      "description": "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent."
    },
    {
      "name": "border-block",
      "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block"
        }
      ],
      "description": "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet."
    },
    {
      "name": "border-block-color",
      "syntax": "<'border-top-color'>{1,2}",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-color"
        }
      ],
      "description": "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-block-style",
      "syntax": "<'border-top-style'>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-style"
        }
      ],
      "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-block-width",
      "syntax": "<'border-top-width'>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-width"
        }
      ],
      "description": "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-end-end-radius",
      "syntax": "<length-percentage>{1,2}",
      "relevance": 53,
      "browsers": [
        "E89",
        "FF66",
        "S15",
        "C89",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius"
        }
      ],
      "description": "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-end-start-radius",
      "syntax": "<length-percentage>{1,2}",
      "relevance": 53,
      "browsers": [
        "E89",
        "FF66",
        "S15",
        "C89",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius"
        }
      ],
      "description": "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-inline",
      "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline"
        }
      ],
      "description": "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet."
    },
    {
      "name": "border-inline-color",
      "syntax": "<'border-top-color'>{1,2}",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-color"
        }
      ],
      "description": "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-inline-style",
      "syntax": "<'border-top-style'>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-style"
        }
      ],
      "description": "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-inline-width",
      "syntax": "<'border-top-width'>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-width"
        }
      ],
      "description": "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-start-end-radius",
      "syntax": "<length-percentage>{1,2}",
      "relevance": 53,
      "browsers": [
        "E89",
        "FF66",
        "S15",
        "C89",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius"
        }
      ],
      "description": "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation."
    },
    {
      "name": "border-start-start-radius",
      "syntax": "<length-percentage>{1,2}",
      "relevance": 53,
      "browsers": [
        "E89",
        "FF66",
        "S15",
        "C89",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius"
        }
      ],
      "description": "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation."
    },
    {
      "name": "box-align",
      "status": "obsolete",
      "syntax": "start | center | end | baseline | stretch",
      "values": [
        {
          "name": "start"
        },
        {
          "name": "center"
        },
        {
          "name": "end"
        },
        {
          "name": "baseline"
        },
        {
          "name": "stretch"
        }
      ],
      "relevance": 0,
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-align"
        }
      ],
      "description": "The box-align CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box."
    },
    {
      "name": "box-direction",
      "status": "obsolete",
      "syntax": "normal | reverse | inherit",
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "reverse"
        },
        {
          "name": "inherit"
        }
      ],
      "relevance": 0,
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-direction"
        }
      ],
      "description": "The box-direction CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge)."
    },
    {
      "name": "box-flex",
      "status": "obsolete",
      "syntax": "<number>",
      "relevance": 0,
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-flex"
        }
      ],
      "description": "The -moz-box-flex and -webkit-box-flex CSS properties specify how a -moz-box or -webkit-box grows to fill the box that contains it, in the direction of the containing box's layout."
    },
    {
      "name": "box-flex-group",
      "status": "obsolete",
      "syntax": "<integer>",
      "relevance": 0,
      "browsers": [
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-flex-group"
        }
      ],
      "description": "The box-flex-group CSS property assigns the flexbox's child elements to a flex group."
    },
    {
      "name": "box-lines",
      "status": "obsolete",
      "syntax": "single | multiple",
      "values": [
        {
          "name": "single"
        },
        {
          "name": "multiple"
        }
      ],
      "relevance": 0,
      "browsers": [
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-lines"
        }
      ],
      "description": "The box-lines CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes)."
    },
    {
      "name": "box-ordinal-group",
      "status": "obsolete",
      "syntax": "<integer>",
      "relevance": 0,
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group"
        }
      ],
      "description": "The box-ordinal-group CSS property assigns the flexbox's child elements to an ordinal group."
    },
    {
      "name": "box-orient",
      "status": "obsolete",
      "syntax": "horizontal | vertical | inline-axis | block-axis | inherit",
      "values": [
        {
          "name": "horizontal"
        },
        {
          "name": "vertical"
        },
        {
          "name": "inline-axis"
        },
        {
          "name": "block-axis"
        },
        {
          "name": "inherit"
        }
      ],
      "relevance": 0,
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-orient"
        }
      ],
      "description": "The box-orient CSS property specifies whether an element lays out its contents horizontally or vertically."
    },
    {
      "name": "box-pack",
      "status": "obsolete",
      "syntax": "start | center | end | justify",
      "values": [
        {
          "name": "start"
        },
        {
          "name": "center"
        },
        {
          "name": "end"
        },
        {
          "name": "justify"
        }
      ],
      "relevance": 0,
      "browsers": [
        "E12",
        "FF49",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/box-pack"
        }
      ],
      "description": "The -moz-box-pack and -webkit-box-pack CSS properties specify how a -moz-box or -webkit-box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box."
    },
    {
      "name": "caret",
      "syntax": "<'caret-color'> || <'caret-shape'>",
      "relevance": 50,
      "description": "Shorthand for setting caret-color and caret-shape."
    },
    {
      "name": "caret-shape",
      "syntax": "auto | bar | block | underscore",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "bar"
        },
        {
          "name": "block"
        },
        {
          "name": "underscore"
        }
      ],
      "relevance": 50,
      "description": "Specifies the desired shape of the text insertion caret."
    },
    {
      "name": "color-scheme",
      "syntax": "normal | [ light | dark | <custom-ident> ]+ && only?",
      "relevance": 57,
      "browsers": [
        "E81",
        "FF96",
        "S13",
        "C81",
        "O68"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/color-scheme"
        }
      ],
      "description": "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in."
    },
    {
      "name": "contain-intrinsic-size",
      "syntax": "[ auto? [ none | <length> ] ]{1,2}",
      "relevance": 50,
      "browsers": [
        "E83",
        "FF107",
        "S17",
        "C83",
        "O69"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size"
        }
      ],
      "description": "Size of an element when the element is subject to size containment."
    },
    {
      "name": "contain-intrinsic-block-size",
      "syntax": "auto? [ none | <length> ]",
      "relevance": 50,
      "browsers": [
        "E95",
        "FF107",
        "S17",
        "C95",
        "O81"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size"
        }
      ],
      "description": "Block size of an element when the element is subject to size containment."
    },
    {
      "name": "contain-intrinsic-height",
      "syntax": "auto? [ none | <length> ]",
      "relevance": 50,
      "browsers": [
        "E95",
        "FF107",
        "S17",
        "C95",
        "O81"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height"
        }
      ],
      "description": "Height of an element when the element is subject to size containment."
    },
    {
      "name": "contain-intrinsic-inline-size",
      "syntax": "auto? [ none | <length> ]",
      "relevance": 50,
      "browsers": [
        "E95",
        "FF107",
        "S17",
        "C95",
        "O81"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size"
        }
      ],
      "description": "Inline size of an element when the element is subject to size containment."
    },
    {
      "name": "contain-intrinsic-width",
      "syntax": "auto? [ none | <length> ]",
      "relevance": 50,
      "browsers": [
        "E95",
        "FF107",
        "S17",
        "C95",
        "O81"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width"
        }
      ],
      "description": "Width of an element when the element is subject to size containment."
    },
    {
      "name": "container",
      "syntax": "<'container-name'> [ / <'container-type'> ]?",
      "relevance": 53,
      "browsers": [
        "E105",
        "FF110",
        "S16",
        "C105",
        "O91"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/container"
        }
      ],
      "description": "The container shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query."
    },
    {
      "name": "container-name",
      "syntax": "none | <custom-ident>+",
      "relevance": 50,
      "browsers": [
        "E105",
        "FF110",
        "S16",
        "C105",
        "O91"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/container-name"
        }
      ],
      "description": "The container-name CSS property specifies a list of query container names used by the @container at-rule in a container query."
    },
    {
      "name": "container-type",
      "syntax": "normal | size | inline-size",
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "size"
        },
        {
          "name": "inline-size"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E105",
        "FF110",
        "S16",
        "C105",
        "O91"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/container-type"
        }
      ],
      "description": "The container-type CSS property is used to define the type of containment used in a container query."
    },
    {
      "name": "content-visibility",
      "syntax": "visible | auto | hidden",
      "values": [
        {
          "name": "visible"
        },
        {
          "name": "auto"
        },
        {
          "name": "hidden"
        }
      ],
      "relevance": 52,
      "browsers": [
        "E85",
        "FFpreview",
        "C85",
        "O71"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/content-visibility"
        }
      ],
      "description": "Controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed."
    },
    {
      "name": "counter-set",
      "syntax": "[ <counter-name> <integer>? ]+ | none",
      "relevance": 50,
      "browsers": [
        "E85",
        "FF68",
        "C85",
        "O71"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/counter-set"
        }
      ],
      "description": "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element."
    },
    {
      "name": "font-optical-sizing",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E17",
        "FF62",
        "S11",
        "C79",
        "O66"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing"
        }
      ],
      "description": "The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis."
    },
    {
      "name": "font-palette",
      "syntax": "normal | light | dark | <palette-identifier>",
      "relevance": 50,
      "browsers": [
        "E101",
        "FF107",
        "S15.4",
        "C101",
        "O87"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-palette"
        }
      ],
      "description": "The font-palette CSS property allows specifying one of the many palettes contained in a font that a user agent should use for the font. Users can also override the values in a palette or create a new palette by using the @font-palette-values at-rule."
    },
    {
      "name": "font-variation-settings",
      "atRule": "@font-face",
      "syntax": "normal | [ <string> <number> ]#",
      "relevance": 51,
      "browsers": [
        "E17",
        "FF62",
        "S11",
        "C62",
        "O49"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variation-settings"
        }
      ],
      "description": "The font-variation-settings CSS property provides low-level control over OpenType or TrueType font variations, by specifying the four letter axis names of the features you want to vary, along with their variation values."
    },
    {
      "name": "font-smooth",
      "status": "nonstandard",
      "syntax": "auto | never | always | <absolute-size> | <length>",
      "relevance": 0,
      "browsers": [
        "E79",
        "FF25",
        "S4",
        "C5",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-smooth"
        }
      ],
      "description": "The font-smooth CSS property controls the application of anti-aliasing when fonts are rendered."
    },
    {
      "name": "font-synthesis-small-caps",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E97",
        "FF111",
        "S16.4",
        "C97",
        "O83"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps"
        }
      ],
      "description": "The font-synthesis-small-caps CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."
    },
    {
      "name": "font-synthesis-style",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E97",
        "FF111",
        "S16.4",
        "C97",
        "O83"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style"
        }
      ],
      "description": "The font-synthesis-style CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family."
    },
    {
      "name": "font-synthesis-weight",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E97",
        "FF111",
        "S16.4",
        "C97",
        "O83"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight"
        }
      ],
      "description": "The font-synthesis-weight CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family."
    },
    {
      "name": "font-variant-emoji",
      "syntax": "normal | text | emoji | unicode",
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "text"
        },
        {
          "name": "emoji"
        },
        {
          "name": "unicode"
        }
      ],
      "relevance": 50,
      "browsers": [
        "FF108"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji"
        }
      ],
      "description": "The font-variant-emoji CSS property specifies the default presentation style for displaying emojis."
    },
    {
      "name": "forced-color-adjust",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 57,
      "browsers": [
        "E79",
        "FF113",
        "C89",
        "IE10",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust"
        }
      ],
      "description": "Allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS"
    },
    {
      "name": "gap",
      "syntax": "<'row-gap'> <'column-gap'>?",
      "relevance": 67,
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C57",
        "O44"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/gap"
        }
      ],
      "description": "The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns."
    },
    {
      "name": "hanging-punctuation",
      "syntax": "none | [ first || [ force-end | allow-end ] || last ]",
      "relevance": 50,
      "browsers": [
        "S10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation"
        }
      ],
      "description": "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box."
    },
    {
      "name": "hyphenate-character",
      "syntax": "auto | <string>",
      "relevance": 50,
      "browsers": [
        "E106",
        "FF98",
        "S5.1",
        "C106",
        "O92"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/hyphenate-character"
        }
      ],
      "description": "A hyphenate character used at the end of a line."
    },
    {
      "name": "hyphenate-limit-chars",
      "syntax": "[ auto | <integer> ]{1,3}",
      "relevance": 50,
      "browsers": [
        "E109",
        "C109",
        "O95"
      ],
      "description": "The hyphenate-limit-chars CSS property specifies the minimum word length to allow hyphenation of words as well as the minimum number of characters before and after the hyphen."
    },
    {
      "name": "image-resolution",
      "status": "experimental",
      "syntax": "[ from-image || <resolution> ] && snap?",
      "relevance": 50,
      "description": "The image-resolution property specifies the intrinsic resolution of all raster images used in or on the element. It affects both content images (e.g. replaced elements and generated content) and decorative images (such as background-image). The intrinsic resolution of an image is used to determine the image\u2019s intrinsic dimensions."
    },
    {
      "name": "initial-letter",
      "status": "experimental",
      "syntax": "normal | [ <number> <integer>? ]",
      "relevance": 50,
      "browsers": [
        "E110",
        "S9",
        "C110",
        "O96"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/initial-letter"
        }
      ],
      "description": "The initial-letter CSS property specifies styling for dropped, raised, and sunken initial letters."
    },
    {
      "name": "initial-letter-align",
      "status": "experimental",
      "syntax": "[ auto | alphabetic | hanging | ideographic ]",
      "relevance": 50,
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/initial-letter-align"
        }
      ],
      "description": "The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph."
    },
    {
      "name": "input-security",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "description": "Enables or disables the obscuring a sensitive test input."
    },
    {
      "name": "inset",
      "syntax": "<'top'>{1,4}",
      "relevance": 56,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset"
        }
      ],
      "description": "The inset CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "inset-block",
      "syntax": "<'top'>{1,2}",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF63",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block"
        }
      ],
      "description": "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "inset-block-end",
      "syntax": "<'top'>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF63",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block-end"
        }
      ],
      "description": "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "inset-block-start",
      "syntax": "<'top'>",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF63",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block-start"
        }
      ],
      "description": "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "inset-inline",
      "syntax": "<'top'>{1,2}",
      "relevance": 50,
      "browsers": [
        "E87",
        "FF63",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline"
        }
      ],
      "description": "The inset-inline CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "inset-inline-end",
      "syntax": "<'top'>",
      "relevance": 51,
      "browsers": [
        "E87",
        "FF63",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline-end"
        }
      ],
      "description": "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "inset-inline-start",
      "syntax": "<'top'>",
      "relevance": 51,
      "browsers": [
        "E87",
        "FF63",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline-start"
        }
      ],
      "description": "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
    },
    {
      "name": "justify-tracks",
      "status": "experimental",
      "syntax": "[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
      "relevance": 50,
      "browsers": [
        "FF77"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/justify-tracks"
        }
      ],
      "description": "The justify-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis"
    },
    {
      "name": "line-clamp",
      "status": "experimental",
      "syntax": "none | <integer>",
      "relevance": 50,
      "description": "The line-clamp property allows limiting the contents of a block container to the specified number of lines; remaining content is fragmented away and neither rendered nor measured. Optionally, it also allows inserting content into the last line box to indicate the continuity of truncated/interrupted content."
    },
    {
      "name": "line-height-step",
      "status": "experimental",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "C60",
        "O47"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/line-height-step"
        }
      ],
      "description": "The line-height-step CSS property defines the step units for line box heights. When the step unit is positive, line box heights are rounded up to the closest multiple of the unit. Negative values are invalid."
    },
    {
      "name": "margin-block",
      "syntax": "<'margin-left'>{1,2}",
      "relevance": 53,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block"
        }
      ],
      "description": "The margin-block CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
    },
    {
      "name": "margin-inline",
      "syntax": "<'margin-left'>{1,2}",
      "relevance": 51,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline"
        }
      ],
      "description": "The margin-inline CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
    },
    {
      "name": "margin-trim",
      "status": "experimental",
      "syntax": "none | in-flow | all",
      "values": [
        {
          "name": "none"
        },
        {
          "name": "in-flow"
        },
        {
          "name": "all"
        }
      ],
      "relevance": 50,
      "browsers": [
        "S16.4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/margin-trim"
        }
      ],
      "description": "The margin-trim property allows the container to trim the margins of its children where they adjoin the container\u2019s edges."
    },
    {
      "name": "mask",
      "syntax": "<mask-layer>#",
      "relevance": 51,
      "browsers": [
        "E79",
        "FF2",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask"
        }
      ],
      "description": "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points."
    },
    {
      "name": "mask-border",
      "syntax": "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
      "relevance": 50,
      "browsers": [
        "E79",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border"
        }
      ],
      "description": "The mask-border CSS property lets you create a mask along the edge of an element's border.\n\nThis property is a shorthand for mask-border-source, mask-border-slice, mask-border-width, mask-border-outset, mask-border-repeat, and mask-border-mode. As with all shorthand properties, any omitted sub-values will be set to their initial value."
    },
    {
      "name": "mask-border-mode",
      "syntax": "luminance | alpha",
      "values": [
        {
          "name": "luminance"
        },
        {
          "name": "alpha"
        }
      ],
      "relevance": 50,
      "description": "The mask-border-mode CSS property specifies the blending mode used in a mask border."
    },
    {
      "name": "mask-border-outset",
      "syntax": "[ <length> | <number> ]{1,4}",
      "relevance": 50,
      "browsers": [
        "E79",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-outset"
        }
      ],
      "description": "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box."
    },
    {
      "name": "mask-border-repeat",
      "syntax": "[ stretch | repeat | round | space ]{1,2}",
      "relevance": 50,
      "browsers": [
        "E79",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat"
        }
      ],
      "description": "The mask-border-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border."
    },
    {
      "name": "mask-border-slice",
      "syntax": "<number-percentage>{1,4} fill?",
      "relevance": 50,
      "browsers": [
        "E79",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-slice"
        }
      ],
      "description": "The mask-border-slice CSS property divides the image specified by mask-border-source into regions. These regions are used to form the components of an element's mask border."
    },
    {
      "name": "mask-border-source",
      "syntax": "none | <image>",
      "relevance": 50,
      "browsers": [
        "E79",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-source"
        }
      ],
      "description": "The mask-border-source CSS property specifies the source image used to create an element's mask border.\n\nThe mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border."
    },
    {
      "name": "mask-border-width",
      "syntax": "[ <length-percentage> | <number> | auto ]{1,4}",
      "relevance": 50,
      "browsers": [
        "E79",
        "S3.1",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-width"
        }
      ],
      "description": "The mask-border-width CSS property specifies the width of an element's mask border."
    },
    {
      "name": "mask-clip",
      "syntax": "[ <geometry-box> | no-clip ]#",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF53",
        "S15.4",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-clip"
        }
      ],
      "description": "The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area."
    },
    {
      "name": "mask-composite",
      "syntax": "<compositing-operator>#",
      "relevance": 50,
      "browsers": [
        "E18",
        "FF53",
        "S15.4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/mask-composite"
        }
      ],
      "description": "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it."
    },
    {
      "name": "masonry-auto-flow",
      "status": "experimental",
      "syntax": "[ pack | next ] || [ definite-first | ordered ]",
      "relevance": 50,
      "browsers": [
        "Spreview"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow"
        }
      ],
      "description": "The masonry-auto-flow CSS property modifies how items are placed when using masonry in CSS Grid Layout."
    },
    {
      "name": "math-depth",
      "syntax": "auto-add | add(<integer>) | <integer>",
      "relevance": 50,
      "browsers": [
        "E109",
        "FF117",
        "C109",
        "O95"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/math-depth"
        }
      ],
      "description": 'Describe a notion of "depth" for each element of a mathematical formula, with respect to the top-level container of that formula.'
    },
    {
      "name": "math-shift",
      "syntax": "normal | compact",
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "compact"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E109",
        "C109",
        "O95"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/math-shift"
        }
      ],
      "description": "Used for positioning superscript during the layout of MathML scripted elements."
    },
    {
      "name": "math-style",
      "syntax": "normal | compact",
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "compact"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E109",
        "FF117",
        "S14.1",
        "C109",
        "O95"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/math-style"
        }
      ],
      "description": "The math-style property indicates whether MathML equations should render with normal or compact height."
    },
    {
      "name": "max-lines",
      "status": "experimental",
      "syntax": "none | <integer>",
      "relevance": 50,
      "description": "The max-lines property forces a break after a set number of lines"
    },
    {
      "name": "offset",
      "syntax": "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF72",
        "S16",
        "C55",
        "O42"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/offset"
        }
      ],
      "description": "The offset CSS property is a shorthand property for animating an element along a defined path."
    },
    {
      "name": "offset-anchor",
      "syntax": "auto | <position>",
      "relevance": 50,
      "browsers": [
        "FF72",
        "Spreview"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/offset-anchor"
        }
      ],
      "description": "Defines an anchor point of the box positioned along the path. The anchor point specifies the point of the box which is to be considered as the point that is moved along the path."
    },
    {
      "name": "offset-distance",
      "syntax": "<length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF72",
        "Spreview",
        "C55",
        "O42"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/offset-distance"
        }
      ],
      "description": "The offset-distance CSS property specifies a position along an offset-path."
    },
    {
      "name": "offset-path",
      "syntax": "none | <offset-path> || <coord-box>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF72",
        "S15.4",
        "C55",
        "O45"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/offset-path"
        }
      ],
      "description": 'The offset-path CSS property specifies the offset path where the element gets positioned. The exact element\u2019s position on the offset path is determined by the offset-distance property. An offset path is either a specified path with one or multiple sub-paths or the geometry of a not-styled basic shape. Each shape or path must define an initial position for the computed value of "0" for offset-distance and an initial direction which specifies the rotation of the object to the initial position.\n\nIn this specification, a direction (or rotation) of 0 degrees is equivalent to the direction of the positive x-axis in the object\u2019s local coordinate system. In other words, a rotation of 0 degree points to the right side of the UA if the object and its ancestors have no transformation applied.'
    },
    {
      "name": "offset-position",
      "status": "experimental",
      "syntax": "normal | auto | <position>",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF116",
        "Spreview",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/offset-position"
        }
      ],
      "description": "Specifies the initial position of the offset path. If position is specified with static, offset-position would be ignored."
    },
    {
      "name": "offset-rotate",
      "syntax": "[ auto | reverse ] || <angle>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF72",
        "Spreview",
        "C56",
        "O43"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/offset-rotate"
        }
      ],
      "description": "The offset-rotate CSS property defines the direction of the element while positioning along the offset path."
    },
    {
      "name": "overflow-anchor",
      "syntax": "auto | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 52,
      "browsers": [
        "E79",
        "FF66",
        "C56",
        "O43"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-anchor"
        }
      ],
      "description": "The overflow-anchor CSS property provides a way to opt out browser scroll anchoring behavior which adjusts scroll position to minimize content shifts."
    },
    {
      "name": "overflow-block",
      "syntax": "visible | hidden | clip | scroll | auto",
      "values": [
        {
          "name": "visible"
        },
        {
          "name": "hidden"
        },
        {
          "name": "clip"
        },
        {
          "name": "scroll"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "browsers": [
        "FF69"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-block"
        }
      ],
      "description": "The overflow-block CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis."
    },
    {
      "name": "overflow-clip-box",
      "status": "nonstandard",
      "syntax": "padding-box | content-box",
      "values": [
        {
          "name": "padding-box"
        },
        {
          "name": "content-box"
        }
      ],
      "relevance": 0,
      "description": "The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the overflow-clip-box-inline and overflow-clip-box-block properties."
    },
    {
      "name": "overflow-clip-margin",
      "syntax": "<visual-box> || <length [0,\u221E]>",
      "relevance": 50,
      "browsers": [
        "E90",
        "FF102",
        "C90",
        "O76"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin"
        }
      ],
      "description": "The overflow-clip-margin CSS property determines how far outside its bounds an element with overflow: clip may be painted before being clipped."
    },
    {
      "name": "overflow-inline",
      "syntax": "visible | hidden | clip | scroll | auto",
      "values": [
        {
          "name": "visible"
        },
        {
          "name": "hidden"
        },
        {
          "name": "clip"
        },
        {
          "name": "scroll"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "browsers": [
        "FF69"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-inline"
        }
      ],
      "description": "The overflow-inline CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the inline axis."
    },
    {
      "name": "overscroll-behavior",
      "syntax": "[ contain | none | auto ]{1,2}",
      "relevance": 50,
      "browsers": [
        "E18",
        "FF59",
        "S16",
        "C63",
        "O50"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior"
        }
      ],
      "description": "The overscroll-behavior CSS property is shorthand for the overscroll-behavior-x and overscroll-behavior-y properties, which allow you to control the browser's scroll overflow behavior \u2014 what happens when the boundary of a scrolling area is reached."
    },
    {
      "name": "overscroll-behavior-block",
      "syntax": "contain | none | auto",
      "values": [
        {
          "name": "contain"
        },
        {
          "name": "none"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E79",
        "FF73",
        "S16",
        "C77",
        "O64"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block"
        }
      ],
      "description": "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached."
    },
    {
      "name": "overscroll-behavior-inline",
      "syntax": "contain | none | auto",
      "values": [
        {
          "name": "contain"
        },
        {
          "name": "none"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E79",
        "FF73",
        "S16",
        "C77",
        "O64"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline"
        }
      ],
      "description": "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached."
    },
    {
      "name": "overscroll-behavior-x",
      "syntax": "contain | none | auto",
      "values": [
        {
          "name": "contain"
        },
        {
          "name": "none"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E18",
        "FF59",
        "S16",
        "C63",
        "O50"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x"
        }
      ],
      "description": "The overscroll-behavior-x CSS property is allows you to control the browser's scroll overflow behavior \u2014 what happens when the boundary of a scrolling area is reached \u2014 in the x axis direction."
    },
    {
      "name": "overscroll-behavior-y",
      "syntax": "contain | none | auto",
      "values": [
        {
          "name": "contain"
        },
        {
          "name": "none"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E18",
        "FF59",
        "S16",
        "C63",
        "O50"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y"
        }
      ],
      "description": "The overscroll-behavior-y CSS property is allows you to control the browser's scroll overflow behavior \u2014 what happens when the boundary of a scrolling area is reached \u2014 in the y axis direction."
    },
    {
      "name": "padding-block",
      "syntax": "<'padding-left'>{1,2}",
      "relevance": 53,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block"
        }
      ],
      "description": "The padding-block CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
    },
    {
      "name": "padding-inline",
      "syntax": "<'padding-left'>{1,2}",
      "relevance": 54,
      "browsers": [
        "E87",
        "FF66",
        "S14.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline"
        }
      ],
      "description": "The padding-inline CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
    },
    {
      "name": "page",
      "syntax": "auto | <custom-ident>",
      "relevance": 50,
      "browsers": [
        "E85",
        "FF110",
        "S\u226413.1",
        "C85",
        "O71"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/page"
        }
      ],
      "description": "The page CSS property is used to specify the named page, a specific type of page defined by the @page at-rule."
    },
    {
      "name": "place-content",
      "syntax": "<'align-content'> <'justify-content'>?",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF45",
        "S9",
        "C59",
        "O46"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/place-content"
        }
      ],
      "description": "The place-content CSS shorthand property sets both the align-content and justify-content properties."
    },
    {
      "name": "place-items",
      "syntax": "<'align-items'> <'justify-items'>?",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF45",
        "S11",
        "C59",
        "O46"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/place-items"
        }
      ],
      "description": "The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it."
    },
    {
      "name": "place-self",
      "syntax": "<'align-self'> <'justify-self'>?",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF45",
        "S11",
        "C59",
        "O46"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/place-self"
        }
      ],
      "description": "The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it."
    },
    {
      "name": "print-color-adjust",
      "syntax": "economy | exact",
      "values": [
        {
          "name": "economy"
        },
        {
          "name": "exact"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E79",
        "FF97",
        "S15.4",
        "C17",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/print-color-adjust"
        }
      ],
      "description": "Defines what optimization the user agent is allowed to do when adjusting the appearance for an output device."
    },
    {
      "name": "rotate",
      "syntax": "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
      "relevance": 50,
      "browsers": [
        "E104",
        "FF72",
        "S14.1",
        "C104",
        "O90"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/rotate"
        }
      ],
      "description": "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    {
      "name": "row-gap",
      "syntax": "normal | <length-percentage>",
      "relevance": 55,
      "browsers": [
        "E16",
        "FF52",
        "S10.1",
        "C47",
        "O34"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/row-gap"
        }
      ],
      "description": "The row-gap CSS property specifies the gutter between grid rows."
    },
    {
      "name": "ruby-merge",
      "status": "experimental",
      "syntax": "separate | collapse | auto",
      "values": [
        {
          "name": "separate"
        },
        {
          "name": "collapse"
        },
        {
          "name": "auto"
        }
      ],
      "relevance": 50,
      "description": "This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be collapsed and rendered as a group, or the separation should be determined based on the space available."
    },
    {
      "name": "scale",
      "syntax": "none | <number>{1,3}",
      "relevance": 50,
      "browsers": [
        "E104",
        "FF72",
        "S14.1",
        "C104",
        "O90"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scale"
        }
      ],
      "description": "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    {
      "name": "scrollbar-color",
      "syntax": "auto | <color>{2}",
      "relevance": 50,
      "browsers": [
        "E118",
        "FF64",
        "C118"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-color"
        }
      ],
      "description": "The scrollbar-color CSS property sets the color of the scrollbar track and thumb."
    },
    {
      "name": "scrollbar-gutter",
      "syntax": "auto | stable && both-edges?",
      "relevance": 50,
      "browsers": [
        "E94",
        "FF97",
        "C94",
        "O80"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter"
        }
      ],
      "description": "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed."
    },
    {
      "name": "scrollbar-width",
      "syntax": "auto | thin | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "thin"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E115",
        "FF64",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-width"
        }
      ],
      "description": "The scrollbar-width property allows the author to set the maximum thickness of an element\u2019s scrollbars when they are shown. "
    },
    {
      "name": "scroll-margin",
      "syntax": "<length>{1,4}",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF90",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin"
        }
      ],
      "description": "The scroll-margin property is a shorthand property which sets all of the scroll-margin longhands, assigning values much like the margin property does for the margin-* longhands."
    },
    {
      "name": "scroll-margin-block",
      "syntax": "<length>{1,2}",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block"
        }
      ],
      "description": "The scroll-margin-block property is a shorthand property which sets the scroll-margin longhands in the block dimension."
    },
    {
      "name": "scroll-margin-block-start",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start"
        }
      ],
      "description": "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-block-end",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end"
        }
      ],
      "description": "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-bottom",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom"
        }
      ],
      "description": "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-inline",
      "syntax": "<length>{1,2}",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline"
        }
      ],
      "description": "The scroll-margin-inline property is a shorthand property which sets the scroll-margin longhands in the inline dimension."
    },
    {
      "name": "scroll-margin-inline-start",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start"
        }
      ],
      "description": "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-inline-end",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end"
        }
      ],
      "description": "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-left",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left"
        }
      ],
      "description": "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-right",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right"
        }
      ],
      "description": "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-margin-top",
      "syntax": "<length>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top"
        }
      ],
      "description": "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container\u2019s coordinate space), then adding the specified outsets."
    },
    {
      "name": "scroll-padding",
      "syntax": "[ auto | <length-percentage> ]{1,4}",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding"
        }
      ],
      "description": "The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands."
    },
    {
      "name": "scroll-padding-block",
      "syntax": "[ auto | <length-percentage> ]{1,2}",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block"
        }
      ],
      "description": "The scroll-padding-block property is a shorthand property which sets the scroll-padding longhands for the block dimension."
    },
    {
      "name": "scroll-padding-block-start",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start"
        }
      ],
      "description": "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-block-end",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end"
        }
      ],
      "description": "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-bottom",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom"
        }
      ],
      "description": "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-inline",
      "syntax": "[ auto | <length-percentage> ]{1,2}",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline"
        }
      ],
      "description": "The scroll-padding-inline property is a shorthand property which sets the scroll-padding longhands for the inline dimension."
    },
    {
      "name": "scroll-padding-inline-start",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start"
        }
      ],
      "description": "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-inline-end",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S15",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end"
        }
      ],
      "description": "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-left",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left"
        }
      ],
      "description": "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-right",
      "syntax": "auto | <length-percentage>",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right"
        }
      ],
      "description": "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-padding-top",
      "syntax": "auto | <length-percentage>",
      "relevance": 51,
      "browsers": [
        "E79",
        "FF68",
        "S14.1",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top"
        }
      ],
      "description": "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
    },
    {
      "name": "scroll-snap-align",
      "syntax": "[ none | start | end | center ]{1,2}",
      "relevance": 53,
      "browsers": [
        "E79",
        "FF68",
        "S11",
        "C69",
        "O56"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align"
        }
      ],
      "description": "The scroll-snap-align property specifies the box\u2019s snap position as an alignment of its snap area (as the alignment subject) within its snap container\u2019s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value."
    },
    {
      "name": "scroll-snap-stop",
      "syntax": "normal | always",
      "values": [
        {
          "name": "normal"
        },
        {
          "name": "always"
        }
      ],
      "relevance": 51,
      "browsers": [
        "E79",
        "FF103",
        "S15",
        "C75",
        "O62"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop"
        }
      ],
      "description": 'The scroll-snap-stop CSS property defines whether the scroll container is allowed to "pass over" possible snap positions.'
    },
    {
      "name": "scroll-snap-type-x",
      "status": "obsolete",
      "syntax": "none | mandatory | proximity",
      "values": [
        {
          "name": "none"
        },
        {
          "name": "mandatory"
        },
        {
          "name": "proximity"
        }
      ],
      "relevance": 0,
      "description": "The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent."
    },
    {
      "name": "scroll-snap-type-y",
      "status": "obsolete",
      "syntax": "none | mandatory | proximity",
      "values": [
        {
          "name": "none"
        },
        {
          "name": "mandatory"
        },
        {
          "name": "proximity"
        }
      ],
      "relevance": 0,
      "description": "The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent."
    },
    {
      "name": "scroll-timeline",
      "status": "experimental",
      "syntax": "[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF111",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline"
        }
      ],
      "description": "Defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline."
    },
    {
      "name": "scroll-timeline-axis",
      "status": "experimental",
      "syntax": "[ block | inline | x | y ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF111",
        "C115",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis"
        }
      ],
      "description": "Specifies the scrollbar that will be used to provide the timeline for a scroll-timeline animation"
    },
    {
      "name": "scroll-timeline-name",
      "status": "experimental",
      "syntax": "none | <dashed-ident>#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF111",
        "C115",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name"
        }
      ],
      "description": "Defines a name that can be used to identify an element as the source of a scroll-timeline."
    },
    {
      "name": "text-combine-upright",
      "syntax": "none | all | [ digits <integer>? ]",
      "relevance": 50,
      "browsers": [
        "E79",
        "FF48",
        "S15.4",
        "C48",
        "IE11",
        "O35"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-combine-upright"
        }
      ],
      "description": "The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n\nThis is used to produce an effect that is known as tate-ch\u016B-yoko (\u7E26\u4E2D\u6A2A) in Japanese, or as \u76F4\u66F8\u6A6B\u5411 in Chinese."
    },
    {
      "name": "text-decoration-skip",
      "status": "experimental",
      "syntax": "none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]",
      "relevance": 52,
      "browsers": [
        "S12.1",
        "C57",
        "O44"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip"
        }
      ],
      "description": "The text-decoration-skip CSS property specifies what parts of the element\u2019s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors."
    },
    {
      "name": "text-decoration-skip-ink",
      "syntax": "auto | all | none",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "all"
        },
        {
          "name": "none"
        }
      ],
      "relevance": 51,
      "browsers": [
        "E79",
        "FF70",
        "S15.4",
        "C64",
        "O50"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink"
        }
      ],
      "description": "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders."
    },
    {
      "name": "text-decoration-thickness",
      "syntax": "auto | from-font | <length> | <percentage> ",
      "relevance": 50,
      "browsers": [
        "E89",
        "FF70",
        "S12.1",
        "C89",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness"
        }
      ],
      "description": "The text-decoration-thickness CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline."
    },
    {
      "name": "text-emphasis",
      "syntax": "<'text-emphasis-style'> || <'text-emphasis-color'>",
      "relevance": 50,
      "browsers": [
        "E99",
        "FF46",
        "S7",
        "C99",
        "O85"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis"
        }
      ],
      "description": "The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element's text, except separator characters, like spaces,  and control characters."
    },
    {
      "name": "text-emphasis-color",
      "syntax": "<color>",
      "relevance": 50,
      "browsers": [
        "E99",
        "FF46",
        "S7",
        "C99",
        "O85"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color"
        }
      ],
      "description": "The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand."
    },
    {
      "name": "text-emphasis-position",
      "syntax": "[ over | under ] && [ right | left ]",
      "relevance": 50,
      "browsers": [
        "E99",
        "FF46",
        "S7",
        "C99",
        "O85"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position"
        }
      ],
      "description": "The text-emphasis-position CSS property describes where emphasis marks are drawn at. The effect of emphasis marks on the line height is the same as for ruby text: if there isn't enough place, the line height is increased."
    },
    {
      "name": "text-emphasis-style",
      "syntax": "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
      "relevance": 50,
      "browsers": [
        "E99",
        "FF46",
        "S7",
        "C99",
        "O85"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style"
        }
      ],
      "description": "The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand."
    },
    {
      "name": "text-size-adjust",
      "status": "experimental",
      "syntax": "none | auto | <percentage>",
      "relevance": 58,
      "browsers": [
        "E79",
        "C54",
        "O41"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-size-adjust"
        }
      ],
      "description": "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property."
    },
    {
      "name": "text-underline-offset",
      "syntax": "auto | <length> | <percentage> ",
      "relevance": 51,
      "browsers": [
        "E87",
        "FF70",
        "S12.1",
        "C87",
        "O73"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-underline-offset"
        }
      ],
      "description": "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position."
    },
    {
      "name": "text-wrap",
      "syntax": "wrap | nowrap | balance | stable | pretty",
      "values": [
        {
          "name": "wrap"
        },
        {
          "name": "nowrap"
        },
        {
          "name": "balance"
        },
        {
          "name": "stable"
        },
        {
          "name": "pretty"
        }
      ],
      "relevance": 53,
      "browsers": [
        "E114",
        "C114"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/text-wrap"
        }
      ],
      "description": "The text-wrap CSS property controls how text inside an element is wrapped."
    },
    {
      "name": "timeline-scope",
      "status": "experimental",
      "syntax": "none | <dashed-ident>#",
      "relevance": 50,
      "browsers": [
        "E116",
        "C116"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/timeline-scope"
        }
      ],
      "description": "The timeline-scope CSS property modifies the scope of a named animation timeline."
    },
    {
      "name": "transform-box",
      "syntax": "content-box | border-box | fill-box | stroke-box | view-box",
      "values": [
        {
          "name": "content-box"
        },
        {
          "name": "border-box"
        },
        {
          "name": "fill-box"
        },
        {
          "name": "stroke-box"
        },
        {
          "name": "view-box"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E79",
        "FF55",
        "S11",
        "C64",
        "O51"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/transform-box"
        }
      ],
      "description": "The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate."
    },
    {
      "name": "translate",
      "syntax": "none | <length-percentage> [ <length-percentage> <length>? ]?",
      "relevance": 50,
      "browsers": [
        "E104",
        "FF72",
        "S14.1",
        "C104",
        "O90"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/translate"
        }
      ],
      "description": "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
    },
    {
      "name": "view-timeline",
      "status": "experimental",
      "syntax": "[ <'view-timeline-name'> <'view-timeline-axis'>? ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF114",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline"
        }
      ],
      "description": "The view-timeline CSS shorthand property is used to define a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
    },
    {
      "name": "view-timeline-axis",
      "status": "experimental",
      "syntax": "[ block | inline | x | y ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF114",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis"
        }
      ],
      "description": "The view-timeline-axis CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a named view progress timeline animation, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline-axis is set on the subject. See CSS scroll-driven animations for more details."
    },
    {
      "name": "view-timeline-inset",
      "status": "experimental",
      "syntax": "[ [ auto | <length-percentage> ]{1,2} ]#",
      "relevance": 50,
      "browsers": [
        "E115",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset"
        }
      ],
      "description": "The view-timeline-inset CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a named view progress timeline animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline."
    },
    {
      "name": "view-timeline-name",
      "status": "experimental",
      "syntax": "none | <dashed-ident>#",
      "relevance": 50,
      "browsers": [
        "E115",
        "FF111",
        "C115"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline-name"
        }
      ],
      "description": "The view-timeline-name CSS property is used to define the name of a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
    },
    {
      "name": "view-transition-name",
      "status": "experimental",
      "syntax": "none | <custom-ident>",
      "relevance": 50,
      "browsers": [
        "E111",
        "C111",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/view-transition-name"
        }
      ],
      "description": "The view-transition-name CSS property provides the selected element with a distinct identifying name (a custom-ident) and causes it to participate in a separate view transition from the root view transition \u2014 or no view transition if the none value is specified."
    },
    {
      "name": "white-space",
      "syntax": "normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]",
      "relevance": 89,
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/white-space"
        }
      ],
      "description": "Specifies how whitespace is handled in an element."
    },
    {
      "name": "white-space-collapse",
      "syntax": "collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces",
      "values": [
        {
          "name": "collapse"
        },
        {
          "name": "discard"
        },
        {
          "name": "preserve"
        },
        {
          "name": "preserve-breaks"
        },
        {
          "name": "preserve-spaces"
        },
        {
          "name": "break-spaces"
        }
      ],
      "relevance": 50,
      "browsers": [
        "E114",
        "C114"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/white-space-collapse"
        }
      ],
      "description": "The white-space-collapse CSS property controls how white space inside an element is collapsed."
    },
    {
      "name": "white-space-trim",
      "syntax": "none | discard-before || discard-after || discard-inner",
      "relevance": 50,
      "description": ""
    },
    {
      "name": "speak-as",
      "atRule": "@counter-style",
      "syntax": "auto | bullets | numbers | words | spell-out | <counter-style-name>",
      "relevance": 50,
      "description": "The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue."
    },
    {
      "name": "base-palette",
      "atRule": "@font-palette-values",
      "syntax": "light | dark | <integer [0,\u221E]>",
      "relevance": 50,
      "description": "The base-palette CSS descriptor is used to specify the name or index of a pre-defined palette to be used for creating a new palette. If the specified base-palette does not exist, then the palette defined at index 0 will be used."
    },
    {
      "name": "override-colors",
      "atRule": "@font-palette-values",
      "syntax": "[ <integer [0,\u221E]> <absolute-color-base> ]#",
      "relevance": 50,
      "description": "The override-colors CSS descriptor is used to override colors in the chosen base-palette for a color font."
    },
    {
      "name": "ascent-override",
      "atRule": "@font-face",
      "status": "experimental",
      "syntax": "normal | <percentage>",
      "relevance": 50,
      "description": "Describes the ascent metric of a font."
    },
    {
      "name": "descent-override",
      "atRule": "@font-face",
      "status": "experimental",
      "syntax": "normal | <percentage>",
      "relevance": 50,
      "description": "Describes the descent metric of a font."
    },
    {
      "name": "font-display",
      "atRule": "@font-face",
      "status": "experimental",
      "syntax": "[ auto | block | swap | fallback | optional ]",
      "relevance": 72,
      "description": "The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use."
    },
    {
      "name": "line-gap-override",
      "atRule": "@font-face",
      "status": "experimental",
      "syntax": "normal | <percentage>",
      "relevance": 50,
      "description": "Describes the line-gap metric of a font."
    },
    {
      "name": "size-adjust",
      "atRule": "@font-face",
      "status": "experimental",
      "syntax": "<percentage>",
      "relevance": 50,
      "description": "A multiplier for glyph outlines and metrics of a font."
    },
    {
      "name": "bleed",
      "atRule": "@page",
      "syntax": "auto | <length>",
      "relevance": 50,
      "description": "The bleed CSS at-rule descriptor, used with the @page at-rule, specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property."
    },
    {
      "name": "marks",
      "atRule": "@page",
      "syntax": "none | [ crop || cross ]",
      "relevance": 50,
      "description": "The marks CSS at-rule descriptor, used with the @page at-rule, adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets."
    },
    {
      "name": "page-orientation",
      "atRule": "@page",
      "syntax": "upright | rotate-left | rotate-right ",
      "relevance": 50,
      "description": "The page-orientation CSS descriptor for the @page at-rule controls the rotation of a printed page. It handles the flow of content across pages when the orientation of a page is changed. This behavior differs from the size descriptor in that a user can define the direction in which to rotate the page."
    },
    {
      "name": "syntax",
      "atRule": "@property",
      "status": "experimental",
      "syntax": "<string>",
      "relevance": 50,
      "description": "Specifies the syntax of the custom property registration represented by the @property rule, controlling how the property\u2019s value is parsed at computed value time."
    },
    {
      "name": "inherits",
      "atRule": "@property",
      "status": "experimental",
      "syntax": "true | false",
      "values": [
        {
          "name": "true"
        },
        {
          "name": "false"
        }
      ],
      "relevance": 50,
      "description": "Specifies the inherit flag of the custom property registration represented by the @property rule, controlling whether or not the property inherits by default."
    },
    {
      "name": "initial-value",
      "atRule": "@property",
      "status": "experimental",
      "syntax": "<string>",
      "relevance": 50,
      "description": "Specifies the initial value of the custom property registration represented by the @property rule, controlling the property\u2019s initial value."
    },
    {
      "name": "max-zoom",
      "atRule": "@viewport",
      "syntax": "auto | <number> | <percentage>",
      "relevance": 50,
      "description": "The max-zoom CSS descriptor sets the maximum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom in any further than this, whether automatically or at the user's request.\n\nA zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out."
    },
    {
      "name": "min-zoom",
      "atRule": "@viewport",
      "syntax": "auto | <number> | <percentage>",
      "relevance": 50,
      "description": "The min-zoom CSS descriptor sets the minimum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom out any further than this, whether automatically or at the user's request.\n\nA zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out."
    },
    {
      "name": "orientation",
      "atRule": "@viewport",
      "syntax": "auto | portrait | landscape",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "portrait"
        },
        {
          "name": "landscape"
        }
      ],
      "relevance": 50,
      "description": "The orientation CSS @media media feature can be used to apply styles based on the orientation of the viewport (or the page box, for paged media)."
    },
    {
      "name": "user-zoom",
      "atRule": "@viewport",
      "syntax": "zoom | fixed",
      "values": [
        {
          "name": "zoom"
        },
        {
          "name": "fixed"
        }
      ],
      "relevance": 50,
      "description": "The user-zoom CSS descriptor controls whether or not the user can change the zoom factor of a document defined by @viewport."
    },
    {
      "name": "viewport-fit",
      "atRule": "@viewport",
      "syntax": "auto | contain | cover",
      "values": [
        {
          "name": "auto"
        },
        {
          "name": "contain"
        },
        {
          "name": "cover"
        }
      ],
      "relevance": 50,
      "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation."
    }
  ],
  "atDirectives": [
    {
      "name": "@charset",
      "browsers": [
        "E12",
        "FF1.5",
        "S4",
        "C2",
        "IE5.5",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@charset"
        }
      ],
      "description": "Defines character set of the document."
    },
    {
      "name": "@counter-style",
      "browsers": [
        "E91",
        "FF33",
        "S17",
        "C91",
        "O77"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@counter-style"
        }
      ],
      "description": "Defines a custom counter style."
    },
    {
      "name": "@font-face",
      "browsers": [
        "E12",
        "FF3.5",
        "S3.1",
        "C1",
        "IE4",
        "O10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@font-face"
        }
      ],
      "description": "Allows for linking to fonts that are automatically activated when needed. This permits authors to work around the limitation of 'web-safe' fonts, allowing for consistent rendering independent of the fonts available in a given user's environment."
    },
    {
      "name": "@font-feature-values",
      "browsers": [
        "FF34",
        "S9.1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@font-feature-values"
        }
      ],
      "description": "Defines named values for the indices used to select alternate glyphs for a given font family."
    },
    {
      "name": "@import",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE5.5",
        "O3.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@import"
        }
      ],
      "description": "Includes content of another file."
    },
    {
      "name": "@keyframes",
      "browsers": [
        "E12",
        "FF16",
        "S9",
        "C43",
        "IE10",
        "O30"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@keyframes"
        }
      ],
      "description": "Defines set of animation key frames."
    },
    {
      "name": "@layer",
      "browsers": [
        "E99",
        "FF97",
        "S15.4",
        "C99",
        "O85"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@layer"
        }
      ],
      "description": "Declare a cascade layer and the order of precedence in case of multiple cascade layers."
    },
    {
      "name": "@media",
      "browsers": [
        "E12",
        "FF1",
        "S3",
        "C1",
        "IE6",
        "O9.2"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@media"
        }
      ],
      "description": "Defines a stylesheet for a particular media type."
    },
    {
      "name": "@-moz-document",
      "browsers": [
        "FF1.8"
      ],
      "description": "Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document."
    },
    {
      "name": "@-moz-keyframes",
      "browsers": [
        "FF5"
      ],
      "description": "Defines set of animation key frames."
    },
    {
      "name": "@-ms-viewport",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Specifies the size, zoom factor, and orientation of the viewport."
    },
    {
      "name": "@namespace",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE9",
        "O8"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@namespace"
        }
      ],
      "description": "Declares a prefix and associates it with a namespace name."
    },
    {
      "name": "@-o-keyframes",
      "browsers": [
        "O12"
      ],
      "description": "Defines set of animation key frames."
    },
    {
      "name": "@-o-viewport",
      "browsers": [
        "O11"
      ],
      "description": "Specifies the size, zoom factor, and orientation of the viewport."
    },
    {
      "name": "@page",
      "browsers": [
        "E12",
        "FF19",
        "S\u226413.1",
        "C2",
        "IE8",
        "O6"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@page"
        }
      ],
      "description": "Directive defines various page parameters."
    },
    {
      "name": "@property",
      "browsers": [
        "E85",
        "FFpreview",
        "S16.4",
        "C85",
        "O71"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@property"
        }
      ],
      "description": "Describes the aspect of custom properties and variables."
    },
    {
      "name": "@supports",
      "browsers": [
        "E12",
        "FF22",
        "S9",
        "C28",
        "O12.1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/@supports"
        }
      ],
      "description": "A conditional group rule whose condition tests whether the user agent supports CSS property:value pairs."
    },
    {
      "name": "@-webkit-keyframes",
      "browsers": [
        "C",
        "S4"
      ],
      "description": "Defines set of animation key frames."
    }
  ],
  "pseudoClasses": [
    {
      "name": ":active",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:active"
        }
      ],
      "description": "Applies while an element is being activated by the user. For example, between the times the user presses the mouse button and releases it."
    },
    {
      "name": ":any-link",
      "browsers": [
        "E79",
        "FF50",
        "S9",
        "C65",
        "O52"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:any-link"
        }
      ],
      "description": "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links."
    },
    {
      "name": ":checked",
      "browsers": [
        "E12",
        "FF1",
        "S3.1",
        "C1",
        "IE9",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:checked"
        }
      ],
      "description": "Radio and checkbox elements can be toggled by the user. Some menu items are 'checked' when the user selects them. When such elements are toggled 'on' the :checked pseudo-class applies."
    },
    {
      "name": ":corner-present",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Indicates whether or not a scrollbar corner is present."
    },
    {
      "name": ":decrement",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will decrement the view's position when used."
    },
    {
      "name": ":default",
      "browsers": [
        "E79",
        "FF4",
        "S5",
        "C10",
        "O10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:default"
        }
      ],
      "description": "Applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons, and select lists/menus."
    },
    {
      "name": ":disabled",
      "browsers": [
        "E12",
        "FF1",
        "S3.1",
        "C1",
        "IE9",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:disabled"
        }
      ],
      "description": "Represents user interface elements that are in a disabled state; such elements have a corresponding enabled state."
    },
    {
      "name": ":double-button",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed together at the same end of the scrollbar."
    },
    {
      "name": ":empty",
      "browsers": [
        "E12",
        "FF1",
        "S3.1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:empty"
        }
      ],
      "description": "Represents an element that has no children at all."
    },
    {
      "name": ":enabled",
      "browsers": [
        "E12",
        "FF1",
        "S3.1",
        "C1",
        "IE9",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:enabled"
        }
      ],
      "description": "Represents user interface elements that are in an enabled state; such elements have a corresponding disabled state."
    },
    {
      "name": ":end",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed after the thumb."
    },
    {
      "name": ":first",
      "browsers": [
        "E12",
        "S6",
        "C18",
        "IE8",
        "O9.2"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:first"
        }
      ],
      "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
    },
    {
      "name": ":first-child",
      "browsers": [
        "E12",
        "FF3",
        "S3.1",
        "C4",
        "IE7",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:first-child"
        }
      ],
      "description": "Same as :nth-child(1). Represents an element that is the first child of some other element."
    },
    {
      "name": ":first-of-type",
      "browsers": [
        "E12",
        "FF3.5",
        "S3.1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:first-of-type"
        }
      ],
      "description": "Same as :nth-of-type(1). Represents an element that is the first sibling of its type in the list of children of its parent element."
    },
    {
      "name": ":focus",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE8",
        "O7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:focus"
        }
      ],
      "description": "Applies while an element has the focus (accepts keyboard or mouse events, or other forms of input)."
    },
    {
      "name": ":fullscreen",
      "browsers": [
        "E12",
        "FF64",
        "S6",
        "C71",
        "IE11",
        "O58"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:fullscreen"
        }
      ],
      "description": "Matches any element that has its fullscreen flag set."
    },
    {
      "name": ":future",
      "browsers": [
        "S7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:future"
        }
      ],
      "description": "Represents any element that is defined to occur entirely after a :current element."
    },
    {
      "name": ":horizontal",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to any scrollbar pieces that have a horizontal orientation."
    },
    {
      "name": ":host",
      "browsers": [
        "E79",
        "FF63",
        "S10",
        "C54",
        "O41"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:host"
        }
      ],
      "description": "When evaluated in the context of a shadow tree, matches the shadow tree's host element."
    },
    {
      "name": ":host()",
      "browsers": [
        "C35",
        "O22"
      ],
      "description": "When evaluated in the context of a shadow tree, it matches the shadow tree's host element if the host element, in its normal context, matches the selector argument."
    },
    {
      "name": ":host-context()",
      "browsers": [
        "C35",
        "O22"
      ],
      "description": "Tests whether there is an ancestor, outside the shadow tree, which matches a particular selector."
    },
    {
      "name": ":hover",
      "browsers": [
        "E12",
        "FF1",
        "S2",
        "C1",
        "IE4",
        "O4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:hover"
        }
      ],
      "description": "Applies while the user designates an element with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element."
    },
    {
      "name": ":increment",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will increment the view's position when used."
    },
    {
      "name": ":indeterminate",
      "browsers": [
        "E12",
        "FF2",
        "S3",
        "C1",
        "IE10",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:indeterminate"
        }
      ],
      "description": "Applies to UI elements whose value is in an indeterminate state."
    },
    {
      "name": ":in-range",
      "browsers": [
        "E13",
        "FF29",
        "S5.1",
        "C10",
        "O11"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:in-range"
        }
      ],
      "description": "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes."
    },
    {
      "name": ":invalid",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C10",
        "IE10",
        "O10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:invalid"
        }
      ],
      "description": "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification."
    },
    {
      "name": ":lang()",
      "browsers": [
        "E",
        "C",
        "FF1",
        "IE8",
        "O8",
        "S3"
      ],
      "description": "Represents an element that is in language specified."
    },
    {
      "name": ":last-child",
      "browsers": [
        "E12",
        "FF1",
        "S3.1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:last-child"
        }
      ],
      "description": "Same as :nth-last-child(1). Represents an element that is the last child of some other element."
    },
    {
      "name": ":last-of-type",
      "browsers": [
        "E12",
        "FF3.5",
        "S3.1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:last-of-type"
        }
      ],
      "description": "Same as :nth-last-of-type(1). Represents an element that is the last sibling of its type in the list of children of its parent element."
    },
    {
      "name": ":left",
      "browsers": [
        "E12",
        "S5",
        "C6",
        "IE8",
        "O9.2"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:left"
        }
      ],
      "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
    },
    {
      "name": ":link",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE3",
        "O3.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:link"
        }
      ],
      "description": "Applies to links that have not yet been visited."
    },
    {
      "name": ":matches()",
      "browsers": [
        "S9"
      ],
      "description": "Takes a selector list as its argument. It represents an element that is represented by its argument."
    },
    {
      "name": ":-moz-any()",
      "browsers": [
        "FF4"
      ],
      "description": "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches()."
    },
    {
      "name": ":-moz-any-link",
      "browsers": [
        "FF1"
      ],
      "description": "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links."
    },
    {
      "name": ":-moz-broken",
      "browsers": [
        "FF3"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-broken"
        }
      ],
      "description": "Non-standard. Matches elements representing broken images."
    },
    {
      "name": ":-moz-drag-over",
      "browsers": [
        "FF1"
      ],
      "description": "Non-standard. Matches elements when a drag-over event applies to it."
    },
    {
      "name": ":-moz-first-node",
      "browsers": [
        "FF1"
      ],
      "description": "Non-standard. Represents an element that is the first child node of some other element."
    },
    {
      "name": ":-moz-focusring",
      "browsers": [
        "FF4"
      ],
      "description": "Non-standard. Matches an element that has focus and focus ring drawing is enabled in the browser."
    },
    {
      "name": ":-moz-full-screen",
      "browsers": [
        "FF9"
      ],
      "description": "Matches any element that has its fullscreen flag set. Standardized as :fullscreen."
    },
    {
      "name": ":-moz-last-node",
      "browsers": [
        "FF1"
      ],
      "description": "Non-standard. Represents an element that is the last child node of some other element."
    },
    {
      "name": ":-moz-loading",
      "browsers": [
        "FF3"
      ],
      "description": "Non-standard. Matches elements, such as images, that haven't started loading yet."
    },
    {
      "name": ":-moz-only-whitespace",
      "browsers": [
        "FF1"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-only-whitespace"
        }
      ],
      "description": "The same as :empty, except that it additionally matches elements that only contain code points affected by whitespace processing. Standardized as :blank."
    },
    {
      "name": ":-moz-placeholder",
      "browsers": [
        "FF4"
      ],
      "description": "Deprecated. Represents placeholder text in an input field. Use ::-moz-placeholder for Firefox 19+."
    },
    {
      "name": ":-moz-submit-invalid",
      "browsers": [
        "FF88"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-submit-invalid"
        }
      ],
      "description": "Non-standard. Represents any submit button when the contents of the associated form are not valid."
    },
    {
      "name": ":-moz-suppressed",
      "browsers": [
        "FF3"
      ],
      "description": "Non-standard. Matches elements representing images that have been blocked from loading."
    },
    {
      "name": ":-moz-ui-invalid",
      "browsers": [
        "FF4"
      ],
      "description": "Non-standard. Represents any validated form element whose value isn't valid "
    },
    {
      "name": ":-moz-ui-valid",
      "browsers": [
        "FF4"
      ],
      "description": "Non-standard. Represents any validated form element whose value is valid "
    },
    {
      "name": ":-moz-user-disabled",
      "browsers": [
        "FF3"
      ],
      "description": "Non-standard. Matches elements representing images that have been disabled due to the user's preferences."
    },
    {
      "name": ":-moz-window-inactive",
      "browsers": [
        "FF4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-window-inactive"
        }
      ],
      "description": "Non-standard. Matches elements in an inactive window."
    },
    {
      "name": ":-ms-fullscreen",
      "browsers": [
        "IE11"
      ],
      "description": "Matches any element that has its fullscreen flag set."
    },
    {
      "name": ":-ms-input-placeholder",
      "browsers": [
        "IE10"
      ],
      "description": "Represents placeholder text in an input field. Note: for Edge use the pseudo-element ::-ms-input-placeholder. Standardized as ::placeholder."
    },
    {
      "name": ":-ms-keyboard-active",
      "browsers": [
        "IE10"
      ],
      "description": "Windows Store apps only. Applies one or more styles to an element when it has focus and the user presses the space bar."
    },
    {
      "name": ":-ms-lang()",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents an element that is in the language specified. Accepts a comma separated list of language tokens."
    },
    {
      "name": ":no-button",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to track pieces. Applies when there is no button at that end of the track."
    },
    {
      "name": ":not()",
      "browsers": [
        "E",
        "C",
        "FF1",
        "IE9",
        "O9.5",
        "S2"
      ],
      "description": "The negation pseudo-class, :not(X), is a functional notation taking a simple selector (excluding the negation pseudo-class itself) as an argument. It represents an element that is not represented by its argument."
    },
    {
      "name": ":nth-child()",
      "browsers": [
        "E",
        "C",
        "FF3.5",
        "IE9",
        "O9.5",
        "S3.1"
      ],
      "description": "Represents an element that has an+b-1 siblings before it in the document tree, for any positive integer or zero value of n, and has a parent element."
    },
    {
      "name": ":nth-last-child()",
      "browsers": [
        "E",
        "C",
        "FF3.5",
        "IE9",
        "O9.5",
        "S3.1"
      ],
      "description": "Represents an element that has an+b-1 siblings after it in the document tree, for any positive integer or zero value of n, and has a parent element."
    },
    {
      "name": ":nth-last-of-type()",
      "browsers": [
        "E",
        "C",
        "FF3.5",
        "IE9",
        "O9.5",
        "S3.1"
      ],
      "description": "Represents an element that has an+b-1 siblings with the same expanded element name after it in the document tree, for any zero or positive integer value of n, and has a parent element."
    },
    {
      "name": ":nth-of-type()",
      "browsers": [
        "E",
        "C",
        "FF3.5",
        "IE9",
        "O9.5",
        "S3.1"
      ],
      "description": "Represents an element that has an+b-1 siblings with the same expanded element name before it in the document tree, for any zero or positive integer value of n, and has a parent element."
    },
    {
      "name": ":only-child",
      "browsers": [
        "E12",
        "FF1.5",
        "S3.1",
        "C2",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:only-child"
        }
      ],
      "description": "Represents an element that has a parent element and whose parent element has no other element children. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity."
    },
    {
      "name": ":only-of-type",
      "browsers": [
        "E12",
        "FF3.5",
        "S3.1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:only-of-type"
        }
      ],
      "description": "Matches every element that is the only child of its type, of its parent. Same as :first-of-type:last-of-type or :nth-of-type(1):nth-last-of-type(1), but with a lower specificity."
    },
    {
      "name": ":optional",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C10",
        "IE10",
        "O10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:optional"
        }
      ],
      "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional."
    },
    {
      "name": ":out-of-range",
      "browsers": [
        "E13",
        "FF29",
        "S5.1",
        "C10",
        "O11"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:out-of-range"
        }
      ],
      "description": "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes."
    },
    {
      "name": ":past",
      "browsers": [
        "S7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:past"
        }
      ],
      "description": "Represents any element that is defined to occur entirely prior to a :current element."
    },
    {
      "name": ":read-only",
      "browsers": [
        "E13",
        "FF78",
        "S4",
        "C1",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:read-only"
        }
      ],
      "description": "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only."
    },
    {
      "name": ":read-write",
      "browsers": [
        "E13",
        "FF78",
        "S4",
        "C1",
        "O9"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:read-write"
        }
      ],
      "description": "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only."
    },
    {
      "name": ":required",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C10",
        "IE10",
        "O10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:required"
        }
      ],
      "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional."
    },
    {
      "name": ":right",
      "browsers": [
        "E12",
        "S5",
        "C6",
        "IE8",
        "O9.2"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:right"
        }
      ],
      "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
    },
    {
      "name": ":root",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:root"
        }
      ],
      "description": "Represents an element that is the root of the document. In HTML 4, this is always the HTML element."
    },
    {
      "name": ":scope",
      "browsers": [
        "E79",
        "FF32",
        "S7",
        "C27",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:scope"
        }
      ],
      "description": "Represents any element that is in the contextual reference element set."
    },
    {
      "name": ":single-button",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed separately at either end of the scrollbar."
    },
    {
      "name": ":start",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed before the thumb."
    },
    {
      "name": ":target",
      "browsers": [
        "E12",
        "FF1",
        "S1.3",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:target"
        }
      ],
      "description": "Some URIs refer to a location within a resource. This kind of URI ends with a 'number sign' (#) followed by an anchor identifier (called the fragment identifier)."
    },
    {
      "name": ":valid",
      "browsers": [
        "E12",
        "FF4",
        "S5",
        "C10",
        "IE10",
        "O10"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:valid"
        }
      ],
      "description": "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification."
    },
    {
      "name": ":vertical",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Non-standard. Applies to any scrollbar pieces that have a vertical orientation."
    },
    {
      "name": ":visited",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE4",
        "O3.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:visited"
        }
      ],
      "description": "Applies once the link has been visited by the user."
    },
    {
      "name": ":-webkit-any()",
      "browsers": [
        "C",
        "S5"
      ],
      "description": "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches()."
    },
    {
      "name": ":-webkit-full-screen",
      "browsers": [
        "C",
        "S6"
      ],
      "description": "Matches any element that has its fullscreen flag set. Standardized as :fullscreen."
    },
    {
      "name": ":window-inactive",
      "browsers": [
        "C",
        "S3"
      ],
      "description": "Non-standard. Applies to all scrollbar pieces. Indicates whether or not the window containing the scrollbar is currently active."
    },
    {
      "name": ":current",
      "status": "experimental",
      "description": "The :current CSS pseudo-class selector is a time-dimensional pseudo-class that represents the element, or an ancestor of the element, that is currently being displayed"
    },
    {
      "name": ":blank",
      "status": "experimental",
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:blank"
        }
      ],
      "description": "The :blank CSS pseudo-class selects empty user input elements (eg. <input> or <textarea>)."
    },
    {
      "name": ":defined",
      "status": "experimental",
      "browsers": [
        "E79",
        "FF63",
        "S10",
        "C54",
        "O41"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:defined"
        }
      ],
      "description": "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method)."
    },
    {
      "name": ":dir",
      "browsers": [
        "FF49",
        "S16.4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:dir"
        }
      ],
      "description": "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them."
    },
    {
      "name": ":focus-visible",
      "browsers": [
        "E86",
        "FF85",
        "S15.4",
        "C86",
        "O72"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:focus-visible"
        }
      ],
      "description": "The :focus-visible pseudo-class applies while an element matches the :focus pseudo-class and the UA determines via heuristics that the focus should be made evident on the element."
    },
    {
      "name": ":focus-within",
      "browsers": [
        "E79",
        "FF52",
        "S10.1",
        "C60",
        "O47"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:focus-within"
        }
      ],
      "description": "The :focus-within pseudo-class applies to any element for which the :focus pseudo class applies as well as to an element whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :focus."
    },
    {
      "name": ":has",
      "status": "experimental",
      "browsers": [
        "E105",
        "FF103",
        "S15.4",
        "C105",
        "O91"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:has"
        }
      ],
      "description": ":The :has() CSS pseudo-class represents an element if any of the selectors passed as parameters (relative to the :scope of the given element), match at least one element."
    },
    {
      "name": ":is",
      "status": "experimental",
      "browsers": [
        "E88",
        "FF78",
        "S14",
        "C88",
        "O74"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:is"
        }
      ],
      "description": "The :is() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. This is useful for writing large selectors in a more compact form."
    },
    {
      "name": ":local-link",
      "status": "experimental",
      "description": "The :local-link CSS pseudo-class represents an link to the same document"
    },
    {
      "name": ":nth-col",
      "status": "experimental",
      "description": "The :nth-col() CSS pseudo-class is designed for tables and grids. It accepts the An+B notation such as used with the :nth-child selector, using this to target every nth column. "
    },
    {
      "name": ":nth-last-col",
      "status": "experimental",
      "description": "The :nth-last-col() CSS pseudo-class is designed for tables and grids. It accepts the An+B notation such as used with the :nth-child selector, using this to target every nth column before it, therefore counting back from the end of the set of columns."
    },
    {
      "name": ":paused",
      "status": "experimental",
      "browsers": [
        "S15.4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:paused"
        }
      ],
      "description": "The :paused CSS pseudo-class selector is a resource state pseudo-class that will match an audio, video, or similar resource that is capable of being \u201Cplayed\u201D or \u201Cpaused\u201D, when that element is \u201Cpaused\u201D."
    },
    {
      "name": ":placeholder-shown",
      "status": "experimental",
      "browsers": [
        "E79",
        "FF51",
        "S9",
        "C47",
        "IE10",
        "O34"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:placeholder-shown"
        }
      ],
      "description": "The :placeholder-shown CSS pseudo-class represents any <input> or <textarea> element that is currently displaying placeholder text."
    },
    {
      "name": ":playing",
      "status": "experimental",
      "browsers": [
        "S15.4"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:playing"
        }
      ],
      "description": "The :playing CSS pseudo-class selector is a resource state pseudo-class that will match an audio, video, or similar resource that is capable of being \u201Cplayed\u201D or \u201Cpaused\u201D, when that element is \u201Cplaying\u201D. "
    },
    {
      "name": ":target-within",
      "status": "experimental",
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:target-within"
        }
      ],
      "description": "The :target-within CSS pseudo-class represents an element that is a target element or contains an element that is a target. A target element is a unique element with an id matching the URL's fragment."
    },
    {
      "name": ":user-invalid",
      "status": "experimental",
      "browsers": [
        "FF88",
        "S16.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:user-invalid"
        }
      ],
      "description": "The :user-invalid CSS pseudo-class represents any validated form element whose value isn't valid based on their validation constraints, after the user has interacted with it."
    },
    {
      "name": ":user-valid",
      "status": "experimental",
      "browsers": [
        "FF88",
        "S16.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:user-valid"
        }
      ],
      "description": "The :user-valid CSS pseudo-class represents any validated form element whose value validates correctly based on its validation constraints. However, unlike :valid it only matches once the user has interacted with it."
    },
    {
      "name": ":where",
      "status": "experimental",
      "browsers": [
        "E88",
        "FF78",
        "S14",
        "C88",
        "O74"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:where"
        }
      ],
      "description": "The :where() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list."
    },
    {
      "name": ":picture-in-picture",
      "status": "experimental",
      "browsers": [
        "E110",
        "C110",
        "O96"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/:picture-in-picture"
        }
      ],
      "description": "The :picture-in-picture CSS pseudo-class matches the element which is currently in picture-in-picture mode."
    }
  ],
  "pseudoElements": [
    {
      "name": "::after",
      "browsers": [
        "E12",
        "FF1.5",
        "S4",
        "C1",
        "IE9",
        "O7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::after"
        }
      ],
      "description": "Represents a styleable child pseudo-element immediately after the originating element's actual content."
    },
    {
      "name": "::backdrop",
      "browsers": [
        "E79",
        "FF47",
        "S15.4",
        "C37",
        "IE11",
        "O24"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::backdrop"
        }
      ],
      "description": "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen)."
    },
    {
      "name": "::before",
      "browsers": [
        "E12",
        "FF1.5",
        "S4",
        "C1",
        "IE9",
        "O7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::before"
        }
      ],
      "description": "Represents a styleable child pseudo-element immediately before the originating element's actual content."
    },
    {
      "name": "::content",
      "browsers": [
        "C35",
        "O22"
      ],
      "description": "Deprecated. Matches the distribution list itself, on elements that have one. Use ::slotted for forward compatibility."
    },
    {
      "name": "::cue",
      "browsers": [
        "E79",
        "FF55",
        "S7",
        "C26",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::cue"
        }
      ]
    },
    {
      "name": "::cue()",
      "browsers": [
        "C",
        "O16",
        "S6"
      ]
    },
    {
      "name": "::cue-region",
      "browsers": [
        "C",
        "O16",
        "S6"
      ]
    },
    {
      "name": "::cue-region()",
      "browsers": [
        "C",
        "O16",
        "S6"
      ]
    },
    {
      "name": "::first-letter",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE9",
        "O7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::first-letter"
        }
      ],
      "description": "Represents the first letter of an element, if it is not preceded by any other content (such as images or inline tables) on its line."
    },
    {
      "name": "::first-line",
      "browsers": [
        "E12",
        "FF1",
        "S1",
        "C1",
        "IE9",
        "O7"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::first-line"
        }
      ],
      "description": "Describes the contents of the first formatted line of its originating element."
    },
    {
      "name": "::-moz-focus-inner",
      "browsers": [
        "FF4"
      ]
    },
    {
      "name": "::-moz-focus-outer",
      "browsers": [
        "FF4"
      ]
    },
    {
      "name": "::-moz-list-bullet",
      "browsers": [
        "FF1"
      ],
      "description": "Used to style the bullet of a list element. Similar to the standardized ::marker."
    },
    {
      "name": "::-moz-list-number",
      "browsers": [
        "FF1"
      ],
      "description": "Used to style the numbers of a list element. Similar to the standardized ::marker."
    },
    {
      "name": "::-moz-placeholder",
      "browsers": [
        "FF19"
      ],
      "description": "Represents placeholder text in an input field"
    },
    {
      "name": "::-moz-progress-bar",
      "browsers": [
        "FF9"
      ],
      "description": "Represents the bar portion of a progress bar."
    },
    {
      "name": "::-moz-selection",
      "browsers": [
        "FF1"
      ],
      "description": "Represents the portion of a document that has been highlighted by the user."
    },
    {
      "name": "::-ms-backdrop",
      "browsers": [
        "IE11"
      ],
      "description": "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen)."
    },
    {
      "name": "::-ms-browse",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the browse button of an input type=file control."
    },
    {
      "name": "::-ms-check",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the check of a checkbox or radio button input control."
    },
    {
      "name": "::-ms-clear",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the clear button of a text input control"
    },
    {
      "name": "::-ms-expand",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the drop-down button of a select control."
    },
    {
      "name": "::-ms-fill",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the bar portion of a progress bar."
    },
    {
      "name": "::-ms-fill-lower",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the portion of the slider track from its smallest value up to the value currently selected by the thumb. In a left-to-right layout, this is the portion of the slider track to the left of the thumb."
    },
    {
      "name": "::-ms-fill-upper",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the portion of the slider track from the value currently selected by the thumb up to the slider's largest value. In a left-to-right layout, this is the portion of the slider track to the right of the thumb."
    },
    {
      "name": "::-ms-reveal",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the password reveal button of an input type=password control."
    },
    {
      "name": "::-ms-thumb",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the portion of range input control (also known as a slider control) that the user drags."
    },
    {
      "name": "::-ms-ticks-after",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the tick marks of a slider that begin just after the thumb and continue up to the slider's largest value. In a left-to-right layout, these are the ticks to the right of the thumb."
    },
    {
      "name": "::-ms-ticks-before",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the tick marks of a slider that represent its smallest values up to the value currently selected by the thumb. In a left-to-right layout, these are the ticks to the left of the thumb."
    },
    {
      "name": "::-ms-tooltip",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the tooltip of a slider (input type=range)."
    },
    {
      "name": "::-ms-track",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the track of a slider."
    },
    {
      "name": "::-ms-value",
      "browsers": [
        "E",
        "IE10"
      ],
      "description": "Represents the content of a text or password input control, or a select control."
    },
    {
      "name": "::selection",
      "browsers": [
        "E12",
        "FF62",
        "S1.1",
        "C1",
        "IE9",
        "O9.5"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::selection"
        }
      ],
      "description": "Represents the portion of a document that has been highlighted by the user."
    },
    {
      "name": "::shadow",
      "browsers": [
        "C35",
        "O22"
      ],
      "description": "Matches the shadow root if an element has a shadow tree."
    },
    {
      "name": "::-webkit-file-upload-button",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-inner-spin-button",
      "browsers": [
        "E79",
        "S5",
        "C6",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-inner-spin-button"
        }
      ]
    },
    {
      "name": "::-webkit-input-placeholder",
      "browsers": [
        "C",
        "S4"
      ]
    },
    {
      "name": "::-webkit-keygen-select",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-meter-bar",
      "browsers": [
        "E79",
        "S5.1",
        "C12",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-bar"
        }
      ]
    },
    {
      "name": "::-webkit-meter-even-less-good-value",
      "browsers": [
        "E79",
        "S5.1",
        "C12",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-even-less-good-value"
        }
      ]
    },
    {
      "name": "::-webkit-meter-optimum-value",
      "browsers": [
        "E79",
        "S5.1",
        "C12",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-optimum-value"
        }
      ]
    },
    {
      "name": "::-webkit-meter-suboptimum-value",
      "browsers": [
        "E79",
        "S5.1",
        "C12",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-suboptimum-value"
        }
      ]
    },
    {
      "name": "::-webkit-outer-spin-button",
      "browsers": [
        "S5",
        "C6"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-outer-spin-button"
        }
      ]
    },
    {
      "name": "::-webkit-progress-bar",
      "browsers": [
        "E79",
        "S7",
        "C25",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-bar"
        }
      ]
    },
    {
      "name": "::-webkit-progress-inner-element",
      "browsers": [
        "E79",
        "S7",
        "C23",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-inner-element"
        }
      ]
    },
    {
      "name": "::-webkit-progress-value",
      "browsers": [
        "E79",
        "S7",
        "C25",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-value"
        }
      ]
    },
    {
      "name": "::-webkit-resizer",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-scrollbar",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-scrollbar-button",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-scrollbar-corner",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-scrollbar-thumb",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-scrollbar-track",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-scrollbar-track-piece",
      "browsers": [
        "E79",
        "S4",
        "C2",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
        }
      ]
    },
    {
      "name": "::-webkit-search-cancel-button",
      "browsers": [
        "E79",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-cancel-button"
        }
      ]
    },
    {
      "name": "::-webkit-search-decoration",
      "browsers": [
        "C",
        "S4"
      ]
    },
    {
      "name": "::-webkit-search-results-button",
      "browsers": [
        "E79",
        "S3",
        "C1",
        "O15"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-results-button"
        }
      ]
    },
    {
      "name": "::-webkit-search-results-decoration",
      "browsers": [
        "C",
        "S4"
      ]
    },
    {
      "name": "::-webkit-slider-runnable-track",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-slider-thumb",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-textfield-decoration-container",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-validation-bubble",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-validation-bubble-arrow",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-validation-bubble-arrow-clipper",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-validation-bubble-heading",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-validation-bubble-message",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::-webkit-validation-bubble-text-block",
      "browsers": [
        "C",
        "O",
        "S6"
      ]
    },
    {
      "name": "::target-text",
      "status": "experimental",
      "browsers": [
        "E89",
        "C89",
        "O75"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::target-text"
        }
      ],
      "description": "The ::target-text CSS pseudo-element represents the text that has been scrolled to if the browser supports scroll-to-text fragments. It allows authors to choose how to highlight that section of text."
    },
    {
      "name": "::-moz-range-progress",
      "status": "nonstandard",
      "browsers": [
        "FF22"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-progress"
        }
      ],
      "description": 'The ::-moz-range-progress CSS pseudo-element is a Mozilla extension that represents the lower portion of the track (i.e., groove) in which the indicator slides in an <input> of type="range". This portion corresponds to values lower than the value currently selected by the thumb (i.e., virtual knob).'
    },
    {
      "name": "::-moz-range-thumb",
      "status": "nonstandard",
      "browsers": [
        "FF21"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-thumb"
        }
      ],
      "description": `The ::-moz-range-thumb CSS pseudo-element is a Mozilla extension that represents the thumb (i.e., virtual knob) of an <input> of type="range". The user can move the thumb along the input's track to alter its numerical value.`
    },
    {
      "name": "::-moz-range-track",
      "status": "nonstandard",
      "browsers": [
        "FF21"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-track"
        }
      ],
      "description": 'The ::-moz-range-track CSS pseudo-element is a Mozilla extension that represents the track (i.e., groove) in which the indicator slides in an <input> of type="range".'
    },
    {
      "name": "::-webkit-progress-inner-value",
      "status": "nonstandard",
      "description": "The ::-webkit-progress-value CSS pseudo-element represents the filled-in portion of the bar of a <progress> element. It is a child of the ::-webkit-progress-bar pseudo-element.\n\nIn order to let ::-webkit-progress-value take effect, -webkit-appearance needs to be set to none on the <progress> element."
    },
    {
      "name": "::grammar-error",
      "status": "experimental",
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::grammar-error"
        }
      ],
      "description": "The ::grammar-error CSS pseudo-element represents a text segment which the user agent has flagged as grammatically incorrect."
    },
    {
      "name": "::marker",
      "browsers": [
        "E86",
        "FF68",
        "S11.1",
        "C86",
        "O72"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::marker"
        }
      ],
      "description": "The ::marker CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number. It works on any element or pseudo-element set to display: list-item, such as the <li> and <summary> elements."
    },
    {
      "name": "::part",
      "status": "experimental",
      "browsers": [
        "E79",
        "FF72",
        "S13.1",
        "C73",
        "O60"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::part"
        }
      ],
      "description": "The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute."
    },
    {
      "name": "::placeholder",
      "browsers": [
        "E79",
        "FF51",
        "S10.1",
        "C57",
        "O44"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::placeholder"
        }
      ],
      "description": "The ::placeholder CSS pseudo-element represents the placeholder text of a form element."
    },
    {
      "name": "::slotted",
      "browsers": [
        "E79",
        "FF63",
        "S10",
        "C50",
        "O37"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::slotted"
        }
      ],
      "description": "The :slotted() CSS pseudo-element represents any element that has been placed into a slot inside an HTML template."
    },
    {
      "name": "::spelling-error",
      "status": "experimental",
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::spelling-error"
        }
      ],
      "description": "The ::spelling-error CSS pseudo-element represents a text segment which the user agent has flagged as incorrectly spelled."
    },
    {
      "name": "::view-transition",
      "status": "experimental",
      "browsers": [
        "E111",
        "C111",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition"
        }
      ],
      "description": "The ::view-transition CSS pseudo-element represents the root of the view transitions overlay, which contains all view transitions and sits over the top of all other page content."
    },
    {
      "name": "::view-transition-group",
      "status": "experimental",
      "browsers": [
        "E111",
        "C111",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-group"
        }
      ],
      "description": "The ::view-transition-group CSS pseudo-element represents a single view transition group."
    },
    {
      "name": "::view-transition-image-pair",
      "status": "experimental",
      "browsers": [
        "E111",
        "C111",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-image-pair"
        }
      ],
      "description": `The ::view-transition-image-pair CSS pseudo-element represents a container for a view transition's "old" and "new" view states \u2014 before and after the transition.`
    },
    {
      "name": "::view-transition-new",
      "status": "experimental",
      "browsers": [
        "E111",
        "C111",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-new"
        }
      ],
      "description": 'The ::view-transition-new CSS pseudo-element represents the "new" view state of a view transition \u2014 a live representation of the new view, after the transition.'
    },
    {
      "name": "::view-transition-old",
      "status": "experimental",
      "browsers": [
        "E111",
        "C111",
        "O97"
      ],
      "references": [
        {
          "name": "MDN Reference",
          "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-old"
        }
      ],
      "description": 'The ::view-transition-old CSS pseudo-element represents the "old" view state of a view transition \u2014 a static screenshot of the old view, before the transition.'
    }
  ]
};

// src/entities/css/dataProvider.ts
init_process();
init_buffer();
var CSSDataProvider = class {
  /**
   * Currently, unversioned data uses the V1 implementation
   * In the future when the provider handles multiple versions of HTML custom data,
   * use the latest implementation for unversioned data
   * @param data
   */
  constructor(data) {
    this._properties = [];
    this._atDirectives = [];
    this._pseudoClasses = [];
    this._pseudoElements = [];
    this.addData(data);
  }
  provideProperties() {
    return this._properties;
  }
  provideAtDirectives() {
    return this._atDirectives;
  }
  providePseudoClasses() {
    return this._pseudoClasses;
  }
  providePseudoElements() {
    return this._pseudoElements;
  }
  addData(data) {
    if (Array.isArray(data.properties)) {
      for (const prop of data.properties) {
        if (isPropertyData(prop)) {
          this._properties.push(prop);
        }
      }
    }
    if (Array.isArray(data.atDirectives)) {
      for (const prop of data.atDirectives) {
        if (isAtDirective(prop)) {
          this._atDirectives.push(prop);
        }
      }
    }
    if (Array.isArray(data.pseudoClasses)) {
      for (const prop of data.pseudoClasses) {
        if (isPseudoClassData(prop)) {
          this._pseudoClasses.push(prop);
        }
      }
    }
    if (Array.isArray(data.pseudoElements)) {
      for (const prop of data.pseudoElements) {
        if (isPseudoElementData(prop)) {
          this._pseudoElements.push(prop);
        }
      }
    }
  }
};
function isPropertyData(d) {
  return typeof d.name === "string";
}
function isAtDirective(d) {
  return typeof d.name === "string";
}
function isPseudoClassData(d) {
  return typeof d.name === "string";
}
function isPseudoElementData(d) {
  return typeof d.name === "string";
}

// src/entities/css/dataManager.ts
var CSSDataManager = class {
  constructor(options) {
    this.dataProviders = [];
    this._propertySet = {};
    this._atDirectiveSet = {};
    this._pseudoClassSet = {};
    this._pseudoElementSet = {};
    this._properties = [];
    this._atDirectives = [];
    this._pseudoClasses = [];
    this._pseudoElements = [];
    this.setDataProviders(options?.useDefaultDataProvider !== false, options?.customDataProviders || []);
  }
  setDataProviders(builtIn, providers) {
    this.dataProviders = [];
    if (builtIn) {
      this.dataProviders.push(new CSSDataProvider(cssData));
    }
    this.dataProviders.push(...providers);
    this.collectData();
  }
  /**
   * Collect all data  & handle duplicates
   */
  collectData() {
    this._propertySet = {};
    this._atDirectiveSet = {};
    this._pseudoClassSet = {};
    this._pseudoElementSet = {};
    this.dataProviders.forEach((provider) => {
      provider.provideProperties().forEach((p) => {
        if (!this._propertySet[p.name]) {
          this._propertySet[p.name] = p;
        }
      });
      provider.provideAtDirectives().forEach((p) => {
        if (!this._atDirectiveSet[p.name]) {
          this._atDirectiveSet[p.name] = p;
        }
      });
      provider.providePseudoClasses().forEach((p) => {
        if (!this._pseudoClassSet[p.name]) {
          this._pseudoClassSet[p.name] = p;
        }
      });
      provider.providePseudoElements().forEach((p) => {
        if (!this._pseudoElementSet[p.name]) {
          this._pseudoElementSet[p.name] = p;
        }
      });
    });
    this._properties = values(this._propertySet);
    this._atDirectives = values(this._atDirectiveSet);
    this._pseudoClasses = values(this._pseudoClassSet);
    this._pseudoElements = values(this._pseudoElementSet);
  }
  getProperty(name) {
    return this._propertySet[name];
  }
  getAtDirective(name) {
    return this._atDirectiveSet[name];
  }
  getPseudoClass(name) {
    return this._pseudoClassSet[name];
  }
  getPseudoElement(name) {
    return this._pseudoElementSet[name];
  }
  getProperties() {
    return this._properties;
  }
  getAtDirectives() {
    return this._atDirectives;
  }
  getPseudoClasses() {
    return this._pseudoClasses;
  }
  getPseudoElements() {
    return this._pseudoElements;
  }
  isKnownProperty(name) {
    return name.toLowerCase() in this._propertySet;
  }
  isStandardProperty(name) {
    return this.isKnownProperty(name) && (!this._propertySet[name.toLowerCase()].status || this._propertySet[name.toLowerCase()].status === "standard");
  }
};

// src/entities/css/languageFacts.ts
var cssWordRegex = /(#?-?\d*\.\d\w*%?)|(::?[\w-]*(?=[^,{;]*[,{]))|(([@#.!])?[\w-?]+%?|[@#!.])/;
var cssDataManager = new CSSDataManager({});
var cssColors = colors;
function getEntryStatus(status) {
  switch (status) {
    case "experimental":
      return "\u26A0\uFE0F Property is experimental. Be cautious when using it.\n\n";
    case "nonstandard":
      return "\u{1F6A8}\uFE0F Property is nonstandard. Avoid using it.\n\n";
    case "obsolete":
      return "\u{1F6A8}\uFE0F\uFE0F\uFE0F Property is obsolete. Avoid using it.\n\n";
    default:
      return "";
  }
}
function getEntryDescription(entry) {
  if (!entry.description || entry.description === "") {
    return null;
  }
  let result = "";
  if (entry.status) {
    result += getEntryStatus(entry.status);
  }
  if (typeof entry.description === "string") {
    result += entry.description;
  } else if (entry.description.kind === "plaintext") {
    result += entry.description.value;
  } else if (entry.description.kind === "markdown") {
    result += entry.description.value;
  }
  const browserLabel = getBrowserLabel(entry.browsers);
  if (browserLabel) {
    result += `
(${browserLabel})`;
  }
  return result;
}
var browserNames = {
  E: "Edge",
  FF: "Firefox",
  S: "Safari",
  C: "Chrome",
  IE: "IE",
  O: "Opera"
};
function getBrowserLabel(browsers = []) {
  if (browsers.length === 0) {
    return null;
  }
  return browsers.map((b) => {
    let result = "";
    const matches2 = b.match(/([A-Z]+)(\d+)?/);
    const name = matches2[1];
    const version2 = matches2[2];
    if (name in browserNames) {
      result += browserNames[name];
    }
    if (version2) {
      result += " " + version2;
    }
    return result;
  }).join(", ");
}

// src/features/colorProvider.ts
var rgbHexPattern = /#?#([0-9A-F]{3,4}|[0-9A-F]{6}|[0-9A-F]{8})\b/gi;
var rgbFuncPattern = /\brgba?\s*\(\s*([0-9%.]+)\s*,?\s*([0-9%.]+)\s*,?\s*([0-9%.]+)(?:\s*(?:,|\/)?\s*([0-9%.]+)\s*)?\)/gi;
var hslFuncPattern = /\bhsla?\s*\(\s*([0-9.]+)(deg|rad|grad|turn)?\s*,?\s*([0-9%.]+)\s*,?\s*([0-9%.]+)(?:\s*(?:,|\/)?\s*([0-9%.]+)\s*)?\)/gi;
var colorKeywordPattern = new RegExp(`(^|\\s+)(${Object.keys(cssColors).join("|")})(?:\\s+|$)`, "gi");
var CFMLDocumentColorProvider = class {
  /**
   * Provide colors for the given document.
   * @param document The document for which to provide the colors
   * @param _token A cancellation token
   * @returns
   */
  provideDocumentColors(document2, _token) {
    const result = [];
    const documentStateContext = getDocumentStateContext(document2, false, false, _token, true);
    const cssRanges = getCssRanges(documentStateContext, void 0, _token);
    for (const cssRange of cssRanges) {
      const rangeTextOffset = document2.offsetAt(cssRange.start);
      const rangeText = documentStateContext.sanitizedDocumentText.slice(rangeTextOffset, document2.offsetAt(cssRange.end));
      let propertyMatch;
      while (propertyMatch = cssPropertyPattern.exec(rangeText)) {
        const propertyValuePrefix = propertyMatch[1];
        const propertyName = propertyMatch[2];
        const propertyValue = propertyMatch[3];
        if (!cssDataManager.isKnownProperty(propertyName)) {
          continue;
        }
        const cssProperty = cssDataManager.getProperty(propertyName);
        if (cssProperty.restrictions && cssProperty.restrictions.includes("color")) {
          let colorMatch;
          while (colorMatch = rgbHexPattern.exec(propertyValue)) {
            const rgbHexValue = colorMatch[1];
            const colorRange = new import_vscode17.Range(
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index),
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index + colorMatch[0].length)
            );
            result.push(new import_vscode17.ColorInformation(colorRange, hexToColor(rgbHexValue)));
          }
          while (colorMatch = rgbFuncPattern.exec(propertyValue)) {
            const r = colorMatch[1];
            const g = colorMatch[2];
            const b = colorMatch[3];
            const a = colorMatch[4];
            const colorRange = new import_vscode17.Range(
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index),
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index + colorMatch[0].length)
            );
            const red = r.includes("%") ? Number.parseFloat(r) / 100 : Number.parseInt(r) / 255;
            const green = g.includes("%") ? Number.parseInt(g) / 100 : Number.parseFloat(g) / 255;
            const blue = b.includes("%") ? Number.parseInt(b) / 100 : Number.parseFloat(b) / 255;
            let alpha;
            if (a) {
              alpha = a.includes("%") ? Number.parseFloat(a) / 100 : Number.parseFloat(a);
            } else {
              alpha = 1;
            }
            result.push(new import_vscode17.ColorInformation(colorRange, new import_vscode17.Color(red, green, blue, alpha)));
          }
          while (colorMatch = hslFuncPattern.exec(propertyValue)) {
            const h = colorMatch[1];
            const hUnit = colorMatch[2];
            const s = colorMatch[3];
            const l = colorMatch[4];
            const a = colorMatch[5];
            const colorRange = new import_vscode17.Range(
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index),
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index + colorMatch[0].length)
            );
            const hue = Number.parseFloat(h);
            const sat = Number.parseFloat(s);
            const light = Number.parseFloat(l);
            let alpha;
            if (a) {
              alpha = a.includes("%") ? Number.parseFloat(a) / 100 : Number.parseFloat(a);
            } else {
              alpha = 1;
            }
            const hueUnit = hUnit ? hUnit : "deg";
            result.push(new import_vscode17.ColorInformation(colorRange, colorFromHSL({ h: hue, s: sat, l: light, a: alpha }, hueUnit)));
          }
          while (colorMatch = colorKeywordPattern.exec(propertyValue)) {
            const keywordPrefix = colorMatch[1];
            const colorKeyword = colorMatch[2].toLowerCase();
            const colorRange = new import_vscode17.Range(
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index + keywordPrefix.length),
              document2.positionAt(rangeTextOffset + propertyMatch.index + propertyValuePrefix.length + colorMatch.index + keywordPrefix.length + colorKeyword.length)
            );
            result.push(new import_vscode17.ColorInformation(colorRange, hexToColor(cssColors[colorKeyword])));
          }
        }
      }
    }
    return result;
  }
  /**
   * Provide representations for a color.
   * @param color The color to show and insert
   * @param context A context object with additional information
   * @param context.document
   * @param context.range
   * @param _token A cancellation token
   * @returns
   */
  provideColorPresentations(color, context, _token) {
    const result = [];
    const red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
    let label;
    if (color.alpha === 1) {
      label = `rgb(${red256}, ${green256}, ${blue256})`;
    } else {
      label = `rgba(${red256}, ${green256}, ${blue256}, ${color.alpha})`;
    }
    result.push({ label, textEdit: import_vscode17.TextEdit.replace(context.range, label) });
    const cfmlCompletionSettings = import_vscode17.workspace.getConfiguration("cfml.suggest", context.document.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentStateContext = getDocumentStateContext(context.document, false, replaceComments, _token);
    const hexPrefix = isInCfOutput(documentStateContext, context.range.start, _token) ? "##" : "#";
    if (color.alpha === 1) {
      label = `${hexPrefix}${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}`;
    } else {
      label = `${hexPrefix}${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}${toTwoDigitHex(Math.round(color.alpha * 255))}`;
    }
    result.push({ label, textEdit: import_vscode17.TextEdit.replace(context.range, label) });
    const hsl = hslFromColor(color);
    if (hsl.a === 1) {
      label = `hsl(${hsl.h}, ${Math.round(hsl.s * 100)}%, ${Math.round(hsl.l * 100)}%)`;
    } else {
      label = `hsla(${hsl.h}, ${Math.round(hsl.s * 100)}%, ${Math.round(hsl.l * 100)}%, ${hsl.a})`;
    }
    result.push({ label, textEdit: import_vscode17.TextEdit.replace(context.range, label) });
    return result;
  }
};
function toTwoDigitHex(n) {
  const r = n.toString(16);
  return r.length !== 2 ? "0" + r : r;
}
function fromTwoDigitHex(hex) {
  return Number.parseInt(hex, 16);
}
function hexToColor(rgbHex) {
  rgbHex = rgbHex.replace(/#/g, "");
  let red;
  let green;
  let blue;
  let alpha;
  if (rgbHex.length === 3 || rgbHex.length === 4) {
    red = fromTwoDigitHex(rgbHex.substr(0, 1).repeat(2)) / 255;
    green = fromTwoDigitHex(rgbHex.substr(1, 1).repeat(2)) / 255;
    blue = fromTwoDigitHex(rgbHex.substr(2, 1).repeat(2)) / 255;
    alpha = rgbHex.length === 4 ? fromTwoDigitHex(rgbHex.substr(3, 1).repeat(2)) / 255 : 1;
  } else if (rgbHex.length === 6 || rgbHex.length === 8) {
    red = fromTwoDigitHex(rgbHex.substr(0, 2)) / 255;
    green = fromTwoDigitHex(rgbHex.substr(2, 2)) / 255;
    blue = fromTwoDigitHex(rgbHex.substr(4, 2)) / 255;
    alpha = rgbHex.length === 8 ? fromTwoDigitHex(rgbHex.substr(6, 2)) / 255 : 1;
  } else {
    return void 0;
  }
  return new import_vscode17.Color(red, green, blue, alpha);
}
function hslFromColor(rgba) {
  const r = rgba.red;
  const g = rgba.green;
  const b = rgba.blue;
  const a = rgba.alpha;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0;
  let s = 0;
  const l = (min + max) / 2;
  const chroma = max - min;
  if (chroma > 0) {
    s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);
    switch (max) {
      case r:
        h = (g - b) / chroma + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / chroma + 2;
        break;
      case b:
        h = (r - g) / chroma + 4;
        break;
    }
    h *= 60;
    h = Math.round(h);
  }
  return { h, s, l, a };
}
function colorFromHSL(hsla, hueUnit = "deg") {
  let hue;
  switch (hueUnit) {
    case "deg":
      hue = hsla.h / 60;
      break;
    case "rad":
      hue = hsla.h * 3 / Math.PI;
      break;
    case "grad":
      hue = hsla.h * 6 / 400;
      break;
    case "turn":
      hue = hsla.h * 6;
      break;
  }
  const sat = hsla.s / 100;
  const light = hsla.l / 100;
  if (sat === 0) {
    return new import_vscode17.Color(light, light, light, hsla.a);
  } else {
    const hueToRgb = (t12, t22, h) => {
      while (h < 0) {
        h += 6;
      }
      while (h >= 6) {
        h -= 6;
      }
      if (h < 1) {
        return (t22 - t12) * h + t12;
      }
      if (h < 3) {
        return t22;
      }
      if (h < 4) {
        return (t22 - t12) * (4 - h) + t12;
      }
      return t12;
    };
    const t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;
    const t1 = light * 2 - t2;
    return new import_vscode17.Color(hueToRgb(t1, t2, hue + 2), hueToRgb(t1, t2, hue), hueToRgb(t1, t2, hue - 2), hsla.a);
  }
}

// src/features/commands.ts
init_process();
init_buffer();
var import_vscode20 = require("vscode");

// src/utils/cfdocs/cfDocsService.ts
init_process();
init_buffer();
var import_isomorphic_fetch = __toESM(require_fetch_npm_browserify());
var import_vscode18 = require("vscode");

// src/utils/cfdocs/definitionInfo.ts
init_process();
init_buffer();

// src/utils/cfdocs/multiSignatures.ts
init_process();
init_buffer();
var multiSigGlobalFunctions = (
  // Key: Function name. Value: Array of signatures, consisting of array of argument names.
  new MyMap().set(
    "arraySort",
    [
      [
        "array",
        "sort_type",
        "sort_order"
      ],
      [
        "array",
        "callback"
      ]
    ]
  ).set(
    "createObject",
    [
      [
        "type='component'",
        "component_name"
      ],
      [
        "type='java'",
        "class"
      ],
      [
        "type='webservice'",
        "urltowsdl",
        "portname"
      ],
      [
        "type='.NET'",
        "class",
        "assembly",
        "server",
        "port",
        "protocol",
        "secure"
      ],
      [
        "type='com'",
        "class",
        "context",
        "serverName"
      ]
    ]
  ).set(
    "isValid",
    [
      [
        "type",
        "value"
      ],
      [
        "type='regex'",
        "value",
        "pattern"
      ],
      [
        "type='range'",
        "value",
        "min",
        "max"
      ]
    ]
  ).set(
    "replaceListNoCase",
    [
      [
        "String",
        "list1",
        "list2",
        "includeEmptyFields"
      ],
      [
        "String",
        "list1",
        "list2",
        "delimiter",
        "includeEmptyFields"
      ],
      [
        "String",
        "list1",
        "list2",
        "delimiterList1",
        "delimiterList2",
        "includeEmptyFields"
      ]
    ]
  )
);

// src/utils/cfdocs/definitionInfo.ts
var import_html_entities = __toESM(require_lib());
function getParamDataType(type) {
  switch (type) {
    case "any":
      return "any" /* Any */;
    case "array":
      return "array" /* Array */;
    case "binary":
      return "binary" /* Binary */;
    case "boolean":
      return "boolean" /* Boolean */;
    case "component":
      return "component" /* Component */;
    case "date":
      return "date" /* Date */;
    case "function":
      return "function" /* Function */;
    case "guid":
      return "guid" /* GUID */;
    case "numeric":
      return "numeric" /* Numeric */;
    case "query":
      return "query" /* Query */;
    case "string":
      return "string" /* String */;
    case "struct":
      return "struct" /* Struct */;
    case "uuid":
      return "uuid" /* UUID */;
    case "variablename":
      return "variablename" /* VariableName */;
    case "xml":
      return "xml" /* XML */;
    default:
      return "any" /* Any */;
  }
}
function getReturnDataType(type) {
  switch (type) {
    case "any":
      return "any" /* Any */;
    case "array":
      return "array" /* Array */;
    case "binary":
      return "binary" /* Binary */;
    case "boolean":
      return "boolean" /* Boolean */;
    case "date":
      return "date" /* Date */;
    case "function":
      return "function" /* Function */;
    case "guid":
      return "guid" /* GUID */;
    case "numeric":
      return "numeric" /* Numeric */;
    case "query":
      return "query" /* Query */;
    case "string":
      return "string" /* String */;
    case "struct":
      return "struct" /* Struct */;
    case "uuid":
      return "uuid" /* UUID */;
    case "variablename":
      return "variablename" /* VariableName */;
    case "void":
      return "void" /* Void */;
    case "xml":
      return "xml" /* XML */;
    default:
      return "any" /* Any */;
  }
}
var CFDocsDefinitionInfo = class _CFDocsDefinitionInfo {
  /**
   *
   * @param name
   * @param type
   * @param syntax
   * @param member
   * @param script
   * @param returns
   * @param related
   * @param description
   * @param discouraged
   * @param params
   * @param engines
   * @param links
   * @param examples
   */
  constructor(name, type, syntax, member, script, returns, related, description, discouraged, params, engines, links, examples) {
    this.name = name;
    this.type = type;
    this.syntax = syntax;
    this.member = member;
    this.script = script;
    this.returns = returns;
    this.related = related;
    this.description = description;
    this.discouraged = discouraged;
    this.params = params;
    this.engines = engines;
    this.links = links;
    this.examples = examples;
  }
  /**
   * Returns whether this object is a function
   * @returns
   */
  isFunction() {
    return equalsIgnoreCase(this.type, "function");
  }
  /**
   * Returns whether this object is a tag
   * @returns
   */
  isTag() {
    return equalsIgnoreCase(this.type, "tag");
  }
  /**
   * Returns a GlobalFunction object based on this object
   * @returns
   */
  toGlobalFunction() {
    const signatures = [];
    if (multiSigGlobalFunctions.has(this.name)) {
      const thisMultiSigs = multiSigGlobalFunctions.get(this.name);
      thisMultiSigs.forEach((thisMultiSig) => {
        const parameters = [];
        thisMultiSig.forEach((multiSigParam) => {
          let paramFound = false;
          for (const param of this.params) {
            const multiSigParamParsed = multiSigParam.split("=")[0];
            if (param.name === multiSigParamParsed) {
              const parameter = {
                name: multiSigParam,
                type: param.type,
                dataType: getParamDataType(param.type.toLowerCase()),
                required: param.required,
                description: param.description,
                default: param.default,
                enumeratedValues: param.values
              };
              parameters.push(parameter);
              paramFound = true;
              break;
            }
          }
          if (!paramFound) {
            const parameter = {
              name: multiSigParam,
              type: "any",
              dataType: "any" /* Any */,
              required: false,
              description: ""
            };
            parameters.push(parameter);
          }
        });
        const signatureInfo = {
          parameters
        };
        signatures.push(signatureInfo);
      });
    } else {
      const parameters = this.params.map((param) => {
        return {
          name: param.name,
          type: param.type,
          dataType: getParamDataType(param.type.toLowerCase()),
          required: param.required,
          description: (0, import_html_entities.decode)(param.description),
          default: param.default,
          enumeratedValues: param.values
        };
      });
      const signatureInfo = {
        parameters
      };
      signatures.push(signatureInfo);
    }
    return {
      name: this.name,
      syntax: this.syntax,
      description: this.description ? (0, import_html_entities.decode)(this.description) : "",
      returntype: getReturnDataType(this.returns.toLowerCase()),
      signatures
    };
  }
  /**
   * Returns a GlobalTag object based on this object
   * @returns
   */
  toGlobalTag() {
    const parameters = this.params.map((param) => {
      return {
        name: param.name,
        type: param.type,
        dataType: getParamDataType(param.type.toLowerCase()),
        required: param.required,
        description: (0, import_html_entities.decode)(param.description),
        default: param.default,
        enumeratedValues: param.values
      };
    });
    const signatureInfo = {
      parameters
    };
    const signatures = [];
    signatures.push(signatureInfo);
    return {
      name: this.name,
      syntax: this.syntax,
      scriptSyntax: this.script,
      description: this.description ? (0, import_html_entities.decode)(this.description) : "",
      signatures,
      hasBody: true
    };
  }
  /**
   * Checks if this definition is compatible with given engine
   * @param engine The CFML engine with which to check compatibility
   * @returns
   */
  isCompatible(engine) {
    const engineVendor = engine.getName();
    if (engineVendor === "unknown" /* Unknown */ || !this.engines) {
      return true;
    }
    const engineCompat = this.engines[engineVendor];
    if (!engineCompat) {
      return false;
    }
    const engineVersion = engine.getVersion();
    if (!engineVersion) {
      return true;
    }
    if (engineCompat.minimum_version) {
      const minEngine = new CFMLEngine(engineVendor, engineCompat.minimum_version);
      if (engine.isOlder(minEngine)) {
        return false;
      }
    }
    if (engineCompat.removed) {
      const maxEngine = new CFMLEngine(engineVendor, engineCompat.removed);
      if (engine.isNewerOrEquals(maxEngine)) {
        return false;
      }
    }
    return true;
  }
  /**
   * Gets all function names documented by CFDocs. Once retrieved, they are statically stored.
   * @returns
   */
  static async getAllFunctionNames() {
    if (!_CFDocsDefinitionInfo.allFunctionNames) {
      _CFDocsDefinitionInfo.allFunctionNames = await CFDocsService.getAllFunctionNames();
    }
    return _CFDocsDefinitionInfo.allFunctionNames;
  }
  /**
   * Gets all tag names documented by CFDocs. Once retrieved, they are statically stored.
   * @returns
   */
  static async getAllTagNames() {
    if (!_CFDocsDefinitionInfo.allTagNames) {
      _CFDocsDefinitionInfo.allTagNames = await CFDocsService.getAllTagNames();
    }
    return _CFDocsDefinitionInfo.allTagNames;
  }
  /**
   * Returns whether the given identifier is the name of a function documented in CFDocs
   * @param name The identifier to check for
   * @returns
   */
  static async isFunctionName(name) {
    const allFunctionNames2 = await _CFDocsDefinitionInfo.getAllFunctionNames();
    return allFunctionNames2.includes(name.toLowerCase());
  }
  /**
   * Returns whether the given identifier is the name of a tag documented in CFDocs
   * @param name The identifier to check for
   * @returns
   */
  static async isTagName(name) {
    const allTagNames = await _CFDocsDefinitionInfo.getAllTagNames();
    return allTagNames.includes(name.toLowerCase());
  }
  /**
   * Returns whether the given identifier is the name of a function or tag documented in CFDocs
   * @param name The identifier to check for
   * @returns
   */
  static async isIdentifier(name) {
    return await _CFDocsDefinitionInfo.isFunctionName(name) || await _CFDocsDefinitionInfo.isTagName(name);
  }
};

// src/utils/cfdocs/cfDocsService.ts
var CFDocsService = class _CFDocsService {
  static {
    this.cfDocsRepoLinkPrefix = "https://raw.githubusercontent.com/foundeo/cfdocs/master/data/en/";
  }
  static {
    this.cfDocsLinkPrefix = "https://cfdocs.org/";
  }
  /**
   * Gets definition information for global identifiers based on a local CFDocs directory
   * @param identifier The global identifier for which to get definition info
   * @returns
   */
  static async getLocalDefinitionInfo(identifier) {
    const cfmlCfDocsSettings = import_vscode18.workspace.getConfiguration("cfml.cfDocs");
    const jsonFileName = _CFDocsService.getJsonFileName(identifier);
    try {
      const cfdocsPath = import_vscode18.Uri.file(cfmlCfDocsSettings.get("localPath"));
      const docFilePath = import_vscode18.Uri.joinPath(cfdocsPath, jsonFileName);
      const readData = await import_vscode18.workspace.fs.readFile(docFilePath);
      const readStr = Buffer2.from(readData).toString("utf8");
      const readJson = JSON.parse(readStr);
      return _CFDocsService.constructDefinitionFromJsonDoc(readJson);
    } catch (e) {
      console.log(`Error with the JSON doc for ${identifier}:`, e.message);
      throw e;
    }
  }
  /**
   * Gets definition information for global identifiers based on a extension resources directory
   * @param identifier The global identifier for which to get definition info
   * @returns
   */
  static async getExtensionDefinitionInfo(identifier) {
    try {
      const pathUri = import_vscode18.Uri.file(extensionContext.asAbsolutePath("./resources/schemas/en/" + _CFDocsService.getJsonFileName(identifier)));
      const readData = await import_vscode18.workspace.fs.readFile(pathUri);
      const readStr = Buffer2.from(readData).toString("utf8");
      const readJson = JSON.parse(readStr);
      return _CFDocsService.constructDefinitionFromJsonDoc(readJson);
    } catch (e) {
      console.log(`Error with the JSON doc for ${identifier}:`, e.message);
      throw e;
    }
  }
  /**
   * Gets definition information for global identifiers based on a remote CFDocs repository
   * @param identifier The global identifier for which to get definition info
   * @returns
   */
  static async getRemoteDefinitionInfo(identifier) {
    const cfDocsLink = _CFDocsService.cfDocsRepoLinkPrefix + _CFDocsService.getJsonFileName(identifier);
    try {
      const response = await (0, import_isomorphic_fetch.default)(cfDocsLink);
      const data = await response.json();
      return _CFDocsService.constructDefinitionFromJsonDoc(data);
    } catch (ex) {
      console.log(`Error with the JSON doc for ${identifier}:`, ex.message);
      throw ex;
    }
  }
  /**
   * Constructs a CFDocsDefinitionInfo object from the respective JSON string
   * @param jsonDoc A JSON string conforming to the CFDocs definition structure
   * @returns
   */
  static constructDefinitionFromJsonDoc(jsonDoc) {
    return new CFDocsDefinitionInfo(
      jsonDoc.name,
      jsonDoc.type,
      jsonDoc.syntax,
      jsonDoc.member,
      jsonDoc.script,
      jsonDoc.returns,
      jsonDoc.related,
      jsonDoc.description,
      jsonDoc.discouraged,
      jsonDoc.params,
      jsonDoc.engines,
      jsonDoc.links,
      jsonDoc.examples
    );
  }
  /**
   * Generates the respective JSON file name from the global identifier
   * @param identifier The global identifier for which to the file name will be generated
   * @returns
   */
  static getJsonFileName(identifier) {
    return `${identifier.toLowerCase()}.json`;
  }
  /**
   * Returns a list of all global CFML functions documented on CFDocs
   * @param source Indicates whether the data will be retrieved locally or remotely
   * @returns
   */
  static async getAllFunctionNames(source = "remote" /* remote */) {
    const jsonFileName = _CFDocsService.getJsonFileName("functions");
    try {
      if (source === "local" /* local */ && import_vscode18.env.appHost === "desktop") {
        const cfmlCfDocsSettings = import_vscode18.workspace.getConfiguration("cfml.cfDocs");
        const cfdocsPath = import_vscode18.Uri.file(cfmlCfDocsSettings.get("localPath"));
        const docFilePath = import_vscode18.Uri.joinPath(cfdocsPath, jsonFileName);
        const readData = await import_vscode18.workspace.fs.readFile(docFilePath);
        const readStr = Buffer2.from(readData).toString("utf8");
        const readJson = JSON.parse(readStr);
        return readJson.related;
      } else if (source === "extension" /* extension */) {
        const extensionPathUri = import_vscode18.Uri.file(extensionContext.asAbsolutePath("./resources/schemas/en/" + jsonFileName));
        const readData = await import_vscode18.workspace.fs.readFile(extensionPathUri);
        const readStr = Buffer2.from(readData).toString("utf8");
        const readJson = JSON.parse(readStr);
        return readJson.related;
      } else {
        const cfDocsLink = _CFDocsService.cfDocsRepoLinkPrefix + jsonFileName;
        const response = await (0, import_isomorphic_fetch.default)(cfDocsLink);
        const data = await response.json();
        return data.related;
      }
    } catch (ex) {
      console.log("Error retrieving all function names:", ex.message);
      throw ex;
    }
  }
  /**
   * Returns a list of all global CFML tags documented on CFDocs
   * @param source Indicates whether the data will be retrieved locally or remotely
   * @returns
   */
  static async getAllTagNames(source = "remote" /* remote */) {
    const jsonFileName = _CFDocsService.getJsonFileName("tags");
    try {
      if (source === "local" /* local */ && import_vscode18.env.appHost === "desktop") {
        const cfmlCfDocsSettings = import_vscode18.workspace.getConfiguration("cfml.cfDocs");
        const cfdocsPath = import_vscode18.Uri.file(cfmlCfDocsSettings.get("localPath"));
        const docFilePath = import_vscode18.Uri.joinPath(cfdocsPath, jsonFileName);
        const readData = await import_vscode18.workspace.fs.readFile(docFilePath);
        const readStr = Buffer2.from(readData).toString("utf8");
        const readJson = JSON.parse(readStr);
        return readJson.related;
      } else if (source === "extension" /* extension */) {
        const extensionPathUri = import_vscode18.Uri.file(extensionContext.asAbsolutePath("./resources/schemas/en/" + jsonFileName));
        const readData = await import_vscode18.workspace.fs.readFile(extensionPathUri);
        const readStr = Buffer2.from(readData).toString("utf8");
        const readJson = JSON.parse(readStr);
        return readJson.related;
      } else {
        const cfDocsLink = _CFDocsService.cfDocsRepoLinkPrefix + jsonFileName;
        const response = await (0, import_isomorphic_fetch.default)(cfDocsLink);
        const data = await response.json();
        return data.related;
      }
    } catch (ex) {
      console.log("Error retrieving all tag names:", ex.message);
      throw ex;
    }
  }
  /**
   * Sets the given definition as a global function in the cached entities
   * @param definition The definition object to cache
   * @returns
   */
  static setGlobalFunction(definition) {
    const cfmlEngineSettings = import_vscode18.workspace.getConfiguration("cfml.engine");
    const userEngineName = CFMLEngineName.valueOf(cfmlEngineSettings.get("name"));
    const userEngine = new CFMLEngine(userEngineName, cfmlEngineSettings.get("version"));
    if (definition.type === "function" && definition.isCompatible(userEngine)) {
      setGlobalFunction(definition.toGlobalFunction());
      setGlobalEntityDefinition(definition);
      return true;
    }
    return false;
  }
  /**
   * Sets the given definition as a global function in the cached entities
   * @param definition The definition object to cache
   * @returns
   */
  static setGlobalMemberFunction(definition) {
    const cfmlEngineSettings = import_vscode18.workspace.getConfiguration("cfml.engine");
    const userEngineName = CFMLEngineName.valueOf(cfmlEngineSettings.get("name"));
    const userEngine = new CFMLEngine(userEngineName, cfmlEngineSettings.get("version"));
    if (definition.type === "function" && definition.isCompatible(userEngine)) {
      setGlobalMemberFunction(definition.toGlobalFunction());
      setGlobalEntityDefinition(definition);
      return true;
    }
    return false;
  }
  /**
   * Sets the given definition as a global tag in the cached entities
   * @param definition The definition object to cache
   * @returns
   */
  static setGlobalTag(definition) {
    const cfmlEngineSettings = import_vscode18.workspace.getConfiguration("cfml.engine");
    const userEngineName = CFMLEngineName.valueOf(cfmlEngineSettings.get("name"));
    const userEngine = new CFMLEngine(userEngineName, cfmlEngineSettings.get("version"));
    if (definition.type === "tag" && definition.isCompatible(userEngine)) {
      setGlobalTag(definition.toGlobalTag());
      setGlobalEntityDefinition(definition);
      return true;
    }
    return false;
  }
  /**
   * Caches all documented tags and functions from CFDocs
   * @returns
   */
  static async cacheAll() {
    const cfmlCfDocsSettings = import_vscode18.workspace.getConfiguration("cfml.cfDocs");
    const cfdocsSource = cfmlCfDocsSettings.get("source", "remote" /* remote */);
    const getDefinitionInfo = cfdocsSource === "local" /* local */ && import_vscode18.env.appHost === "desktop" ? _CFDocsService.getLocalDefinitionInfo : cfdocsSource === "extension" /* extension */ ? _CFDocsService.getExtensionDefinitionInfo : _CFDocsService.getRemoteDefinitionInfo;
    const allFunctionNames2 = await _CFDocsService.getAllFunctionNames(cfdocsSource);
    await Promise.all(allFunctionNames2.map(async (functionName) => {
      const definitionInfo = await getDefinitionInfo(functionName);
      _CFDocsService.setGlobalFunction(definitionInfo);
    }));
    const allTagNames = await _CFDocsService.getAllTagNames(cfdocsSource);
    await Promise.all(allTagNames.map(async (tagName) => {
      const definitionInfo = await getDefinitionInfo(tagName);
      _CFDocsService.setGlobalTag(definitionInfo);
    }));
    return true;
  }
  /**
   * Opens the documentation web page on CFDocs for the word at the current cursor position
   * @param editor
   * @editor The text editor which represents the document for which to check the word
   */
  static openCfDocsForCurrentWord(editor, edit, _token) {
    const document2 = editor.document;
    const position = editor.selection.start;
    const cfmlCompletionSettings = import_vscode18.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, false);
    if (documentPositionStateContext.positionInComment) {
      return;
    }
    const docPrefix = documentPositionStateContext.docPrefix;
    const textLine = document2.lineAt(position);
    const wordRange = documentPositionStateContext.wordRange;
    const lineSuffix = documentPositionStateContext.sanitizedDocumentText.slice(document2.offsetAt(wordRange.end), document2.offsetAt(textLine.range.end));
    const userEngine = documentPositionStateContext.userEngine;
    const currentWord = documentPositionStateContext.currentWord;
    let globalEntity;
    const tagPrefixPattern2 = getTagPrefixPattern();
    const functionSuffixPattern2 = getFunctionSuffixPattern();
    if ((tagPrefixPattern2.test(docPrefix) || userEngine.supportsScriptTags() && functionSuffixPattern2.test(lineSuffix)) && isGlobalTag(currentWord)) {
      globalEntity = getGlobalTag(currentWord);
    } else if (!documentPositionStateContext.isContinuingExpression && functionSuffixPattern2.test(lineSuffix) && isGlobalFunction(currentWord)) {
      globalEntity = getGlobalFunction(currentWord);
    }
    if (globalEntity) {
      import_vscode18.commands.executeCommand("vscode.open", import_vscode18.Uri.parse(_CFDocsService.cfDocsLinkPrefix + globalEntity.name));
    } else {
      import_vscode18.window.showInformationMessage("No matching CFDocs entity was found");
    }
  }
  /**
   * Opens the documentation web page of the currently set CF engine for the word at the current cursor position
   * @editor The text editor which represents the document for which to check the word
   */
  static openEngineDocsForCurrentWord(editor, edit, _token) {
    const document2 = editor.document;
    const position = editor.selection.start;
    const cfmlCompletionSettings = import_vscode18.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, false);
    if (documentPositionStateContext.positionInComment) {
      return;
    }
    const userEngine = documentPositionStateContext.userEngine;
    if (userEngine.getName() === "unknown" /* Unknown */) {
      import_vscode18.window.showInformationMessage("CFML engine is not set");
      return;
    }
    const docPrefix = documentPositionStateContext.docPrefix;
    const textLine = document2.lineAt(position);
    const wordRange = documentPositionStateContext.wordRange;
    const lineSuffix = documentPositionStateContext.sanitizedDocumentText.slice(document2.offsetAt(wordRange.end), document2.offsetAt(textLine.range.end));
    const currentWord = documentPositionStateContext.currentWord;
    let globalEntity;
    const tagPrefixPattern2 = getTagPrefixPattern();
    const functionSuffixPattern2 = getFunctionSuffixPattern();
    if ((tagPrefixPattern2.test(docPrefix) || userEngine.supportsScriptTags() && functionSuffixPattern2.test(lineSuffix)) && isGlobalTag(currentWord)) {
      globalEntity = getGlobalEntityDefinition(currentWord);
    } else if (!documentPositionStateContext.isContinuingExpression && functionSuffixPattern2.test(lineSuffix) && isGlobalFunction(currentWord)) {
      globalEntity = getGlobalEntityDefinition(currentWord);
    }
    if (globalEntity && globalEntity.engines && Object.prototype.hasOwnProperty.call(globalEntity.engines, userEngine.getName())) {
      const engineInfo = globalEntity.engines[userEngine.getName()];
      if (engineInfo.docs) {
        import_vscode18.commands.executeCommand("vscode.open", import_vscode18.Uri.parse(engineInfo.docs));
      } else {
        import_vscode18.window.showInformationMessage("No engine docs for this entity was found");
      }
      return;
    }
    import_vscode18.window.showInformationMessage("No matching compatible entity was found");
  }
};

// src/utils/snippetService.ts
init_process();
init_buffer();
var import_vscode19 = require("vscode");
var SnippetService = class _SnippetService {
  /**
   * @returns boolean
   */
  static async cacheAllCustomSnippets() {
    const snippets2 = await _SnippetService.getCustomSnippets();
    for (const key in snippets2) {
      const snippet = snippets2[key];
      setCustomSnippet(key, snippet);
    }
    return true;
  }
  /**
   * @returns Snippets
   */
  static async getCustomSnippets() {
    const cfmlCompletionSettings = import_vscode19.workspace.getConfiguration("cfml.suggest");
    const snippetsLocalPath = cfmlCompletionSettings.get("snippets.localPath");
    if (snippetsLocalPath && snippetsLocalPath.length > 0) {
      const snippetsPathUri = import_vscode19.Uri.file(snippetsLocalPath);
      const readData = await import_vscode19.workspace.fs.readFile(snippetsPathUri);
      const readStr = Buffer2.from(readData).toString("utf8");
      const readJson = JSON.parse(readStr);
      return readJson;
    } else {
      return {};
    }
  }
};

// src/features/commands.ts
async function refreshGlobalDefinitionCache() {
  clearAllGlobalFunctions();
  clearAllGlobalTags();
  clearAllGlobalEntityDefinitions();
  clearAllCustomSnippets();
  const cfmlGlobalDefinitionsSettings = import_vscode20.workspace.getConfiguration("cfml.globalDefinitions");
  if (cfmlGlobalDefinitionsSettings.get("source") === "cfdocs") {
    await CFDocsService.cacheAll();
  }
  await SnippetService.cacheAllCustomSnippets();
}
async function refreshWorkspaceDefinitionCache(_token) {
  const cfmlIndexComponentsSettings = import_vscode20.workspace.getConfiguration("cfml.indexComponents");
  if (cfmlIndexComponentsSettings.get("enable")) {
    await cacheAllComponents(_token);
  }
}
async function showApplicationDocument(editor) {
  const activeDocumentUri = editor.document.uri;
  if (activeDocumentUri.scheme === "untitled") {
    return;
  }
  const applicationUri = await getApplicationUri(activeDocumentUri);
  if (applicationUri) {
    const applicationDocument = await import_vscode20.workspace.openTextDocument(applicationUri);
    if (!applicationDocument) {
      import_vscode20.window.showErrorMessage("No Application found for the currently active document.");
      return;
    }
    import_vscode20.window.showTextDocument(applicationDocument);
  }
}
function foldAllFunctions(editor, edit, _token) {
  const document2 = editor.document;
  if (isCfcFile(document2, _token)) {
    const thisComponent = getComponent(document2.uri, _token);
    if (thisComponent) {
      const functionStartLines = [];
      thisComponent.functions.filter((func) => {
        return !func.isImplicit && func.bodyRange !== void 0;
      }).forEach((func) => {
        functionStartLines.push(func.bodyRange.start.line);
      });
      if (functionStartLines.length > 0) {
        import_vscode20.commands.executeCommand("editor.fold", { selectionLines: functionStartLines });
      }
    }
  }
}
function insertSnippet(editor, edit, args) {
  const position = editor.selection.start;
  const documentPositionStateContext = getDocumentPositionStateContext(editor.document, position, false, true, null, false);
  if (documentPositionStateContext.positionIsScript) {
    import_vscode20.commands.executeCommand("editor.action.insertSnippet", {
      "langId": "cfml",
      "snippet": args.script
    });
  } else {
    import_vscode20.commands.executeCommand("editor.action.insertSnippet", {
      "langId": "cfml",
      "snippet": args.tag
    });
  }
}

// src/features/completionItemProvider.ts
init_process();
init_buffer();
var import_vscode23 = require("vscode");

// src/entities/catch.ts
init_process();
init_buffer();
var import_vscode21 = require("vscode");
var catchProperties = {
  "type": {
    detail: "(property) Exception.type",
    description: "Type: Exception type."
  },
  "message": {
    detail: "(property) Exception.message",
    description: "Message: Exception\u2019s diagnostic message, if provided; otherwise, an empty string."
  },
  "detail": {
    detail: "(property) Exception.detail",
    description: "Detailed message from the CFML interpreter or specified in a cfthrow tag. When the exception is generated by ColdFusion (and not cfthrow), the message can contain HTML formatting and can help determine which tag threw the exception."
  },
  "tagContext": {
    detail: "(property) Exception.tagContext",
    description: "An array of tag context structures, each representing one level of the active tag context at the time of the exception."
  },
  "nativeErrorCode": {
    detail: "(property) Exception.nativeErrorCode",
    description: 'Applies to type="database". Native error code associated with exception. Database drivers typically provide error codes to diagnose failing database operations. Default value is -1.',
    appliesToTypes: ["database"]
  },
  "sqlState": {
    detail: "(property) Exception.sqlState",
    description: 'Applies to type="database". SQLState associated with exception. Database drivers typically provide error codes to help diagnose failing database operations. Default value is -1.',
    appliesToTypes: ["database"]
  },
  "sql": {
    detail: "(property) Exception.sql",
    description: 'Applies to type="database". The SQL statement sent to the data source.',
    appliesToTypes: ["database"]
  },
  "queryError": {
    detail: "(property) Exception.queryError",
    description: 'Applies to type="database". The error message as reported by the database driver.',
    appliesToTypes: ["database"]
  },
  "where": {
    detail: "(property) Exception.where",
    description: 'Applies to type="database". If the query uses the cfqueryparam tag, query parameter name-value pairs.',
    appliesToTypes: ["database"]
  },
  "errNumber": {
    detail: "(property) Exception.errNumber",
    description: 'Applies to type="expression". Internal expression error number.',
    appliesToTypes: ["expression"]
  },
  "missingFileName": {
    detail: "(property) Exception.missingFileName",
    description: 'Applies to type="missingInclude". Name of file that could not be included.',
    appliesToTypes: ["missinginclude"]
  },
  "lockName": {
    detail: "(property) Exception.lockName",
    description: 'Applies to type="lock". Name of affected lock (if the lock is unnamed, the value is "anonymous").',
    appliesToTypes: ["lock"]
  },
  "lockOperation": {
    detail: "(property) Exception.lockOperation",
    description: 'Applies to type="lock". Operation that failed (Timeout, Create Mutex, or Unknown).',
    appliesToTypes: ["lock"]
  },
  "errorCode": {
    detail: "(property) Exception.errorCode",
    description: 'Applies to type="custom". String error code.'
  },
  "extendedInfo": {
    detail: "(property) Exception.extendedInfo",
    description: 'Applies to type="application" and "custom". Custom error message; information that the default exception handler does not display.',
    appliesToTypes: ["application"]
  }
};
var scriptCatchPattern = /\}\s*catch\s*\(\s*([A-Za-z0-9_.$]+)\s+([_$a-zA-Z][$\w]*)\s*\)\s*\{/gi;
function parseCatches(documentStateContext, isScript, docRange, _token) {
  let catchInfoArr = [];
  const document2 = documentStateContext.document;
  let textOffset = 0;
  let documentText = documentStateContext.sanitizedDocumentText;
  if (docRange && document2.validateRange(docRange)) {
    textOffset = document2.offsetAt(docRange.start);
    documentText = documentText.slice(textOffset, document2.offsetAt(docRange.end));
  }
  if (isScript) {
    let scriptCatchMatch = null;
    while (scriptCatchMatch = scriptCatchPattern.exec(documentText)) {
      const catchType = scriptCatchMatch[1] ? scriptCatchMatch[1] : "any";
      const catchVariable = scriptCatchMatch[2];
      const catchBodyStartOffset = textOffset + scriptCatchMatch.index + scriptCatchMatch[0].length;
      const catchBodyEndPosition = getClosingPosition(documentStateContext, catchBodyStartOffset, "}", _token);
      const catchBodyRange = new import_vscode21.Range(
        document2.positionAt(catchBodyStartOffset),
        catchBodyEndPosition.translate(0, -1)
      );
      const catchInfo = {
        type: catchType,
        variableName: catchVariable,
        bodyRange: catchBodyRange
      };
      catchInfoArr.push(catchInfo);
    }
  } else {
    const tagName = "cfcatch";
    const tags = parseTags(documentStateContext, tagName, docRange, _token);
    tags.forEach((tag) => {
      if (tag.bodyRange === void 0) {
        return;
      }
      let catchType = "any";
      let catchVariable = tagName;
      if (tag.attributes.has("type")) {
        catchType = tag.attributes.get("type").value;
      }
      if (tag.attributes.has("name")) {
        catchVariable = tag.attributes.get("name").value;
      }
      const catchInfo = {
        type: catchType,
        variableName: catchVariable,
        bodyRange: tag.bodyRange
      };
      catchInfoArr.push(catchInfo);
    });
    const cfScriptRanges = getCfScriptRanges(document2, docRange, _token);
    cfScriptRanges.forEach((range) => {
      const cfscriptCatches = parseCatches(documentStateContext, true, range, _token);
      catchInfoArr = catchInfoArr.concat(cfscriptCatches);
    });
  }
  return catchInfoArr;
}

// src/entities/cgi.ts
init_process();
init_buffer();
var cgiVariables = {
  // Server
  "SERVER_SOFTWARE": {
    detail: "CGI.SERVER_SOFTWARE",
    description: "Name and version of the information server software answering the request (and running the gateway). Format: name/version.",
    links: []
  },
  "SERVER_NAME": {
    detail: "CGI.SERVER_NAME",
    description: "Server's hostname, DNS alias, or IP address as it appears in self-referencing URLs.",
    links: []
  },
  "GATEWAY_INTERFACE": {
    detail: "CGI.GATEWAY_INTERFACE",
    description: "CGI specification revision with which this server complies. Format: CGI/revision.",
    links: []
  },
  "SERVER_PROTOCOL": {
    detail: "CGI.SERVER_PROTOCOL",
    description: "Name and revision of the information protocol this request came in with. Format: protocol/revision.",
    links: []
  },
  "SERVER_PORT": {
    detail: "CGI.SERVER_PORT",
    description: "Port number to which the request was sent.",
    links: []
  },
  "REQUEST_METHOD": {
    detail: "CGI.REQUEST_METHOD",
    description: "Method with which the request was made. For HTTP, this is Get, Head, Post, and so on.",
    links: []
  },
  "PATH_INFO": {
    detail: "CGI.PATH_INFO",
    description: "Extra path information, as given by the client. Scripts can be accessed by their virtual pathname, followed by extra information at the end of this path. The extra information is sent as PATH_INFO.",
    links: []
  },
  "PATH_TRANSLATED": {
    detail: "CGI.PATH_TRANSLATED",
    description: "Translated version of PATH_INFO after any virtual-to-physical mapping.",
    links: []
  },
  "SCRIPT_NAME": {
    detail: "CGI.SCRIPT_NAME",
    description: "Virtual path to the script that is executing; used for self-referencing URLs.",
    links: []
  },
  "QUERY_STRING": {
    detail: "CGI.QUERY_STRING",
    description: "Query information that follows the ? in the URL that referenced this script.",
    links: []
  },
  "REMOTE_HOST": {
    detail: "CGI.REMOTE_HOST",
    description: "Hostname making the request. If the server does not have this information, it sets REMOTE_ADDR and does not set REMOTE_HOST.",
    links: []
  },
  "REMOTE_ADDR": {
    detail: "CGI.REMOTE_ADDR",
    description: "IP address of the remote host making the request.",
    links: []
  },
  "AUTH_TYPE": {
    detail: "CGI.AUTH_TYPE",
    description: "If the server supports user authentication, and the script is protected, the protocol-specific authentication method used to validate the user.",
    links: []
  },
  "REMOTE_USER": {
    detail: "CGI.REMOTE_USER",
    description: "If the server supports user authentication, and the script is protected, the username the user has authenticated as. (Also available as AUTH_USER.)",
    links: []
  },
  "AUTH_USER": {
    detail: "CGI.AUTH_USER",
    description: "If the server supports user authentication, and the script is protected, the username the user has authenticated as. (Also available as AUTH_USER.)",
    links: []
  },
  "REMOTE_IDENT": {
    detail: "CGI.REMOTE_IDENT",
    description: "If the HTTP server supports RFC 931 identification, this variable is set to the remote username retrieved from the server. Use this variable for logging only.",
    links: []
  },
  "CONTENT_TYPE": {
    detail: "CGI.CONTENT_TYPE",
    description: "For queries that have attached information, such as HTTP POST and PUT, this is the content type of the data.",
    links: []
  },
  "CONTENT_LENGTH": {
    detail: "CGI.CONTENT_LENGTH",
    description: "Length of the content as given by the client.",
    links: []
  },
  // Client
  "HTTP_REFERER": {
    detail: "CGI.HTTP_REFERER",
    description: "The referring document that linked to or submitted form data.",
    links: []
  },
  "HTTP_USER_AGENT": {
    detail: "CGI.HTTP_USER_AGENT",
    description: "The browser that the client is currently using to send the request. Format: software/version library/version.",
    links: []
  },
  "HTTP_IF_MODIFIED_SINCE": {
    detail: "CGI.HTTP_IF_MODIFIED_SINCE",
    description: "The last time the page was modified. The browser determines whether to set this variable, usually in response to the server having sent the LAST_MODIFIED HTTP header. It can be used to take advantage of browser-side caching.",
    links: []
  },
  "HTTP_URL": {
    detail: "CGI.HTTP_URL",
    description: "The URL path in an encoded format.",
    links: []
  }
};

// src/entities/globals.ts
init_process();
init_buffer();
var import_vscode22 = require("vscode");
function globalTagSyntaxToScript(globalTag) {
  const attributes = [];
  const cfStartTagPattern = getCfStartTagPattern();
  const attributeStr = cfStartTagPattern.exec(globalTag.syntax)[3];
  if (attributeStr) {
    let attributeMatch = null;
    while (attributeMatch = ATTRIBUTES_PATTERN.exec(attributeStr)) {
      attributes.push(attributeMatch[0]);
    }
  }
  return `${globalTag.name}(${attributes.join(", ")})`;
}
function constructTagSnippet(globalTag, includeAttributesSetType = "required" /* Required */, attributeQuoteType = "double" /* Double */, includeAttributesCustom, includeDefaultValue = false, isScript = false) {
  let tagSnippet;
  if (includeAttributesSetType !== "none" /* None */ || includeAttributesCustom !== void 0 && includeAttributesCustom.length > 0) {
    let snippetParamParts = [];
    if (globalTag.signatures.length > 0) {
      const sig = globalTag.signatures[0];
      let parameters = sig.parameters;
      if (includeAttributesCustom !== void 0) {
        parameters = includeAttributesCustom.map((attributeEntry) => {
          return sig.parameters.find((param) => {
            return equalsIgnoreCase(param.name, attributeEntry.name);
          });
        }).filter((param) => {
          return param !== void 0;
        });
      } else if (includeAttributesSetType === "required" /* Required */) {
        parameters = parameters.filter((param) => {
          return param.required;
        });
      }
      snippetParamParts = parameters.map((param, index) => {
        return constructAttributeSnippet(param, index, attributeQuoteType, includeDefaultValue, includeAttributesCustom);
      });
    }
    let snippetString = "";
    if (isScript) {
      snippetString = `${globalTag.name}(${snippetParamParts.join(", ")})$0`;
    } else {
      if (snippetParamParts.length > 0) {
        snippetString = `${globalTag.name} ${snippetParamParts.join(" ")}$0`;
      } else {
        snippetString = globalTag.name;
      }
    }
    tagSnippet = new import_vscode22.SnippetString(snippetString);
  }
  return tagSnippet;
}
function constructAttributeSnippet(param, index, attributeQuoteType = "double" /* Double */, includeDefaultValue = false, includeAttributesCustom) {
  const tabstopNumber = index + 1;
  let placeholder = "";
  let customValue;
  if (includeAttributesCustom !== void 0) {
    const customEntry = includeAttributesCustom.find((attributeEntry) => {
      return equalsIgnoreCase(attributeEntry.name, param.name);
    });
    if (customEntry !== void 0) {
      customValue = customEntry.value;
    }
  }
  if (customValue !== void 0) {
    placeholder = customValue;
  } else if (includeDefaultValue && param.default) {
    placeholder = param.default;
  }
  const quoteStr = getQuote(attributeQuoteType);
  return `${param.name}=${quoteStr}\${${tabstopNumber}:${placeholder}}${quoteStr}`;
}

// src/entities/keyword.ts
init_process();
init_buffer();
var keywords = {
  "var": {
    description: "",
    onlyScript: false,
    links: []
  },
  "for": {
    description: "",
    onlyScript: true,
    links: []
  },
  "default": {
    description: "",
    onlyScript: true,
    links: []
  },
  "continue": {
    description: "",
    onlyScript: true,
    links: []
  },
  "import": {
    description: "",
    onlyScript: true,
    links: []
  },
  "finally": {
    description: "",
    onlyScript: true,
    links: []
  },
  "interface": {
    description: "",
    onlyScript: true,
    links: []
  },
  "pageencoding": {
    description: "",
    onlyScript: true,
    links: []
  },
  "abort": {
    description: "",
    onlyScript: true,
    links: []
  },
  "exist": {
    description: "",
    onlyScript: true,
    links: []
  },
  "true": {
    description: "",
    onlyScript: false,
    links: []
  },
  "false": {
    description: "",
    onlyScript: false,
    links: []
  }
};

// src/features/completionItemProvider.ts
var snippets = require_snippets();
var triggerCompletionCommand = {
  title: "Trigger Suggest",
  command: "editor.action.triggerSuggest"
};
function matches(word, suggestion) {
  return word.length === 0 || suggestion.length >= word.length && equalsIgnoreCase(suggestion.substr(0, word.length), word);
}
function createNewProposal(name, kind, entry, sortPrefix) {
  const proposal = new import_vscode23.CompletionItem(name, kind);
  if (entry) {
    if (entry.detail) {
      proposal.detail = entry.detail;
    }
    if (entry.description) {
      proposal.documentation = textToMarkdownString(entry.description);
    }
  }
  if (sortPrefix) {
    proposal.sortText = `${sortPrefix}${name}`;
  }
  return proposal;
}
var CFMLCompletionItemProvider = class {
  /**
   * Provide completion items for the given position and document.
   * @param document The document in which the command was invoked.
   * @param position The position at which the command was invoked.
   * @param _token A cancellation token.
   * @param context How the completion was triggered.
   * @returns
   */
  async provideCompletionItems(document2, position, _token, context) {
    let result = [];
    const documentUri = document2.uri;
    const cfmlCompletionSettings = import_vscode23.workspace.getConfiguration("cfml.suggest", documentUri);
    const shouldProvideCompletions = cfmlCompletionSettings.get("enable", true);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    if (!shouldProvideCompletions) {
      return result;
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const cfscriptRanges = getCfScriptRanges(document2, void 0, _token);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, false);
    const currentWordMatches = (name) => {
      return matches(documentPositionStateContext.currentWord, name);
    };
    const completionState = Object.assign(
      documentPositionStateContext,
      {
        completionContext: context,
        cfmlCompletionSettings,
        currentWordMatches
      }
    );
    const userEngine = completionState.userEngine;
    const docIsCfmFile = completionState.isCfmFile;
    const docIsCfcFile = completionState.isCfcFile;
    const thisComponent = completionState.component;
    const positionIsCfScript = completionState.positionIsScript;
    const docPrefix = completionState.docPrefix;
    const isContinuingExpression2 = completionState.isContinuingExpression;
    if (completionState.positionInComment) {
      return result;
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (!positionIsCfScript || userEngine.supportsScriptTags()) {
      const ignoredTags = expressionCfmlTags;
      const cfTagAttributePattern2 = positionIsCfScript ? getCfScriptTagAttributePattern() : getCfTagAttributePattern();
      const cfTagAttributeMatch = cfTagAttributePattern2.exec(docPrefix);
      if (cfTagAttributeMatch) {
        const cfTagAttributeMatchOffset = cfTagAttributeMatch.index;
        const tagAttributePrefix = cfTagAttributeMatch[1];
        const tagAttributeStartOffset = cfTagAttributeMatchOffset + tagAttributePrefix.length;
        const tagName = cfTagAttributeMatch[2];
        const tagAttributesLength = cfTagAttributeMatch[3].length;
        const globalTag = getGlobalTag(tagName);
        if (globalTag && !ignoredTags.includes(globalTag.name)) {
          const attributeValueMatch = VALUE_PATTERN.exec(docPrefix);
          if (attributeValueMatch) {
            const attributeName = attributeValueMatch[1];
            const currentValue = attributeValueMatch[3] !== void 0 ? attributeValueMatch[3] : attributeValueMatch[4];
            const attributeDocs = new MyMap();
            globalTag.signatures.forEach((sig) => {
              sig.parameters.forEach((param) => {
                attributeDocs.set(param.name.toLowerCase(), param);
              });
            });
            const attributeValueCompletions = await getGlobalTagAttributeValueCompletions(completionState, globalTag, attributeName, currentValue);
            if (attributeValueCompletions.length > 0) {
              return attributeValueCompletions;
            }
          } else {
            return getGlobalTagAttributeCompletions(completionState, globalTag, tagAttributeStartOffset, tagAttributesLength);
          }
        }
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (!positionIsCfScript) {
      const tagAttributePattern2 = getTagAttributePattern();
      const tagAttributeMatch = tagAttributePattern2.exec(docPrefix);
      if (tagAttributeMatch) {
        const tagAttributeMatchOffset = tagAttributeMatch.index;
        const tagAttributePrefix = tagAttributeMatch[1];
        const tagAttributeStartOffset = tagAttributeMatchOffset + tagAttributePrefix.length;
        const tagName = tagAttributeMatch[2].toLowerCase();
        const tagAttributesLength = tagAttributeMatch[3].length;
        if (isKnownTag(tagName)) {
          const attributeValueMatch = VALUE_PATTERN.exec(docPrefix);
          if (attributeValueMatch) {
            const attributeName = attributeValueMatch[1].toLowerCase();
            const currentValue = attributeValueMatch[3] !== void 0 ? attributeValueMatch[3] : attributeValueMatch[4];
            const attributeValueCompletions = getHTMLTagAttributeValueCompletions(tagName, attributeName, currentValue);
            if (attributeValueCompletions.length > 0) {
              return attributeValueCompletions;
            }
          } else {
            return getHTMLTagAttributeCompletions(completionState, tagName, tagAttributeStartOffset, tagAttributesLength);
          }
        }
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (docIsCfcFile && isInComponentHead(documentPositionStateContext)) {
      const componentDottedPathMatch2 = componentExtendsPathPrefix.exec(docPrefix);
      if (componentDottedPathMatch2) {
        const componentDottedPath = componentDottedPathMatch2[3];
        const parentDottedPath = componentDottedPath.split(".").slice(0, -1).join(".");
        return getDottedPathCompletions(completionState, parentDottedPath);
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const shouldProvideSnippetItems = cfmlCompletionSettings.get("snippets.enable", true);
    if (shouldProvideSnippetItems && !isContinuingExpression2) {
      const excludedSnippetItems = cfmlCompletionSettings.get("snippets.exclude", []);
      const snippetCompletions2 = getStandardSnippetCompletions(completionState, excludedSnippetItems);
      result = result.concat(snippetCompletions2);
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    let allVariableAssignments = await collectDocumentVariableAssignments(documentPositionStateContext, _token);
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const applicationDocVariables = await getApplicationVariables(documentUri);
    allVariableAssignments = allVariableAssignments.concat(applicationDocVariables.filter((variable) => {
      return getMatchingVariables(allVariableAssignments, variable.identifier, variable.scope).length === 0;
    }));
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const serverDocVariables = getServerVariables(documentUri, _token);
    allVariableAssignments = allVariableAssignments.concat(serverDocVariables.filter((variable) => {
      return getMatchingVariables(allVariableAssignments, variable.identifier, variable.scope).length === 0;
    }));
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    result = result.concat(getVariableCompletions(completionState, allVariableAssignments));
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const catchInfoArr = parseCatches(documentPositionStateContext, documentPositionStateContext.docIsScript, void 0, _token);
    const applicableCatches = catchInfoArr.filter((catchInfo) => {
      return catchInfo.bodyRange.contains(position);
    });
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (applicableCatches.length > 0) {
      const closestCatch = applicableCatches.pop();
      if (!isContinuingExpression2 && currentWordMatches(closestCatch.variableName)) {
        result.push(createNewProposal(
          closestCatch.variableName,
          import_vscode23.CompletionItemKind.Struct,
          {
            detail: closestCatch.variableName,
            description: "A structure that contains information about the exception"
          }
        ));
      }
      if (_token && _token.isCancellationRequested) {
        return void 0;
      }
      if (getVariablePrefixPattern(closestCatch.variableName).test(docPrefix)) {
        for (const propName in catchProperties) {
          const catchProp = catchProperties[propName];
          const catchType = closestCatch.type.toLowerCase();
          if (currentWordMatches(propName) && (catchType === "any" || catchProp.appliesToTypes === void 0 || catchProp.appliesToTypes.includes(catchType))) {
            result.push(createNewProposal(propName, import_vscode23.CompletionItemKind.Property, catchProp));
          }
        }
      }
      if (_token && _token.isCancellationRequested) {
        return void 0;
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (getValidScopesPrefixPattern(["cgi" /* CGI */], false).test(docPrefix)) {
      for (const name in cgiVariables) {
        if (currentWordMatches(name)) {
          result.push(createNewProposal(name, import_vscode23.CompletionItemKind.Property, cgiVariables[name]));
        }
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (docIsCfmFile) {
      if (getValidScopesPrefixPattern(["variables" /* Variables */], true).test(docPrefix)) {
        const tagFunctions = await parseTagFunctions(documentPositionStateContext, _token);
        const scriptFunctions = await parseScriptFunctions(documentPositionStateContext, _token);
        const allTemplateFunctions = tagFunctions.concat(scriptFunctions.filter((func) => {
          return isInRanges(cfscriptRanges, func.location.range.start, false, _token);
        }));
        allTemplateFunctions.filter((func) => {
          return currentWordMatches(func.name);
        }).forEach((func) => {
          result.push(createNewProposal(
            func.name,
            import_vscode23.CompletionItemKind.Function,
            { detail: `(function) ${constructSyntaxString(func)}`, description: func.description }
          ));
        });
      }
    } else if (docIsCfcFile) {
      const componentFunctionCompletions = getComponentFunctionCompletions(completionState, thisComponent, _token);
      result = result.concat(componentFunctionCompletions);
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const varPrefixMatch = getVariableExpressionPrefixPattern().exec(docPrefix);
    if (varPrefixMatch) {
      const varMatchText = varPrefixMatch[0];
      const varScope = varPrefixMatch[2];
      const varQuote = varPrefixMatch[3];
      const varName = varPrefixMatch[4];
      let dotSeparatedCount = 2;
      if (varScope && !varQuote) {
        dotSeparatedCount++;
      }
      if (varMatchText.split(".").length === dotSeparatedCount) {
        if (docIsCfcFile && !varScope && equalsIgnoreCase(varName, "super")) {
          const addedFunctions = new MySet();
          const baseComponent = getComponent(thisComponent.extends, _token);
          let currComponent = baseComponent;
          while (currComponent) {
            currComponent.functions.filter((_func, funcKey) => {
              return currentWordMatches(funcKey) && !addedFunctions.has(funcKey);
            }).forEach((func, funcKey) => {
              addedFunctions.add(funcKey);
              result.push(createNewProposal(
                func.name,
                import_vscode23.CompletionItemKind.Function,
                { detail: `(function) ${currComponent.name}.${constructSyntaxString(func)}`, description: func.description }
              ));
            });
            if (currComponent.extends) {
              currComponent = getComponent(currComponent.extends, _token);
            } else {
              currComponent = void 0;
            }
          }
        } else {
          const scopeVal = varScope ? Scope.valueOf(varScope) : void 0;
          const foundVar = getBestMatchingVariable(allVariableAssignments, varName, scopeVal);
          if (foundVar) {
            if (foundVar.dataTypeComponentUri) {
              const initialFoundComp = getComponent(foundVar.dataTypeComponentUri, _token);
              if (initialFoundComp) {
                const addedFunctions = new MySet();
                const addedVariables = new MySet();
                const validFunctionAccess = new MySet(["remote" /* Remote */, "public" /* Public */]);
                if (thisComponent) {
                  if (isSubcomponentOrEqual(thisComponent, initialFoundComp, _token)) {
                    validFunctionAccess.add("private" /* Private */);
                    validFunctionAccess.add("package" /* Package */);
                  }
                }
                if (!validFunctionAccess.has("package" /* Package */) && Utils.dirname(documentUri).fsPath === Utils.dirname(initialFoundComp.uri).fsPath) {
                  validFunctionAccess.add("package" /* Package */);
                }
                let foundComponent = initialFoundComp;
                while (foundComponent) {
                  foundComponent.functions.filter((func, funcKey) => {
                    return currentWordMatches(funcKey) && validFunctionAccess.has(func.access) && !addedFunctions.has(funcKey);
                  }).forEach((func, funcKey) => {
                    result.push(createNewProposal(
                      func.name,
                      import_vscode23.CompletionItemKind.Function,
                      { detail: `(function) ${foundComponent.name}.${constructSyntaxString(func)}`, description: func.description }
                    ));
                    addedFunctions.add(funcKey);
                  });
                  foundComponent.variables.filter((variable) => {
                    const varKey = variable.identifier.toLowerCase();
                    return variable.scope === "this" /* This */ && !addedVariables.has(varKey);
                  }).forEach((variable) => {
                    const varKey = variable.identifier.toLowerCase();
                    const varKind = usesConstantConvention(variable.identifier) || variable.final ? import_vscode23.CompletionItemKind.Constant : import_vscode23.CompletionItemKind.Variable;
                    const varType = getVariableTypeString(variable);
                    result.push(createNewProposal(
                      variable.identifier,
                      varKind,
                      { detail: `(${variable.scope}) ${variable.identifier}: ${varType}`, description: variable.description }
                    ));
                    addedVariables.add(varKey);
                  });
                  if (foundComponent.extends) {
                    foundComponent = getComponent(foundComponent.extends, _token);
                  } else {
                    foundComponent = void 0;
                  }
                }
              }
            } else {
              if (foundVar.dataType === "query" /* Query */) {
                if (isQuery(foundVar)) {
                  foundVar.selectColumnNames.filter((column) => {
                    return currentWordMatches(column);
                  }).forEach((column) => {
                    result.push(createNewProposal(
                      column,
                      import_vscode23.CompletionItemKind.EnumMember,
                      { detail: `(query column) ${column}` }
                    ));
                  });
                }
                for (const queryPropertyName in queryObjectProperties) {
                  const queryProperty = queryObjectProperties[queryPropertyName];
                  result.push(createNewProposal(
                    queryPropertyName,
                    import_vscode23.CompletionItemKind.Property,
                    { detail: queryProperty.detail, description: queryProperty.description }
                  ));
                }
              }
            }
          }
        }
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const shouldProvideGFItems = cfmlCompletionSettings.get("globalFunctions.enable", true);
    if (shouldProvideGFItems) {
      const globalFunctionCompletions = getGlobalFunctionCompletions(completionState);
      result = result.concat(globalFunctionCompletions);
      const memberFunctionCompletions = getGlobalMemberFunctionCompletions(completionState);
      result = result.concat(memberFunctionCompletions);
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const snippetCompletions = getCustomSnippetCompletions(completionState);
    result = result.concat(snippetCompletions);
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const shouldProvideGTItems = cfmlCompletionSettings.get("globalTags.enable", true);
    if (shouldProvideGTItems) {
      const globalTagCompletions = positionIsCfScript ? getGlobalTagScriptCompletions(completionState) : getGlobalTagCompletions(completionState);
      result = result.concat(globalTagCompletions);
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const shouldProvideHtmlTags = cfmlCompletionSettings.get("htmlTags.enable", true);
    if (shouldProvideHtmlTags && docIsCfmFile && !positionIsCfScript) {
      result = result.concat(getHTMLTagCompletions(completionState));
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const shouldProvideCss = cfmlCompletionSettings.get("css.enable", true);
    if (shouldProvideCss && docIsCfmFile && isInCss(documentPositionStateContext, position, _token)) {
      const cssWordRange = document2.getWordRangeAtPosition(position, cssWordRegex);
      const currentCssWord = cssWordRange ? document2.getText(cssWordRange) : "";
      if (/[{;]\s*([a-z-]*)$/i.test(docPrefix)) {
        completionState.wordRange = cssWordRange;
        completionState.currentWord = currentCssWord;
        result = result.concat(getCSSPropertyCompletions(completionState));
      }
      if (currentCssWord.startsWith("@")) {
        completionState.wordRange = cssWordRange;
        completionState.currentWord = currentCssWord;
        result = result.concat(getCSSAtDirectiveCompletions(completionState));
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    if (!isContinuingExpression2) {
      for (const name in keywords) {
        const keyword = keywords[name];
        if (currentWordMatches(name) && (!keyword.onlyScript || positionIsCfScript)) {
          result.push(createNewProposal(name, import_vscode23.CompletionItemKind.Keyword, keyword));
        }
      }
      if (thisComponent && thisComponent.extends) {
        result.push(createNewProposal("super", import_vscode23.CompletionItemKind.Keyword, { description: "Reference to the base component" }));
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const scopesCase = cfmlCompletionSettings.get("scopes.case", "lower");
    const uppercaseScope = scopesCase == "upper";
    if (!isContinuingExpression2) {
      for (let name in scopes) {
        if (currentWordMatches(name)) {
          if (uppercaseScope) name = name.toUpperCase();
          result.push(createNewProposal(name, import_vscode23.CompletionItemKind.Struct, scopes[name]));
        }
      }
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    const componentDottedPathMatch = componentDottedPathPrefix.exec(docPrefix);
    if (componentDottedPathMatch) {
      const componentDottedPath = componentDottedPathMatch[3];
      const parentDottedPath = componentDottedPath.split(".").slice(0, -1).join(".");
      const newInstanceCompletions = await getDottedPathCompletions(completionState, parentDottedPath);
      result = result.concat(newInstanceCompletions);
    }
    if (_token && _token.isCancellationRequested) {
      return void 0;
    }
    return result;
  }
};
function getGlobalTagAttributeCompletions(state, globalTag, attributeStartOffset, attributesLength) {
  const attributeDocs = new MyMap();
  globalTag.signatures.forEach((sig) => {
    sig.parameters.forEach((param) => {
      attributeDocs.set(param.name.toLowerCase(), param);
    });
  });
  const attributeNames = new MySet(attributeDocs.keys());
  const tagAttributeRange = new import_vscode23.Range(state.document.positionAt(attributeStartOffset), state.document.positionAt(attributeStartOffset + attributesLength));
  const parsedAttributes = parseAttributes(state.document, tagAttributeRange, attributeNames);
  const usedAttributeNames = new MySet(parsedAttributes.keys());
  const attributeCompletions = getCFTagAttributeCompletions(state, globalTag, Array.from(attributeDocs.values()), usedAttributeNames);
  return attributeCompletions;
}
function getCFTagAttributeCompletions(state, globalTag, params, usedAttributeNames) {
  const cfmlGTAttributesQuoteType = state.cfmlCompletionSettings.get("globalTags.attributes.quoteType", "double" /* Double */);
  const cfmlGTAttributesDefault = state.cfmlCompletionSettings.get("globalTags.attributes.defaultValue", false);
  const filteredParams = params.filter((param) => {
    return !usedAttributeNames.has(param.name.toLowerCase()) && state.currentWordMatches(param.name);
  });
  const attributeCompletions = filteredParams.map((param) => {
    const attributeItem = new import_vscode23.CompletionItem(param.name, import_vscode23.CompletionItemKind.Property);
    attributeItem.detail = `${param.required ? "(required) " : ""}${param.name}: ${param.dataType}`;
    attributeItem.documentation = param.description;
    const wordSuffix = state.sanitizedDocumentText.slice(state.document.offsetAt(state.wordRange.end));
    if (!wordSuffix.trim().startsWith("=")) {
      if (cfmlGTAttributesQuoteType === "none" /* None */) {
        attributeItem.insertText = param.name + "=";
      } else {
        attributeItem.insertText = new import_vscode23.SnippetString(constructAttributeSnippet(param, 0, cfmlGTAttributesQuoteType, cfmlGTAttributesDefault));
      }
    }
    attributeItem.sortText = "!" + param.name + "=";
    return attributeItem;
  });
  return attributeCompletions;
}
async function getGlobalTagAttributeValueCompletions(state, globalTag, attributeName, currentValue) {
  let attrValCompletions = [];
  const attributeDocs = new MyMap();
  globalTag.signatures.forEach((sig) => {
    sig.parameters.forEach((param2) => {
      attributeDocs.set(param2.name.toLowerCase(), param2);
    });
  });
  const param = attributeDocs.get(attributeName);
  if (param) {
    if (param.dataType === "boolean" /* Boolean */) {
      attrValCompletions.push(createNewProposal("true", import_vscode23.CompletionItemKind.Unit, void 0, "!!"));
      attrValCompletions.push(createNewProposal("false", import_vscode23.CompletionItemKind.Unit, void 0, "!!"));
    } else {
      if (param.enumeratedValues) {
        param.enumeratedValues.forEach((enumVal) => {
          enumVal = enumVal.toString();
          if (matches(currentValue, enumVal)) {
            attrValCompletions.push(createNewProposal(enumVal, import_vscode23.CompletionItemKind.Unit, void 0, "!!"));
          }
        });
      }
    }
  }
  const componentPathAttributes2 = getComponentPathAttributes();
  if (Object.prototype.hasOwnProperty.call(componentPathAttributes2, globalTag.name) && componentPathAttributes2[globalTag.name].includes(attributeName)) {
    const parentDottedPath = currentValue.split(".").slice(0, -1).join(".");
    attrValCompletions = attrValCompletions.concat(await getDottedPathCompletions(state, parentDottedPath));
  }
  return attrValCompletions;
}
function getHTMLTagAttributeCompletions(state, htmlTagName, attributeStartOffset, attributesLength) {
  const attributeNames = htmlDataProvider.provideAttributes(htmlTagName.toLowerCase()).map((a) => a.name);
  const tagAttributeRange = new import_vscode23.Range(state.document.positionAt(attributeStartOffset), state.document.positionAt(attributeStartOffset + attributesLength));
  const parsedAttributes = parseAttributes(state.document, tagAttributeRange, new MySet(attributeNames));
  const usedAttributeNames = new MySet(parsedAttributes.keys());
  const unusedAttributeNames = attributeNames.filter((attr) => {
    return !usedAttributeNames.has(attr.toLowerCase()) && state.currentWordMatches(attr);
  });
  const attributeCompletions = unusedAttributeNames.map((attr) => {
    const htmlTagAttributesQuoteType = state.cfmlCompletionSettings.get("htmlTags.attributes.quoteType", "double" /* Double */);
    const attribute = getAttribute(htmlTagName, attr);
    const attributeItem = new import_vscode23.CompletionItem(attr, import_vscode23.CompletionItemKind.Property);
    const wordSuffix = state.sanitizedDocumentText.slice(state.document.offsetAt(state.wordRange.end));
    if (!wordSuffix.trim().startsWith("=")) {
      attributeItem.insertText = new import_vscode23.SnippetString(constructHTMLAttributeSnippet(htmlTagName.toLowerCase(), attr, htmlTagAttributesQuoteType));
    }
    attributeItem.sortText = "!" + attr + "=";
    attributeItem.documentation = attribute.description;
    const attributeValueCompletions = getHTMLTagAttributeValueCompletions(htmlTagName.toLowerCase(), attr, "");
    if (attributeValueCompletions.length > 0) {
      attributeItem.command = triggerCompletionCommand;
    }
    return attributeItem;
  });
  return attributeCompletions;
}
function getHTMLTagAttributeValueCompletions(htmlTagName, attributeName, currentValue) {
  const attrValCompletions = [];
  htmlDataProvider.provideValues(htmlTagName.toLowerCase(), attributeName.toLowerCase()).filter((val) => {
    return matches(currentValue, val.name);
  }).forEach((val) => {
    attrValCompletions.push(createNewProposal(val.name, import_vscode23.CompletionItemKind.Unit, { description: val.description }, "!"));
  });
  return attrValCompletions;
}
function getStandardSnippetCompletions(state, excludedSnippetItems = []) {
  const snippetCompletions = [];
  for (const key in snippets) {
    if (!excludedSnippetItems.includes(key)) {
      const snippet = snippets[key];
      if (state.currentWordMatches(snippet.prefix) && snippet.scope === "cfml" && (snippet.context.indexOf("script") !== -1 && state.positionIsScript || snippet.context.indexOf("tag") !== -1 && !state.positionIsScript)) {
        const standardSnippet = new import_vscode23.CompletionItem(snippet.prefix, import_vscode23.CompletionItemKind.Snippet);
        standardSnippet.detail = `(snippet) ${snippet.description}`;
        const snippetString = Array.isArray(snippet.body) ? snippet.body.join("\n") : snippet.body;
        standardSnippet.insertText = new import_vscode23.SnippetString(snippetString);
        snippetCompletions.push(standardSnippet);
      }
    }
  }
  return snippetCompletions;
}
function getVariableCompletions(state, variables) {
  let variableCompletions = [];
  const variableScopePrefixPattern = getVariableScopePrefixPattern();
  const variableScopePrefixMatch = variableScopePrefixPattern.exec(state.docPrefix);
  if (variableScopePrefixMatch) {
    const scopePrefix = variableScopePrefixMatch[1];
    let prefixScope;
    if (scopePrefix) {
      prefixScope = Scope.valueOf(scopePrefix);
    }
    variableCompletions = variables.filter((variable) => {
      if (!state.currentWordMatches(variable.identifier) || variable.declarationLocation.range.contains(state.position)) {
        return false;
      }
      if (prefixScope) {
        return variable.scope === prefixScope || variable.scope === "unknown" /* Unknown */ && unscopedPrecedence.includes(prefixScope);
      }
      return unscopedPrecedence.includes(variable.scope) || variable.scope === "unknown" /* Unknown */;
    }).map((variable) => {
      const varKind = usesConstantConvention(variable.identifier) || variable.final ? import_vscode23.CompletionItemKind.Constant : import_vscode23.CompletionItemKind.Variable;
      const varType = getVariableTypeString(variable);
      return createNewProposal(variable.identifier, varKind, { detail: `(${variable.scope}) ${variable.identifier}: ${varType}`, description: variable.description });
    });
  }
  return variableCompletions;
}
function getComponentFunctionCompletions(state, component, _token) {
  const componentFunctionCompletions = [];
  if (component) {
    const addedFunctions = new MySet();
    const privateAccessPrefixMatched = getValidScopesPrefixPattern(["variables" /* Variables */], true).test(state.docPrefix);
    const otherAccessPrefixMatched = getValidScopesPrefixPattern(["variables" /* Variables */, "this" /* This */], true).test(state.docPrefix);
    const getterSetterPrefixMatched = getValidScopesPrefixPattern(["this" /* This */], true).test(state.docPrefix);
    let currComponent = component;
    while (currComponent) {
      currComponent.functions.filter((func, funcKey) => {
        let hasValidScopes = false;
        if (func.access === "private" /* Private */) {
          hasValidScopes = privateAccessPrefixMatched;
        } else if (func.isImplicit) {
          hasValidScopes = getterSetterPrefixMatched;
        } else {
          hasValidScopes = otherAccessPrefixMatched;
        }
        return hasValidScopes && state.currentWordMatches(funcKey) && !addedFunctions.has(funcKey);
      }).forEach((func, funcKey) => {
        addedFunctions.add(funcKey);
        componentFunctionCompletions.push(
          createNewProposal(func.name, import_vscode23.CompletionItemKind.Function, { detail: `(function) ${currComponent.name}.${constructSyntaxString(func)}`, description: func.description })
        );
      });
      if (currComponent.extends) {
        currComponent = getComponent(currComponent.extends, _token);
      } else {
        currComponent = void 0;
      }
    }
  }
  return componentFunctionCompletions;
}
function getGlobalFunctionCompletions(state) {
  const cfmlGFFirstLetterCase = state.cfmlCompletionSettings.get("globalFunctions.firstLetterCase", "unchanged");
  const globalFunctionCompletions = [];
  if (!state.isContinuingExpression) {
    const globalFunctions = getAllGlobalFunctions();
    for (const name in globalFunctions) {
      if (state.currentWordMatches(name)) {
        const globalFunction = globalFunctions[name];
        let functionDetail = globalFunction.syntax;
        if (!functionDetail.startsWith("function ")) {
          functionDetail = "function " + globalFunction.syntax;
        }
        let globalFunctionName = globalFunction.name;
        if (cfmlGFFirstLetterCase === "lower") {
          globalFunctionName = `${globalFunctionName.charAt(0).toLowerCase()}${globalFunctionName.substr(1)}`;
        } else if (cfmlGFFirstLetterCase === "upper") {
          globalFunctionName = `${globalFunctionName.charAt(0).toUpperCase()}${globalFunctionName.substr(1)}`;
        }
        globalFunctionCompletions.push(
          createNewProposal(
            globalFunctionName,
            import_vscode23.CompletionItemKind.Function,
            { detail: globalFunction.syntax, description: globalFunction.description }
          )
        );
      }
    }
  }
  return globalFunctionCompletions;
}
function getGlobalMemberFunctionCompletions(state) {
  const cfmlGFFirstLetterCase = state.cfmlCompletionSettings.get("globalFunctions.firstLetterCase", "unchanged");
  const globalMemberFunctionCompletions = [];
  if (state.isMemberExpression) {
    const memberFunctions = getAllGlobalMemberFunctions();
    for (const name in memberFunctions) {
      if (state.currentWordMatches(name)) {
        const globalMemberFunction = memberFunctions[name];
        let functionDetail = globalMemberFunction.syntax;
        if (!functionDetail.startsWith("function ")) {
          functionDetail = "function " + globalMemberFunction.syntax;
        }
        let globalMemberFunctionName = globalMemberFunction.name;
        if (cfmlGFFirstLetterCase === "lower") {
          globalMemberFunctionName = `${globalMemberFunctionName.charAt(0).toLowerCase()}${globalMemberFunctionName.substr(1)}`;
        } else if (cfmlGFFirstLetterCase === "upper") {
          globalMemberFunctionName = `${globalMemberFunctionName.charAt(0).toUpperCase()}${globalMemberFunctionName.substr(1)}`;
        }
        globalMemberFunctionCompletions.push(
          createNewProposal(
            globalMemberFunctionName,
            import_vscode23.CompletionItemKind.Function,
            { detail: globalMemberFunction.syntax, description: globalMemberFunction.description }
          )
        );
      }
    }
  }
  return globalMemberFunctionCompletions;
}
function getGlobalTagCompletions(state) {
  const globalTagCompletions = [];
  const tagPrefixPattern2 = getTagPrefixPattern();
  const tagPrefixMatch = tagPrefixPattern2.exec(state.docPrefix);
  if (tagPrefixMatch) {
    const closingSlash = tagPrefixMatch[1];
    const cfmlGTAttributesQuoteType = state.cfmlCompletionSettings.get("globalTags.attributes.quoteType", "double" /* Double */);
    const cfmlGTAttributesDefault = state.cfmlCompletionSettings.get("globalTags.attributes.defaultValue", false);
    const cfmlGTAttributesSetType = state.cfmlCompletionSettings.get("globalTags.includeAttributes.setType", "none" /* None */);
    const cfmlGTAttributesCustom = state.cfmlCompletionSettings.get("globalTags.includeAttributes.custom", {});
    const globalTags = getAllGlobalTags();
    for (const tagName in globalTags) {
      if (state.currentWordMatches(tagName)) {
        const globalTag = globalTags[tagName];
        const thisGlobalTagCompletion = createNewProposal(
          globalTag.name,
          import_vscode23.CompletionItemKind.TypeParameter,
          { detail: globalTag.syntax, description: globalTag.description }
        );
        if (!closingSlash && (cfmlGTAttributesSetType !== "none" /* None */ || Object.prototype.hasOwnProperty.call(cfmlGTAttributesCustom, tagName))) {
          thisGlobalTagCompletion.insertText = constructTagSnippet(globalTag, cfmlGTAttributesSetType, cfmlGTAttributesQuoteType, cfmlGTAttributesCustom[tagName], cfmlGTAttributesDefault, false);
        }
        globalTagCompletions.push(thisGlobalTagCompletion);
      }
    }
  }
  return globalTagCompletions;
}
function getGlobalTagScriptCompletions(state) {
  const globalTagScriptCompletions = [];
  if (state.userEngine.supportsScriptTags() && !state.isContinuingExpression) {
    const cfmlGTAttributesQuoteType = state.cfmlCompletionSettings.get("globalTags.attributes.quoteType", "double" /* Double */);
    const cfmlGTAttributesDefault = state.cfmlCompletionSettings.get("globalTags.attributes.defaultValue", false);
    const cfmlGTAttributesSetType = state.cfmlCompletionSettings.get("globalTags.includeAttributes.setType", "none" /* None */);
    const cfmlGTAttributesCustom = state.cfmlCompletionSettings.get("globalTags.includeAttributes.custom", {});
    const globalTags = getAllGlobalTags();
    for (const tagName in globalTags) {
      const globalTag = globalTags[tagName];
      if (globalTag.scriptSyntax && globalTag.scriptSyntax.startsWith(tagName) && state.currentWordMatches(tagName)) {
        const thisGlobalTagScriptCompletion = createNewProposal(
          globalTag.name,
          import_vscode23.CompletionItemKind.Function,
          { detail: globalTagSyntaxToScript(globalTag), description: globalTag.description }
        );
        if (cfmlGTAttributesSetType !== "none" /* None */ || Object.prototype.hasOwnProperty.call(cfmlGTAttributesCustom, tagName)) {
          thisGlobalTagScriptCompletion.insertText = constructTagSnippet(globalTag, cfmlGTAttributesSetType, cfmlGTAttributesQuoteType, cfmlGTAttributesCustom[tagName], cfmlGTAttributesDefault, true);
        }
        globalTagScriptCompletions.push(thisGlobalTagScriptCompletion);
      }
    }
  }
  return globalTagScriptCompletions;
}
function getHTMLTagCompletions(state) {
  const htmlTagCompletions = [];
  const tagPrefixPattern2 = getTagPrefixPattern();
  const tagPrefixMatch = tagPrefixPattern2.exec(state.docPrefix);
  if (tagPrefixMatch) {
    for (const htmlTag of htmlDataProvider.provideTags()) {
      if (state.currentWordMatches(htmlTag.name)) {
        const thisHTMLTagCompletion = createNewProposal(
          htmlTag.name,
          import_vscode23.CompletionItemKind.TypeParameter,
          { description: htmlTag.description }
        );
        htmlTagCompletions.push(thisHTMLTagCompletion);
      }
    }
  }
  return htmlTagCompletions;
}
function getCSSPropertyCompletions(state) {
  const cssPropertyCompletions = [];
  const cssProperties = cssDataManager.getProperties();
  cssProperties.filter((prop) => {
    return state.currentWordMatches(prop.name);
  }).forEach((prop) => {
    const entry = { detail: prop.name, description: getEntryDescription(prop) };
    if (prop.syntax) {
      entry.detail = `${prop.name}: ${prop.syntax}`;
    }
    const thisCssPropertyCompletion = createNewProposal(
      prop.name,
      import_vscode23.CompletionItemKind.Property,
      entry
    );
    thisCssPropertyCompletion.range = state.wordRange;
    cssPropertyCompletions.push(thisCssPropertyCompletion);
  });
  return cssPropertyCompletions;
}
function getCSSAtDirectiveCompletions(state) {
  const cssPropertyCompletions = [];
  const cssAtDirectives = cssDataManager.getAtDirectives();
  cssAtDirectives.filter((atDir) => {
    return state.currentWordMatches(atDir.name);
  }).forEach((atDir) => {
    const entry = { detail: atDir.name, description: getEntryDescription(atDir) };
    const thisCssPropertyCompletion = createNewProposal(
      atDir.name,
      import_vscode23.CompletionItemKind.Keyword,
      entry
    );
    thisCssPropertyCompletion.range = state.wordRange;
    cssPropertyCompletions.push(thisCssPropertyCompletion);
  });
  return cssPropertyCompletions;
}
async function getDottedPathCompletions(state, parentDottedPath) {
  const newInstanceCompletions = [];
  const paths = await resolveDottedPaths(parentDottedPath, state.document.uri);
  for (const thisPath of paths) {
    const files = await import_vscode23.workspace.fs.readDirectory(import_vscode23.Uri.parse(thisPath));
    const directories = filterDirectories(files);
    directories.filter(([directory]) => {
      return state.currentWordMatches(directory);
    }).forEach(([directory]) => {
      newInstanceCompletions.push(createNewProposal(
        directory,
        import_vscode23.CompletionItemKind.Folder,
        { detail: `(folder) ${directory}`, description: escapeMarkdown(import_vscode23.Uri.joinPath(import_vscode23.Uri.parse(thisPath), directory).toString()) },
        "!"
      ));
    });
    const componentFiles = filterComponents(files);
    componentFiles.filter(([componentFile]) => {
      const componentName = resolveBaseName(componentFile, COMPONENT_EXT);
      return state.currentWordMatches(componentName);
    }).forEach(([componentFile]) => {
      const componentName = resolveBaseName(componentFile, COMPONENT_EXT);
      newInstanceCompletions.push(createNewProposal(
        componentName,
        import_vscode23.CompletionItemKind.Class,
        { detail: `(component) ${componentName}`, description: escapeMarkdown(import_vscode23.Uri.joinPath(import_vscode23.Uri.parse(thisPath), componentFile).toString()) },
        "!"
      ));
    });
  }
  const cfmlMappings = import_vscode23.workspace.getConfiguration("cfml", state.document.uri).get("mappings", []);
  const splitParentPath = parentDottedPath === "" ? [] : parentDottedPath.split(".");
  for (const cfmlMapping of cfmlMappings) {
    const slicedLogicalPath = cfmlMapping.logicalPath.slice(1);
    const splitLogicalPath = slicedLogicalPath.split("/");
    if (splitParentPath.length >= splitLogicalPath.length) {
      continue;
    }
    const invalidPath = splitParentPath.some((parentPathPart, idx) => {
      return parentPathPart !== splitLogicalPath[idx];
    });
    if (invalidPath) {
      continue;
    }
    const completionName = splitLogicalPath[splitParentPath.length];
    let completionEntry;
    const dottedLogicalPath = splitLogicalPath.slice(0, splitParentPath.length + 1).join(".");
    if (splitLogicalPath.length - splitParentPath.length === 1) {
      const directoryPath = cfmlMapping.isPhysicalDirectoryPath === void 0 || cfmlMapping.isPhysicalDirectoryPath ? cfmlMapping.directoryPath : resolveRootPath(state.document.uri, cfmlMapping.directoryPath);
      completionEntry = { detail: `(mapping) ${dottedLogicalPath}` };
      if (directoryPath) {
        completionEntry.description = escapeMarkdown(directoryPath);
      }
    } else {
      completionEntry = { detail: `(partial mapping) ${dottedLogicalPath}` };
    }
    newInstanceCompletions.push(createNewProposal(
      completionName,
      import_vscode23.CompletionItemKind.Folder,
      completionEntry
    ));
  }
  return newInstanceCompletions;
}
function getCustomSnippetCompletions(state) {
  const snippetCompletions = [];
  const customSnippets2 = getAllCustomSnippets();
  for (const key in customSnippets2) {
    const snippet = customSnippets2[key];
    if (snippet && snippet.scope && snippet.context && snippet.prefix && state.currentWordMatches(snippet.prefix) && snippet.scope === "cfml" && (snippet.context.indexOf("script") !== -1 && state.positionIsScript || snippet.context.indexOf("tag") !== -1 && !state.positionIsScript)) {
      const standardSnippet = new import_vscode23.CompletionItem(snippet.prefix, import_vscode23.CompletionItemKind.Snippet);
      standardSnippet.detail = `(snippet) ${snippet.description}`;
      const snippetString = Array.isArray(snippet.body) ? snippet.body.join("\n") : snippet.body;
      if (snippetString) {
        standardSnippet.insertText = new import_vscode23.SnippetString(snippetString);
        snippetCompletions.push(standardSnippet);
      }
    }
  }
  return snippetCompletions;
}

// src/features/definitionProvider.ts
init_process();
init_buffer();
var import_vscode24 = require("vscode");
var CFMLDefinitionProvider = class {
  /**
   * Provide the definition of the symbol at the given position in the given document.
   * @param document The document for which the command was invoked.
   * @param position The position for which the command was invoked.
   * @param _token A cancellation token.
   * @returns
   */
  async provideDefinition(document2, position, _token) {
    const cfmlDefinitionSettings = import_vscode24.workspace.getConfiguration("cfml.definition", document2.uri);
    if (!cfmlDefinitionSettings.get("enable", true)) {
      return null;
    }
    const cfmlCompletionSettings = import_vscode24.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, false);
    if (documentPositionStateContext.positionInComment) {
      return null;
    }
    const results = [];
    const docIsCfcFile = documentPositionStateContext.isCfcFile;
    const docIsCfmFile = documentPositionStateContext.isCfmFile;
    const documentText = documentPositionStateContext.sanitizedDocumentText;
    let wordRange = document2.getWordRangeAtPosition(position);
    const currentWord = documentPositionStateContext.currentWord;
    const lowerCurrentWord = currentWord.toLowerCase();
    if (!wordRange) {
      wordRange = new import_vscode24.Range(position, position);
    }
    const docPrefix = documentPositionStateContext.docPrefix;
    let referenceMatch;
    objectReferencePatterns.map((element) => {
      const pattern = element.pattern;
      while (referenceMatch = pattern.exec(documentText)) {
        const path = referenceMatch[element.refIndex];
        const offset = referenceMatch.index + referenceMatch[0].lastIndexOf(path);
        const pathRange = new import_vscode24.Range(
          document2.positionAt(offset),
          document2.positionAt(offset + path.length)
        );
        if (pathRange.contains(position)) {
          const componentUri = cachedComponentPathToUri(path, document2.uri, _token);
          if (componentUri) {
            const comp = getComponent(componentUri, _token);
            if (comp) {
              results.push({
                originSelectionRange: pathRange,
                targetUri: comp.uri,
                targetRange: comp.declarationRange,
                targetSelectionRange: comp.declarationRange
              });
            }
          }
        }
      }
    });
    if (docIsCfcFile) {
      const thisComponent = documentPositionStateContext.component;
      if (thisComponent) {
        if (thisComponent.extendsRange && thisComponent.extendsRange.contains(position)) {
          const extendsComp = getComponent(thisComponent.extends, _token);
          if (extendsComp) {
            results.push({
              originSelectionRange: thisComponent.extendsRange,
              targetUri: extendsComp.uri,
              targetRange: extendsComp.declarationRange,
              targetSelectionRange: extendsComp.declarationRange
            });
          }
        }
        if (thisComponent.implementsRanges) {
          thisComponent.implementsRanges.map((range, idx) => {
            if (range && range.contains(position)) {
              const implComp = getComponent(thisComponent.implements[idx], _token);
              if (implComp) {
                results.push({
                  originSelectionRange: range,
                  targetUri: implComp.uri,
                  targetRange: implComp.declarationRange,
                  targetSelectionRange: implComp.declarationRange
                });
              }
            }
          });
        }
        for (const [, func] of thisComponent.functions) {
          if (func.returnTypeUri && func.returnTypeRange && func.returnTypeRange.contains(position)) {
            const returnTypeComp = getComponent(func.returnTypeUri, _token);
            if (returnTypeComp) {
              results.push({
                originSelectionRange: func.returnTypeRange,
                targetUri: returnTypeComp.uri,
                targetRange: returnTypeComp.declarationRange,
                targetSelectionRange: returnTypeComp.declarationRange
              });
            }
          }
          func.signatures.map((signature) => {
            const parameters = signature.parameters.filter((arg) => {
              return arg.dataTypeComponentUri && arg.dataTypeRange && arg.dataTypeRange.contains(position);
            });
            parameters.map((arg) => {
              const argTypeComp = getComponent(arg.dataTypeComponentUri, _token);
              if (argTypeComp) {
                results.push({
                  originSelectionRange: arg.dataTypeRange,
                  targetUri: argTypeComp.uri,
                  targetRange: argTypeComp.declarationRange,
                  targetSelectionRange: argTypeComp.declarationRange
                });
              }
            });
          });
          if (func.bodyRange && func.bodyRange.contains(position)) {
            const localVariables = await getLocalVariables(func, documentPositionStateContext, thisComponent.isScript, _token);
            const localVarPrefixPattern = getValidScopesPrefixPattern(["local" /* Local */], true);
            if (localVarPrefixPattern.test(docPrefix)) {
              localVariables.filter((localVar) => {
                return position.isAfterOrEqual(localVar.declarationLocation.range.start) && equalsIgnoreCase(localVar.identifier, currentWord);
              }).forEach((localVar) => {
                results.push({
                  targetUri: localVar.declarationLocation.uri,
                  targetRange: localVar.declarationLocation.range,
                  targetSelectionRange: localVar.declarationLocation.range
                });
              });
            }
            if (results.length === 0) {
              const argumentPrefixPattern = getValidScopesPrefixPattern(["arguments" /* Arguments */], true);
              if (argumentPrefixPattern.test(docPrefix)) {
                func.signatures.forEach((signature) => {
                  signature.parameters.filter((arg) => {
                    return equalsIgnoreCase(arg.name, currentWord);
                  }).forEach((arg) => {
                    results.push({
                      targetUri: thisComponent.uri,
                      targetRange: arg.nameRange,
                      targetSelectionRange: arg.nameRange
                    });
                  });
                });
              }
            }
          }
        }
        const componentproperties = thisComponent.properties.filter((prop) => {
          return prop.dataTypeComponentUri !== void 0 && prop.dataTypeRange.contains(position);
        });
        for (const [, prop] of componentproperties) {
          const dataTypeComp = getComponent(prop.dataTypeComponentUri, _token);
          if (dataTypeComp) {
            results.push({
              originSelectionRange: prop.dataTypeRange,
              targetUri: dataTypeComp.uri,
              targetRange: dataTypeComp.declarationRange,
              targetSelectionRange: dataTypeComp.declarationRange
            });
          }
        }
        const variablesPrefixPattern = getValidScopesPrefixPattern(["variables" /* Variables */], false);
        if (variablesPrefixPattern.test(docPrefix)) {
          thisComponent.variables.filter((variable) => {
            return equalsIgnoreCase(variable.identifier, currentWord);
          }).forEach((variable) => {
            results.push({
              targetUri: variable.declarationLocation.uri,
              targetRange: variable.declarationLocation.range,
              targetSelectionRange: variable.declarationLocation.range
            });
          });
        }
      }
    } else if (docIsCfmFile) {
      const docVariableAssignments = await parseVariableAssignments(documentPositionStateContext, false, void 0, _token);
      const variableScopePrefixPattern = getVariableScopePrefixPattern();
      const variableScopePrefixMatch2 = variableScopePrefixPattern.exec(docPrefix);
      if (variableScopePrefixMatch2) {
        const validScope = variableScopePrefixMatch2[1];
        let currentScope;
        if (validScope) {
          currentScope = Scope.valueOf(validScope);
        }
        docVariableAssignments.filter((variable) => {
          if (!equalsIgnoreCase(variable.identifier, currentWord)) {
            return false;
          }
          if (currentScope) {
            return variable.scope === currentScope || variable.scope === "unknown" /* Unknown */ && unscopedPrecedence.includes(currentScope);
          }
          return unscopedPrecedence.includes(variable.scope) || variable.scope === "unknown" /* Unknown */;
        }).forEach((variable) => {
          results.push({
            targetUri: variable.declarationLocation.uri,
            targetRange: variable.declarationLocation.range,
            targetSelectionRange: variable.declarationLocation.range
          });
        });
      }
    }
    const userFunc = await getFunctionFromPrefix(documentPositionStateContext, lowerCurrentWord, void 0, _token);
    if (userFunc) {
      results.push({
        targetUri: userFunc.location.uri,
        targetRange: userFunc.nameRange,
        // TODO: userFunc.location.range
        targetSelectionRange: userFunc.nameRange
      });
    }
    const applicationVariablesPrefixPattern = getValidScopesPrefixPattern(["application" /* Application */, "session" /* Session */, "request" /* Request */], false);
    const variableScopePrefixMatch = applicationVariablesPrefixPattern.exec(docPrefix);
    if (variableScopePrefixMatch) {
      const currentScope = Scope.valueOf(variableScopePrefixMatch[1]);
      const applicationDocVariables = await getApplicationVariables(document2.uri);
      applicationDocVariables.filter((variable) => {
        return variable.scope === currentScope && equalsIgnoreCase(variable.identifier, currentWord);
      }).forEach((variable) => {
        results.push({
          targetUri: variable.declarationLocation.uri,
          targetRange: variable.declarationLocation.range,
          targetSelectionRange: variable.declarationLocation.range
        });
      });
    }
    const serverVariablesPrefixPattern = getValidScopesPrefixPattern(["server" /* Server */], false);
    if (serverVariablesPrefixPattern.test(docPrefix)) {
      const serverDocVariables = getServerVariables(document2.uri, _token);
      serverDocVariables.filter((variable) => {
        return variable.scope === "server" /* Server */ && equalsIgnoreCase(variable.identifier, currentWord);
      }).forEach((variable) => {
        results.push({
          targetUri: variable.declarationLocation.uri,
          targetRange: variable.declarationLocation.range,
          targetSelectionRange: variable.declarationLocation.range
        });
      });
    }
    if (results.length === 0 && documentPositionStateContext.isContinuingExpression && cfmlDefinitionSettings.get("userFunctions.search.enable", false)) {
      const wordSuffix = documentText.slice(document2.offsetAt(wordRange.end), documentText.length);
      const functionSuffixPattern2 = getFunctionSuffixPattern();
      if (functionSuffixPattern2.test(wordSuffix)) {
        const functionSearchResults = searchAllFunctionNames(lowerCurrentWord, 2 /* EqualTo */);
        functionSearchResults.forEach((userFunc2) => {
          results.push({
            targetUri: userFunc2.location.uri,
            targetRange: userFunc2.nameRange,
            // TODO: userFunc.location.range
            targetSelectionRange: userFunc2.nameRange
          });
        });
      }
    }
    return results;
  }
};

// src/features/docBlocker/docCompletionProvider.ts
init_process();
init_buffer();
var import_vscode27 = require("vscode");

// src/features/docBlocker/documenter.ts
init_process();
init_buffer();

// src/features/docBlocker/block/function.ts
init_process();
init_buffer();

// src/features/docBlocker/block.ts
init_process();
init_buffer();
var import_vscode25 = require("vscode");
var Block = class {
  /**
   * Creates an instance of Block.
   * @param position The current position from which the DocBlock will be inserted
   * @param document The document object in which the DocBlock is being created
   */
  constructor(position, document2) {
    this.position = position;
    this.document = document2;
    this.setSuffix(document2.getText(new import_vscode25.Range(position, document2.positionAt(document2.getText().length))));
  }
  setup() {
    this.component = getComponent(this.document.uri, void 0);
  }
  /**
   * Set the suffix text.
   * @param suffix The document text that occurs after this.position
   * @returns this
   */
  setSuffix(suffix) {
    this.suffix = suffix;
    return this;
  }
  /**
   * This should be a simple test to determine whether this matches
   * our intended block declaration and we can proceed to properly
   * document
   * @returns regex / pattern test result
   */
  test() {
    return this.pattern.test(this.suffix);
  }
};

// src/features/docBlocker/doc.ts
init_process();
init_buffer();
var import_vscode26 = require("vscode");
var Doc = class {
  /**
   * Creates an instance of Doc.
   * @param docType DocType
   * @param uri Uri
   */
  constructor(docType, uri) {
    /**
     * List of param tags
     */
    this.params = [];
    this.docType = docType;
    this.hint = "Undocumented " + docType;
    this.uri = uri;
  }
  /**
   * Get the config from either vs code or the manually set one
   * @returns Config
   */
  getConfig() {
    if (!this.config) {
      this.config = import_vscode26.workspace.getConfiguration("cfml", this.uri).get("docBlock");
    }
    return this.config;
  }
  /**
   * Set the config object
   * @param config Config
   */
  setConfig(config2) {
    this.config = config2;
  }
  /**
   * Get the URI
   * @returns Uri
   */
  getUri() {
    return this.uri;
  }
  /**
   * Set the URI
   * @param uri Uri
   */
  setUri(uri) {
    this.uri = uri;
  }
  /**
   * Build all the set values into a SnippetString ready for use
   * @param isEmpty boolean
   * @returns SnippetString
   */
  build(isEmpty = false) {
    const snippet = new import_vscode26.SnippetString();
    let extra = this.getConfig().extra;
    let gap = !this.getConfig().gap;
    if (isEmpty) {
      gap = true;
      extra = [];
    }
    snippet.appendText("/**");
    snippet.appendText("\n * ");
    snippet.appendPlaceholder(this.hint);
    if (this.params.length) {
      if (!gap) {
        snippet.appendText("\n *");
        gap = true;
      }
      this.params.forEach((param) => {
        snippet.appendText(`
 * @${param} `);
        snippet.appendPlaceholder("");
      });
    }
    if (Array.isArray(extra) && extra.length > 0) {
      if (!gap) {
        snippet.appendText("\n *");
        gap = true;
      }
      extra.filter((extraItem) => {
        if (extraItem.types && Array.isArray(extraItem.types)) {
          return extraItem.types.includes(this.docType);
        }
        return true;
      }).forEach((extra2) => {
        snippet.appendText(`
 * @${extra2.name} `);
        snippet.appendPlaceholder(extra2.default);
      });
    }
    snippet.appendText("\n */");
    return snippet;
  }
};

// src/features/docBlocker/block/function.ts
var FunctionBlock = class extends Block {
  constructor() {
    super(...arguments);
    this.pattern = /^(\s*)(?:\b(?:private|package|public|remote|static|final|abstract|default)\s+)?(?:\b(?:private|package|public|remote|static|final|abstract|default)\s+)?(?:\b(?:[A-Za-z0-9_.$]+)\s+)?function\s+(?:[_$a-zA-Z][$\w]*)\s*(?:\((?:=\s*\{|[^{])*)[{;]/i;
  }
  constructDoc() {
    const doc = new Doc("function" /* Function */, this.document.uri);
    const positionOffset = this.document.offsetAt(this.position);
    const patternMatch = this.pattern.exec(this.suffix);
    if (patternMatch) {
      const declaration = this.document.positionAt(positionOffset + patternMatch[1].length + 1);
      this.component.functions.filter((func) => {
        return func.location.range.contains(declaration);
      }).forEach((func) => {
        func.signatures.forEach((sig) => {
          sig.parameters.forEach((arg) => {
            doc.params.push(arg.name);
          });
        });
      });
    }
    return doc;
  }
};

// src/features/docBlocker/block/property.ts
init_process();
init_buffer();
var Property2 = class extends Block {
  constructor() {
    super(...arguments);
    this.pattern = /^(\s*property)\s+/i;
  }
  constructDoc() {
    return new Doc("property" /* Property */, this.document.uri);
  }
};

// src/features/docBlocker/block/component.ts
init_process();
init_buffer();
var Component8 = class extends Block {
  constructor() {
    super(...arguments);
    this.pattern = /^(\s*(?:component|interface))\b[^{]*\{/i;
  }
  constructDoc() {
    return new Doc(this.component.isInterface ? "interface" /* Interface */ : "component" /* Component */, this.document.uri);
  }
};

// src/features/docBlocker/documenter.ts
var Documenter = class {
  /**
   * Creates an instance of Documenter.
   * @param position
   * @param document
   */
  constructor(position, document2) {
    this.targetPosition = position;
    this.document = document2;
  }
  /**
   * Load and test each type of signature to see if they can trigger and
   * if not load an empty block
   * @returns
   */
  autoDocument() {
    const func = new FunctionBlock(this.targetPosition, this.document);
    func.setup();
    if (func.test()) {
      return func.constructDoc().build();
    }
    const prop = new Property2(this.targetPosition, this.document);
    prop.setup();
    if (prop.test()) {
      return prop.constructDoc().build();
    }
    const comp = new Component8(this.targetPosition, this.document);
    comp.setup();
    if (comp.test()) {
      return comp.constructDoc().build();
    }
    return new Doc("unknown" /* Unknown */, this.document.uri).build(true);
  }
};

// src/features/docBlocker/docCompletionProvider.ts
var DocBlockCompletions = class {
  /**
   * Implemented function to find and return completions either from
   * the tag list or initiate a complex completion
   * @param document
   * @param position
   * @param _token
   * @returns
   */
  provideCompletionItems(document2, position, _token) {
    const result = [];
    let wordMatchRange;
    if ((wordMatchRange = document2.getWordRangeAtPosition(position, /\/\*\*/)) !== void 0) {
      const documenter = new Documenter(wordMatchRange.end, document2);
      const block = new import_vscode27.CompletionItem("/** */", import_vscode27.CompletionItemKind.Snippet);
      block.range = wordMatchRange;
      block.insertText = documenter.autoDocument();
      block.documentation = "Docblock completion";
      result.push(block);
      return result;
    }
    const comp = getComponent(document2.uri, _token);
    if (!comp) {
      return result;
    }
    if ((wordMatchRange = document2.getWordRangeAtPosition(position, /@[\w$]*(\.[a-z]*)?/)) === void 0) {
      return result;
    }
    const tagSuggestions = new MyMap();
    const subKeySuggestions = new MyMap();
    let wordRange = document2.getWordRangeAtPosition(position);
    if (!wordRange) {
      wordRange = new import_vscode27.Range(position, position);
    }
    const search = document2.getText(wordRange);
    const lineText = document2.lineAt(position).text;
    const wordPrefix = lineText.slice(0, wordRange.start.character);
    const prefixChr = wordRange.start.character !== 0 ? wordPrefix.substr(wordPrefix.length - 1, 1) : "";
    if (prefixChr !== "@" && prefixChr !== ".") {
      return result;
    }
    const argumentNames = new MySet();
    const foundProperty = comp.properties.filter((prop) => {
      return prop.propertyRange.contains(position);
    });
    if (foundProperty.size === 1) {
      const propertyTag = getGlobalTag("cfproperty");
      propertyTag.signatures.forEach((sig) => {
        sig.parameters.filter((param) => {
          return param.name !== "name";
        }).forEach((param) => {
          tagSuggestions.set(param.name, param.description);
        });
      });
    } else {
      const foundFunction = comp.functions.filter((func) => {
        return func.location.range.contains(position);
      });
      if (foundFunction.size === 1) {
        const functionTag = getGlobalTag("cffunction");
        functionTag.signatures.forEach((sig) => {
          sig.parameters.filter((param) => {
            return param.name !== "name";
          }).forEach((param) => {
            tagSuggestions.set(param.name, param.description);
          });
        });
        foundFunction.forEach((func) => {
          func.signatures.forEach((sig) => {
            sig.parameters.forEach((arg) => {
              argumentNames.add(arg.name);
              tagSuggestions.set(arg.name, arg.description);
            });
          });
        });
        const argumentTag = getGlobalTag("cfargument");
        argumentTag.signatures.forEach((sig) => {
          sig.parameters.filter((param) => {
            return param.name !== "name";
          }).forEach((param) => {
            subKeySuggestions.set(param.name, param.description);
          });
        });
      } else {
        if (comp.isInterface) {
          const interfaceTag = getGlobalTag("cfinterface");
          interfaceTag.signatures.forEach((sig) => {
            sig.parameters.filter((param) => {
              return param.name !== "name";
            }).forEach((param) => {
              tagSuggestions.set(param.name, param.description);
            });
          });
        } else {
          const componentTag = getGlobalTag("cfcomponent");
          componentTag.signatures.forEach((sig) => {
            sig.parameters.filter((param) => {
              return param.name !== "name";
            }).forEach((param) => {
              tagSuggestions.set(param.name, param.description);
            });
          });
        }
      }
    }
    let suggestions;
    if (prefixChr === "." && argumentNames.size !== 0) {
      let prevWordRange = document2.getWordRangeAtPosition(wordRange.start.translate(0, -1));
      if (!prevWordRange) {
        prevWordRange = new import_vscode27.Range(position, position);
      }
      const prevWord = document2.getText(prevWordRange);
      if (argumentNames.has(prevWord)) {
        suggestions = subKeySuggestions;
      }
    } else if (prefixChr === "@") {
      suggestions = tagSuggestions;
    }
    if (suggestions) {
      suggestions.filter((_suggestDesc, suggestionName) => {
        return suggestionName.match(search) !== null;
      }).forEach((suggestDesc, suggestionName) => {
        const item = new import_vscode27.CompletionItem(suggestionName, import_vscode27.CompletionItemKind.Property);
        item.documentation = suggestDesc;
        result.push(item);
      });
    }
    return result;
  }
};

// src/features/documentLinkProvider.ts
init_process();
init_buffer();
var import_vscode28 = require("vscode");
var CFMLDocumentLinkProvider = class {
  constructor() {
    this.linkPatterns = [
      // attribute/value link
      {
        pattern: /\b(href|src|template|action|url)\s*(?:=|:|\()\s*(['"])((?!read|write|cfml2wddx|wddx2cfml|begin|commit|rollback|move|upload|zip|add|edit|create|captcha)[^'"#]+?)\2/gi,
        linkIndex: 3
      },
      // include script
      {
        pattern: /\binclude\s+(['"])([^'"]+?)\1/gi,
        linkIndex: 2
      }
    ];
  }
  /**
   * Provide links for the given document.
   * @param document The document in which the links are located.
   * @param _token A cancellation token.
   * @returns
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async provideDocumentLinks(document2, _token) {
    const results = [];
    const documentText = document2.getText();
    let match;
    for (const element of this.linkPatterns) {
      const pattern = element.pattern;
      while (match = pattern.exec(documentText)) {
        const link = match[element.linkIndex];
        const preLen = match[0].indexOf(link);
        const offset = (match.index || 0) + preLen;
        const linkStart = document2.positionAt(offset);
        const linkEnd = document2.positionAt(offset + link.length);
        try {
          const target = await this.resolveLink(document2, link);
          if (target) {
            results.push(
              new import_vscode28.DocumentLink(
                new import_vscode28.Range(linkStart, linkEnd),
                target
              )
            );
          }
        } catch (e) {
          console.error(e);
        }
      }
    }
    return results;
  }
  /**
   * Resolves given link text within a given document to a URI
   * @param document The document containing link text
   * @param link The link text to resolve
   * @returns
   */
  async resolveLink(document2, link) {
    if (link.startsWith("#")) {
      return void 0;
    }
    if (isUri(link)) {
      try {
        const uri = import_vscode28.Uri.parse(link);
        if (uri.scheme) {
          return uri;
        }
      } catch (e) {
      }
    }
    let linkPath = link.split(/[?#]/)[0];
    linkPath = linkPath.replace(/\\/, "/");
    let resourcePath;
    if (linkPath && linkPath[0] === "/") {
      const root = import_vscode28.workspace.getWorkspaceFolder(document2.uri);
      if (root) {
        resourcePath = import_vscode28.Uri.joinPath(root.uri, linkPath);
      }
    } else {
      const base = Utils.dirname(document2.uri);
      resourcePath = import_vscode28.Uri.joinPath(base, linkPath);
    }
    if (resourcePath && await uriExists(resourcePath)) {
      const fileStat = await uriStat(resourcePath);
      if (fileStat.type === import_vscode28.FileType.File) {
        return resourcePath;
      }
    }
    return void 0;
  }
};

// src/features/documentSymbolProvider.ts
init_process();
init_buffer();
var import_vscode29 = require("vscode");
var CFMLDocumentSymbolProvider = class _CFMLDocumentSymbolProvider {
  /**
   * Provide symbol information for the given document.
   * @param document The document for which to provide symbols.
   * @param _token A cancellation token.
   * @returns
   */
  async provideDocumentSymbols(document2, _token) {
    let documentSymbols = [];
    if (!document2.fileName) {
      return documentSymbols;
    }
    const cfmlCompletionSettings = import_vscode29.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentStateContext = getDocumentStateContext(document2, false, replaceComments, _token, true);
    if (documentStateContext.isCfcFile) {
      const componentSymbols = await _CFMLDocumentSymbolProvider.getComponentSymbols(documentStateContext, _token);
      documentSymbols = documentSymbols.concat(componentSymbols);
    } else if (documentStateContext.isCfmFile) {
      const templateSymbols = await _CFMLDocumentSymbolProvider.getTemplateSymbols(documentStateContext, _token);
      documentSymbols = documentSymbols.concat(templateSymbols);
    }
    return documentSymbols;
  }
  /**
   * Provide symbol information for component and its contents
   * @param documentStateContext The document context for which to provide symbols.
   * @param _token
   * @returns
   */
  static async getComponentSymbols(documentStateContext, _token) {
    const document2 = documentStateContext.document;
    const component = getComponent(document2.uri, _token);
    if (!component) {
      return [];
    }
    const componentSymbol = new import_vscode29.DocumentSymbol(
      component.name,
      "",
      component.isInterface ? import_vscode29.SymbolKind.Interface : import_vscode29.SymbolKind.Class,
      new import_vscode29.Range(new import_vscode29.Position(0, 0), document2.positionAt(document2.getText().length)),
      component.declarationRange
    );
    componentSymbol.children = [];
    const propertySymbols = [];
    component.properties.forEach((property, propertyKey) => {
      propertySymbols.push(new import_vscode29.DocumentSymbol(
        property.name,
        "",
        import_vscode29.SymbolKind.Property,
        property.propertyRange,
        property.nameRange
      ));
    });
    componentSymbol.children = componentSymbol.children.concat(propertySymbols);
    const variableSymbols = [];
    component.variables.forEach((variable) => {
      let detail = "";
      if (variable.scope !== "unknown" /* Unknown */) {
        detail = `${variable.scope}.${variable.identifier}`;
      }
      variableSymbols.push(new import_vscode29.DocumentSymbol(
        variable.identifier,
        detail,
        usesConstantConvention(variable.identifier) || variable.final ? import_vscode29.SymbolKind.Constant : import_vscode29.SymbolKind.Variable,
        variable.declarationLocation.range,
        variable.declarationLocation.range
      ));
    });
    componentSymbol.children = componentSymbol.children.concat(variableSymbols);
    const functionSymbols = [];
    for (const [functionKey, userFunction] of component.functions) {
      const currFuncSymbol = new import_vscode29.DocumentSymbol(
        userFunction.name,
        "",
        functionKey === "init" ? import_vscode29.SymbolKind.Constructor : import_vscode29.SymbolKind.Method,
        userFunction.location.range,
        userFunction.nameRange
      );
      currFuncSymbol.children = [];
      if (!userFunction.isImplicit) {
        const localVarSymbols = [];
        const localVariables = await getLocalVariables(userFunction, documentStateContext, component.isScript, _token);
        localVariables.forEach((variable) => {
          let detail = "";
          if (variable.scope !== "unknown" /* Unknown */) {
            detail = `${variable.scope}.${variable.identifier}`;
          }
          localVarSymbols.push(new import_vscode29.DocumentSymbol(
            variable.identifier,
            detail,
            usesConstantConvention(variable.identifier) || variable.final ? import_vscode29.SymbolKind.Constant : import_vscode29.SymbolKind.Variable,
            variable.declarationLocation.range,
            variable.declarationLocation.range
          ));
        });
        currFuncSymbol.children = currFuncSymbol.children.concat(localVarSymbols);
      }
      functionSymbols.push(currFuncSymbol);
    }
    componentSymbol.children = componentSymbol.children.concat(functionSymbols);
    return [componentSymbol];
  }
  /**
   * Provide symbol information for templates
   * @param documentStateContext The document context for which to provide symbols.
   * @param _token
   * @returns
   */
  static async getTemplateSymbols(documentStateContext, _token) {
    const templateSymbols = [];
    const allVariables = await parseVariableAssignments(documentStateContext, false, void 0, _token);
    allVariables.forEach((variable) => {
      const kind = usesConstantConvention(variable.identifier) || variable.final ? import_vscode29.SymbolKind.Constant : import_vscode29.SymbolKind.Variable;
      let detail = "";
      if (variable.scope !== "unknown" /* Unknown */) {
        detail = `${variable.scope}.${variable.identifier}`;
      }
      templateSymbols.push(new import_vscode29.DocumentSymbol(
        variable.identifier,
        detail,
        kind,
        variable.declarationLocation.range,
        variable.declarationLocation.range
      ));
    });
    return templateSymbols;
  }
};

// src/features/hoverProvider.ts
init_process();
init_buffer();
var import_vscode30 = require("vscode");
var cfDocsLinkPrefix = "https://cfdocs.org/";
var mdnLinkPrefix = "https://developer.mozilla.org/docs/Web/";
var CFMLHoverProvider = class {
  /**
   * Provides a hover for the given position and document
   * @param document The document in which the hover was invoked.
   * @param position The position at which the hover was invoked.
   * @param _token A cancellation token.
   * @returns
   */
  async provideHover(document2, position, _token) {
    const cfmlHoverSettings = import_vscode30.workspace.getConfiguration("cfml.hover", document2.uri);
    if (!cfmlHoverSettings.get("enable", true)) {
      return void 0;
    }
    const filePath = document2.fileName;
    if (!filePath) {
      return void 0;
    }
    return this.getHover(document2, position, _token);
  }
  /**
   * Generates hover
   * @param document The document in which the hover was invoked.
   * @param position The position at which the hover was invoked.
   * @param _token
   * @returns
   */
  async getHover(document2, position, _token) {
    const wordRange = document2.getWordRangeAtPosition(position);
    if (!wordRange) {
      return void 0;
    }
    let definition;
    const cfmlCompletionSettings = import_vscode30.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, true);
    const userEngine = documentPositionStateContext.userEngine;
    const textLine = document2.lineAt(position);
    const lineText = documentPositionStateContext.sanitizedDocumentText.slice(document2.offsetAt(textLine.range.start), document2.offsetAt(textLine.range.end));
    const currentWord = documentPositionStateContext.currentWord;
    const lowerCurrentWord = currentWord.toLowerCase();
    const lineSuffix = lineText.slice(wordRange.end.character, textLine.range.end.character);
    const docPrefix = documentPositionStateContext.docPrefix;
    const positionIsCfScript = documentPositionStateContext.positionIsScript;
    let userFunc;
    const tagPrefixPattern2 = getTagPrefixPattern();
    const functionSuffixPattern2 = getFunctionSuffixPattern();
    if (documentPositionStateContext.positionInComment) {
      return void 0;
    }
    if (isGlobalTag(currentWord)) {
      if (tagPrefixPattern2.test(docPrefix)) {
        definition = this.globalTagToHoverProviderItem(getGlobalTag(lowerCurrentWord));
        return this.createHover(definition);
      }
      if (userEngine.supportsScriptTags() && functionSuffixPattern2.test(lineSuffix)) {
        definition = this.globalTagToHoverProviderItem(getGlobalTag(lowerCurrentWord), true);
        return this.createHover(definition);
      }
    }
    const componentPathWordRange = document2.getWordRangeAtPosition(position, /[$\w.]+/);
    const componentPathWord = document2.getText(componentPathWordRange);
    const componentPathWordPrefix = documentPositionStateContext.sanitizedDocumentText.slice(0, document2.offsetAt(componentPathWordRange.start));
    const startSigPositionPrefix = `${componentPathWordPrefix}${componentPathWord}(`;
    const objectNewInstanceInitPrefixMatch = objectNewInstanceInitPrefix.exec(startSigPositionPrefix);
    if (objectNewInstanceInitPrefixMatch && objectNewInstanceInitPrefixMatch[2] === componentPathWord) {
      const componentUri = cachedComponentPathToUri(componentPathWord, document2.uri, _token);
      if (componentUri) {
        const initComponent = getComponent(componentUri, _token);
        if (initComponent) {
          const initMethod = initComponent.initmethod ? initComponent.initmethod.toLowerCase() : "init";
          if (initComponent.functions.has(initMethod)) {
            userFunc = initComponent.functions.get(initMethod);
            definition = this.functionToHoverProviderItem(userFunc);
            return this.createHover(definition, componentPathWordRange);
          }
        }
      }
    }
    if (functionSuffixPattern2.test(lineSuffix)) {
      if (!documentPositionStateContext.isContinuingExpression && isGlobalFunction(currentWord)) {
        definition = this.functionToHoverProviderItem(getGlobalFunction(lowerCurrentWord));
        return this.createHover(definition);
      }
      userFunc = await getFunctionFromPrefix(documentPositionStateContext, lowerCurrentWord, void 0, _token);
      if (userFunc) {
        definition = this.functionToHoverProviderItem(userFunc);
        return this.createHover(definition);
      }
    }
    if (!positionIsCfScript || userEngine.supportsScriptTags()) {
      const cfTagAttributePattern2 = positionIsCfScript ? getCfScriptTagAttributePattern() : getCfTagAttributePattern();
      const cfTagAttributeMatch = cfTagAttributePattern2.exec(docPrefix);
      if (cfTagAttributeMatch) {
        const ignoredTags = expressionCfmlTags;
        const tagName = cfTagAttributeMatch[2];
        const globalTag = getGlobalTag(tagName);
        const attributeValueMatch = VALUE_PATTERN.exec(docPrefix);
        if (globalTag && !ignoredTags.includes(globalTag.name) && !attributeValueMatch) {
          definition = this.attributeToHoverProviderItem(globalTag, currentWord);
          return this.createHover(definition);
        }
      }
    }
    const htmlHoverSettings = import_vscode30.workspace.getConfiguration("cfml.hover.html", document2.uri);
    if (isCfmFile(document2, _token) && htmlHoverSettings.get("enable", true) && tagPrefixPattern2.test(docPrefix) && isKnownTag(lowerCurrentWord)) {
      definition = this.htmlTagToHoverProviderItem(getTag(lowerCurrentWord));
      return this.createHover(definition);
    }
    const cssHoverSettings = import_vscode30.workspace.getConfiguration("cfml.hover.css", document2.uri);
    const cssRanges = getCssRanges(documentPositionStateContext, void 0, _token);
    if (cssHoverSettings.get("enable", true)) {
      for (const cssRange of cssRanges) {
        if (!cssRange.contains(position)) {
          continue;
        }
        const rangeTextOffset = document2.offsetAt(cssRange.start);
        const rangeText = documentPositionStateContext.sanitizedDocumentText.slice(rangeTextOffset, document2.offsetAt(cssRange.end));
        let propertyMatch;
        while (propertyMatch = cssPropertyPattern.exec(rangeText)) {
          const propertyName = propertyMatch[2];
          const propertyRange = new import_vscode30.Range(
            document2.positionAt(rangeTextOffset + propertyMatch.index),
            document2.positionAt(rangeTextOffset + propertyMatch.index + propertyMatch[0].length)
          );
          if (propertyRange.contains(position) && cssDataManager.isKnownProperty(propertyName)) {
            definition = this.cssPropertyToHoverProviderItem(cssDataManager.getProperty(propertyName));
            return this.createHover(definition, propertyRange);
          }
        }
        const cssWordRange = document2.getWordRangeAtPosition(position, cssWordRegex);
        const currentCssWord = cssWordRange ? document2.getText(cssWordRange) : "";
        if (currentCssWord.startsWith("@")) {
          const cssAtDir = cssDataManager.getAtDirective(currentCssWord);
          if (cssAtDir) {
            definition = this.cssAtDirectiveToHoverProviderItem(cssAtDir);
            return this.createHover(definition, cssWordRange);
          }
        }
      }
    }
    return void 0;
  }
  /**
   * Creates HoverProviderItem from given global tag
   * @param tag Global tag to convert
   * @param isScript Whether this is a script tag
   * @returns
   */
  globalTagToHoverProviderItem(tag, isScript = false) {
    const paramArr = [];
    const paramNames = new MySet();
    tag.signatures.forEach((sig) => {
      sig.parameters.forEach((param) => {
        const paramName = getParameterName(param);
        if (!paramNames.has(paramName)) {
          paramNames.add(paramName);
          paramArr.push(param);
        }
      });
    });
    const hoverItem = {
      name: tag.name,
      syntax: isScript ? globalTagSyntaxToScript(tag) : tag.syntax,
      symbolType: "tag",
      description: tag.description,
      params: paramArr,
      returnType: void 0,
      genericDocLink: cfDocsLinkPrefix + tag.name,
      language: LANGUAGE_ID
    };
    const globalEntity = getGlobalEntityDefinition(tag.name);
    if (globalEntity && globalEntity.engines) {
      hoverItem.engineLinks = new MyMap();
      const cfmlEngineNames = [
        "coldfusion" /* ColdFusion */,
        "lucee" /* Lucee */,
        "openbd" /* OpenBD */
      ];
      for (const cfmlEngineName of cfmlEngineNames) {
        if (Object.prototype.hasOwnProperty.call(globalEntity.engines, cfmlEngineName)) {
          const cfEngineInfo = globalEntity.engines[cfmlEngineName];
          if (cfEngineInfo.docs) {
            try {
              const engineDocUri = import_vscode30.Uri.parse(cfEngineInfo.docs);
              hoverItem.engineLinks.set(CFMLEngineName.valueOf(cfmlEngineName), engineDocUri);
            } catch (ex) {
              console.warn(ex);
            }
          }
        }
      }
    }
    return hoverItem;
  }
  /**
   * Creates HoverProviderItem from given function
   * @param func Function to convert
   * @returns
   */
  functionToHoverProviderItem(func) {
    const paramArr = [];
    const paramNames = new MySet();
    func.signatures.forEach((sig) => {
      sig.parameters.forEach((param) => {
        const paramName = getParameterName(param);
        if (!paramNames.has(paramName)) {
          paramNames.add(paramName);
          paramArr.push(param);
        }
      });
    });
    let returnType;
    if ("returnTypeUri" in func) {
      const userFunction = func;
      if (userFunction.returnTypeUri) {
        returnType = uriBaseName(userFunction.returnTypeUri, COMPONENT_EXT);
      }
    }
    if (!returnType && func.returntype) {
      returnType = func.returntype;
    } else {
      returnType = "any" /* Any */;
    }
    const hoverItem = {
      name: func.name,
      syntax: constructSyntaxString(func),
      symbolType: "function",
      description: func.description,
      params: paramArr,
      returnType
    };
    if (isGlobalFunction(func.name)) {
      const globalFunc = func;
      hoverItem.syntax = globalFunc.syntax + ": " + returnType;
      hoverItem.genericDocLink = cfDocsLinkPrefix + globalFunc.name;
      const globalEntity = getGlobalEntityDefinition(globalFunc.name);
      if (globalEntity && globalEntity.engines) {
        hoverItem.engineLinks = new MyMap();
        const cfmlEngineNames = [
          "coldfusion" /* ColdFusion */,
          "lucee" /* Lucee */,
          "openbd" /* OpenBD */
        ];
        for (const cfmlEngineName of cfmlEngineNames) {
          if (Object.prototype.hasOwnProperty.call(globalEntity.engines, cfmlEngineName)) {
            const cfEngineInfo = globalEntity.engines[cfmlEngineName];
            if (cfEngineInfo.docs) {
              try {
                const engineDocUri = import_vscode30.Uri.parse(cfEngineInfo.docs);
                hoverItem.engineLinks.set(CFMLEngineName.valueOf(cfmlEngineName), engineDocUri);
              } catch (ex) {
                console.warn(ex);
              }
            }
          }
        }
      }
    }
    return hoverItem;
  }
  /**
   * Creates HoverProviderItem from given global tag attribute
   * @param tag Global tag to which the attribute belongs
   * @param attributeName Global tag attribute name to convert
   * @returns
   */
  attributeToHoverProviderItem(tag, attributeName) {
    let attribute;
    tag.signatures.forEach((sig) => {
      attribute = sig.parameters.find((param) => {
        const paramName = getParameterName(param);
        return equalsIgnoreCase(paramName, attributeName);
      });
    });
    if (!attribute) {
      return void 0;
    }
    return {
      name: attributeName,
      syntax: `${attribute.required ? "(required) " : ""}${tag.name}[@${attributeName}]: ${attribute.dataType}`,
      symbolType: "attribute",
      description: attribute.description,
      genericDocLink: `${cfDocsLinkPrefix}${tag.name}#p-${attribute.name}`
    };
  }
  /**
   * Creates HoverProviderItem from given HTML tag
   * @param htmlTag HTML tag to convert
   * @returns
   */
  htmlTagToHoverProviderItem(htmlTag) {
    const hoverItem = {
      name: htmlTag.name,
      syntax: `<${htmlTag.name}>`,
      symbolType: "tag",
      description: htmlTag.description,
      params: [],
      returnType: void 0,
      genericDocLink: `${mdnLinkPrefix}HTML/Element/${htmlTag.name}`,
      language: "html"
    };
    return hoverItem;
  }
  /**
   * Creates HoverProviderItem from given CSS property
   * @param cssProperty CSS property to convert
   * @returns
   */
  cssPropertyToHoverProviderItem(cssProperty) {
    const hoverItem = {
      name: cssProperty.name,
      syntax: `${cssProperty.name}: value`,
      symbolType: "property",
      description: getEntryDescription(cssProperty),
      params: [],
      returnType: void 0,
      genericDocLink: `${mdnLinkPrefix}CSS/${cssProperty.name}`
    };
    if (cssProperty.syntax) {
      hoverItem.syntax = `${cssProperty.name}: ${cssProperty.syntax}`;
    }
    return hoverItem;
  }
  /**
   * Creates HoverProviderItem from given CSS at directive
   * @param cssAtDir CSS at directive to convert
   * @returns
   */
  cssAtDirectiveToHoverProviderItem(cssAtDir) {
    const hoverItem = {
      name: cssAtDir.name,
      syntax: cssAtDir.name,
      symbolType: "property",
      description: getEntryDescription(cssAtDir),
      params: [],
      returnType: void 0,
      genericDocLink: `${mdnLinkPrefix}CSS/${cssAtDir.name.replace(/-[a-z]+-/, "")}`,
      language: "css"
    };
    return hoverItem;
  }
  /**
   * Creates a list of MarkdownString that becomes the hover based on the symbol definition
   * @param definition The symbol definition information
   * @param range An optional range to which this hover applies
   * @returns
   */
  createHover(definition, range) {
    if (!definition) {
      throw new Error("Definition not found");
    }
    if (!definition.name) {
      throw new Error("Invalid definition format");
    }
    return new import_vscode30.Hover(this.createHoverText(definition), range);
  }
  /**
   * Creates a list of MarkdownString that becomes the hover text based on the symbol definition
   * @param definition The symbol definition information
   * @returns
   */
  createHoverText(definition) {
    const cfdocsIconUri = import_vscode30.Uri.file(extensionContext.asAbsolutePath("images/cfdocs.png"));
    const mdnIconUri = import_vscode30.Uri.file(extensionContext.asAbsolutePath("images/mdn.png"));
    const hoverTexts = [];
    let syntax = definition.syntax;
    const symbolType = definition.symbolType;
    let language = "plaintext";
    if (symbolType === "function") {
      if (!syntax.startsWith("function ")) {
        syntax = "function " + syntax;
      }
      language = definition.language ? definition.language : "typescript";
    } else if (symbolType === "tag") {
      language = definition.language ? definition.language : LANGUAGE_ID;
    } else if (symbolType === "attribute") {
      language = definition.language ? definition.language : "typescript";
    } else if (symbolType === "property") {
      if (definition.language) {
        language = definition.language;
      }
    } else {
      return void 0;
    }
    hoverTexts.push(new import_vscode30.MarkdownString().appendCodeblock(syntax, language));
    if (definition.description) {
      hoverTexts.push(textToMarkdownString(definition.description));
    } else {
      hoverTexts.push(new import_vscode30.MarkdownString("_No " + symbolType.toLowerCase() + " description_"));
    }
    if (definition.genericDocLink) {
      let docLinks = "";
      if (definition.genericDocLink.startsWith(cfDocsLinkPrefix)) {
        docLinks = `[![cfdocs](${cfdocsIconUri.toString()})](${definition.genericDocLink})`;
        if (definition.engineLinks) {
          definition.engineLinks.forEach((docUri, engineName) => {
            const engineIconUri = CFMLEngine.getIconUri(engineName);
            if (engineIconUri) {
              docLinks += `  &nbsp;&nbsp;[![${engineName}](${engineIconUri.toString()})](${docUri.toString()})`;
            }
          });
        }
      } else if (definition.genericDocLink.startsWith(mdnLinkPrefix)) {
        docLinks = `[![mdn](${mdnIconUri.toString()})](${definition.genericDocLink})`;
      }
      hoverTexts.push(new import_vscode30.MarkdownString(docLinks));
    }
    const paramList = definition.params;
    if (paramList && paramList.length > 0) {
      hoverTexts.push(this.paramsMarkdownPreview(paramList));
    }
    return hoverTexts;
  }
  paramsMarkdownPreview(params, isVerbose = true) {
    const paramDocFunction = isVerbose ? this.getVerboseParamDocumentation : this.getParamDocumentation;
    return new import_vscode30.MarkdownString(params.map(paramDocFunction).join("  \n\n"));
  }
  getParamDocumentation(param) {
    const paramName = getParameterName(param);
    const doc = param.description;
    const label = `\`${paramName}\``;
    if (!doc) {
      return label;
    }
    return label + (/\n/.test(doc) ? "  \n" + doc : ` \u2014 ${doc}`);
  }
  getVerboseParamDocumentation(param) {
    let paramString = constructParameterLabel(param);
    if (!param.required && typeof param.default !== "undefined") {
      let paramDefault = param.default;
      if (typeof paramDefault === "string") {
        if (param.dataType === "string" /* String */) {
          if (!paramDefault.trim().startsWith("'") && !paramDefault.trim().startsWith('"')) {
            paramDefault = `"${paramDefault.trim()}"`;
          }
        } else if (param.dataType === "numeric" /* Numeric */) {
          paramDefault = paramDefault.replace(/['"]/, "").trim();
        } else if (param.dataType === "boolean" /* Boolean */) {
          paramDefault = DataType.isTruthy(paramDefault).toString();
        }
      }
      if (paramDefault) {
        paramString += " = " + paramDefault;
      }
    }
    const hoverText = new import_vscode30.MarkdownString(`\`${paramString}\``).appendMarkdown("  \n&nbsp;");
    if (param.description) {
      hoverText.appendMarkdown(textToMarkdownCompatibleString(param.description));
    } else {
      hoverText.appendMarkdown("_No description_");
    }
    return hoverText.value;
  }
};

// src/features/signatureHelpProvider.ts
init_process();
init_buffer();
var import_vscode31 = require("vscode");
var CFMLSignatureHelpProvider = class {
  /**
   * Provide help for the signature at the given position and document.
   * @param document The document in which the command was invoked.
   * @param position The position at which the command was invoked.
   * @param _token A cancellation token.
   * @param _context Information about how signature help was triggered.
   * @returns
   */
  async provideSignatureHelp(document2, position, _token, _context) {
    const cfmlSignatureSettings = import_vscode31.workspace.getConfiguration("cfml.signature", document2.uri);
    if (!cfmlSignatureSettings.get("enable", true)) {
      return null;
    }
    const cfmlCompletionSettings = import_vscode31.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, false);
    if (documentPositionStateContext.positionInComment) {
      return null;
    }
    const sanitizedDocumentText = documentPositionStateContext.sanitizedDocumentText;
    const backwardIterator = new BackwardIterator(documentPositionStateContext, position, _token);
    backwardIterator.next(_token);
    const iteratedSigPosition = getStartSigPosition(backwardIterator, _token);
    if (!iteratedSigPosition) {
      return null;
    }
    const startSigPosition = document2.positionAt(document2.offsetAt(iteratedSigPosition) + 2);
    const endSigPosition = getClosingPosition(documentPositionStateContext, document2.offsetAt(startSigPosition), ")", _token).translate(0, -1);
    const functionArgRanges = getScriptFunctionArgRanges(documentPositionStateContext, new import_vscode31.Range(startSigPosition, endSigPosition), ",", _token);
    let paramIndex = 0;
    paramIndex = functionArgRanges.findIndex((range) => {
      return range.contains(position);
    });
    if (paramIndex === -1) {
      return null;
    }
    const paramText = sanitizedDocumentText.slice(document2.offsetAt(functionArgRanges[paramIndex].start), document2.offsetAt(functionArgRanges[paramIndex].end));
    const startSigPositionPrefix = sanitizedDocumentText.slice(0, document2.offsetAt(startSigPosition));
    let entry;
    const objectNewInstanceInitPrefixMatch = objectNewInstanceInitPrefix.exec(startSigPositionPrefix);
    if (objectNewInstanceInitPrefixMatch) {
      const componentDotPath = objectNewInstanceInitPrefixMatch[2];
      const componentUri = cachedComponentPathToUri(componentDotPath, document2.uri, _token);
      if (componentUri) {
        const initComponent = getComponent(componentUri, _token);
        if (initComponent) {
          const initMethod = initComponent.initmethod ? initComponent.initmethod.toLowerCase() : "init";
          if (initComponent.functions.has(initMethod)) {
            entry = initComponent.functions.get(initMethod);
          }
        }
      }
    }
    if (!entry) {
      const identWordRange = getPrecedingIdentifierRange(documentPositionStateContext, backwardIterator.getPosition(), _token);
      if (!identWordRange) {
        return null;
      }
      const ident = document2.getText(identWordRange);
      const lowerIdent = ident.toLowerCase();
      const startIdentPositionPrefix = sanitizedDocumentText.slice(0, document2.offsetAt(identWordRange.start));
      if (!isContinuingExpression(startIdentPositionPrefix, _token)) {
        entry = getGlobalFunction(lowerIdent);
      }
      if (!entry) {
        const userFun = await getFunctionFromPrefix(documentPositionStateContext, lowerIdent, startIdentPositionPrefix, _token);
        if (userFun && userFun.location.uri === document2.uri && userFun.location.range.contains(position) && (!userFun.bodyRange || !userFun.bodyRange.contains(position))) {
          return null;
        }
        entry = userFun;
      }
      if (!entry) {
        const variableScopePrefixPattern = getVariableScopePrefixPattern();
        const variableScopePrefixMatch = variableScopePrefixPattern.exec(startIdentPositionPrefix);
        if (variableScopePrefixMatch) {
          const scopePrefix = variableScopePrefixMatch[1];
          let prefixScope;
          if (scopePrefix) {
            prefixScope = Scope.valueOf(scopePrefix);
          }
          const allDocumentVariableAssignments = await collectDocumentVariableAssignments(documentPositionStateContext, _token);
          const userFunctionVariables = allDocumentVariableAssignments.filter((variable) => {
            if (variable.dataType !== "function" /* Function */ || !isUserFunctionVariable(variable) || !equalsIgnoreCase(variable.identifier, lowerIdent)) {
              return false;
            }
            if (prefixScope) {
              return variable.scope === prefixScope || variable.scope === "unknown" /* Unknown */ && unscopedPrecedence.includes(prefixScope);
            }
            return unscopedPrecedence.includes(variable.scope) || variable.scope === "unknown" /* Unknown */;
          }).map((variable) => {
            return variable;
          });
          const userFunctions = variablesToUserFunctions(userFunctionVariables);
          if (userFunctions.length > 0) {
            entry = userFunctions[0];
          }
        }
      }
    }
    if (!entry) {
      return null;
    }
    const sigHelp = new import_vscode31.SignatureHelp();
    entry.signatures.forEach((signature, sigIndex) => {
      const sigDesc = signature.description ? signature.description : entry.description;
      const sigLabel = constructSyntaxString(entry, sigIndex);
      const signatureInfo = new import_vscode31.SignatureInformation(sigLabel, textToMarkdownString(sigDesc));
      const sigParamsPrefixLength = constructSignatureLabelParamsPrefix(entry).length + 1;
      const sigParamsLabelOffsetTuples = getSignatureParamsLabelOffsetTuples(signature.parameters).map((val) => {
        return [val[0] + sigParamsPrefixLength, val[1] + sigParamsPrefixLength];
      });
      signatureInfo.parameters = signature.parameters.map((param, paramIdx) => {
        const paramInfo = new import_vscode31.ParameterInformation(sigParamsLabelOffsetTuples[paramIdx], textToMarkdownString(param.description));
        return paramInfo;
      });
      sigHelp.signatures.push(signatureInfo);
    });
    sigHelp.activeSignature = 0;
    for (let i = 0; i < sigHelp.signatures.length; i++) {
      const currSig = sigHelp.signatures[i];
      if (paramIndex < currSig.parameters.length) {
        sigHelp.activeSignature = i;
        break;
      }
    }
    let namedParamMatch = null;
    if (namedParamMatch = namedParameterPattern.exec(paramText)) {
      const paramName = namedParamMatch[1];
      const namedParamIndex = entry.signatures[sigHelp.activeSignature].parameters.findIndex((param) => {
        return equalsIgnoreCase(paramName, param.name);
      });
      if (namedParamIndex !== -1) {
        paramIndex = namedParamIndex;
      }
    }
    sigHelp.activeParameter = Math.min(paramIndex, sigHelp.signatures[sigHelp.activeSignature].parameters.length - 1);
    return sigHelp;
  }
};

// src/features/typeDefinitionProvider.ts
init_process();
init_buffer();
var import_vscode32 = require("vscode");
var CFMLTypeDefinitionProvider = class {
  /**
   * Provide the type definition of the symbol at the given position in the given document.
   * @param document The document for which the command was invoked.
   * @param position The position for which the command was invoked.
   * @param _token A cancellation token.
   * @returns
   */
  async provideTypeDefinition(document2, position, _token) {
    const results = [];
    const cfmlCompletionSettings = import_vscode32.workspace.getConfiguration("cfml.suggest", document2.uri);
    const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
    const documentPositionStateContext = getDocumentPositionStateContext(document2, position, false, replaceComments, _token, false);
    if (documentPositionStateContext.positionInComment) {
      return null;
    }
    const docIsCfcFile = documentPositionStateContext.isCfcFile;
    const docIsCfmFile = documentPositionStateContext.isCfmFile;
    let wordRange = document2.getWordRangeAtPosition(position);
    const currentWord = documentPositionStateContext.currentWord;
    const lowerCurrentWord = currentWord.toLowerCase();
    if (!wordRange) {
      wordRange = new import_vscode32.Range(position, position);
    }
    const docPrefix = documentPositionStateContext.docPrefix;
    if (docIsCfcFile) {
      const thisComponent = documentPositionStateContext.component;
      if (thisComponent) {
        for (const [, func] of thisComponent.functions) {
          func.signatures.map((signature) => {
            const signatureparameters = signature.parameters.filter((arg) => {
              return arg.dataTypeComponentUri && arg.nameRange && arg.nameRange.contains(position);
            });
            signatureparameters.map((arg) => {
              const argTypeComp = getComponent(arg.dataTypeComponentUri, _token);
              if (argTypeComp) {
                results.push(new import_vscode32.Location(
                  argTypeComp.uri,
                  argTypeComp.declarationRange
                ));
              }
            });
          });
          if (func.bodyRange && func.bodyRange.contains(position)) {
            const localVariables = await getLocalVariables(func, documentPositionStateContext, thisComponent.isScript, _token);
            const localVarPrefixPattern = getValidScopesPrefixPattern(["local" /* Local */], true);
            if (localVarPrefixPattern.test(docPrefix)) {
              const localVariablesfiltered = localVariables.filter((localVar) => {
                return position.isAfterOrEqual(localVar.declarationLocation.range.start) && equalsIgnoreCase(localVar.identifier, currentWord) && localVar.dataTypeComponentUri;
              });
              localVariablesfiltered.map((localVar) => {
                const localVarTypeComp = getComponent(localVar.dataTypeComponentUri, _token);
                if (localVarTypeComp) {
                  results.push(new import_vscode32.Location(
                    localVarTypeComp.uri,
                    localVarTypeComp.declarationRange
                  ));
                }
              });
            }
            if (results.length === 0) {
              const argumentPrefixPattern = getValidScopesPrefixPattern(["arguments" /* Arguments */], true);
              if (argumentPrefixPattern.test(docPrefix)) {
                func.signatures.map((signature) => {
                  const signatureparameters = signature.parameters.filter((arg) => {
                    return equalsIgnoreCase(arg.name, currentWord) && arg.dataTypeComponentUri;
                  });
                  signatureparameters.map((arg) => {
                    const argTypeComp = getComponent(arg.dataTypeComponentUri, _token);
                    if (argTypeComp) {
                      results.push(new import_vscode32.Location(
                        argTypeComp.uri,
                        argTypeComp.declarationRange
                      ));
                    }
                  });
                });
              }
            }
          }
        }
        const thisComponentproperties = thisComponent.properties.filter((prop) => {
          return prop.dataTypeComponentUri !== void 0 && prop.nameRange.contains(position);
        });
        for (const [, prop] of thisComponentproperties) {
          const propTypeComp = getComponent(prop.dataTypeComponentUri, _token);
          if (propTypeComp) {
            results.push(new import_vscode32.Location(
              propTypeComp.uri,
              propTypeComp.declarationRange
            ));
          }
        }
        const variablesPrefixPattern = getValidScopesPrefixPattern(["variables" /* Variables */], false);
        if (variablesPrefixPattern.test(docPrefix)) {
          const thisComponentvariables = thisComponent.variables.filter((variable) => {
            return equalsIgnoreCase(variable.identifier, currentWord) && variable.dataTypeComponentUri;
          });
          thisComponentvariables.map((variable) => {
            const varTypeComp = getComponent(variable.dataTypeComponentUri, _token);
            if (varTypeComp) {
              results.push(new import_vscode32.Location(
                varTypeComp.uri,
                varTypeComp.declarationRange
              ));
            }
          });
        }
      }
    } else if (docIsCfmFile) {
      const docVariableAssignments = await parseVariableAssignments(documentPositionStateContext, false, void 0, _token);
      const variableScopePrefixPattern = getVariableScopePrefixPattern();
      const variableScopePrefixMatch2 = variableScopePrefixPattern.exec(docPrefix);
      if (variableScopePrefixMatch2) {
        const validScope = variableScopePrefixMatch2[1];
        let currentScope;
        if (validScope) {
          currentScope = Scope.valueOf(validScope);
        }
        const docVariableAssignmentsfiltered = docVariableAssignments.filter((variable) => {
          if (!equalsIgnoreCase(variable.identifier, currentWord) || !variable.dataTypeComponentUri) {
            return false;
          }
          if (currentScope) {
            return variable.scope === currentScope || variable.scope === "unknown" /* Unknown */ && unscopedPrecedence.includes(currentScope);
          }
          return unscopedPrecedence.includes(variable.scope) || variable.scope === "unknown" /* Unknown */;
        });
        docVariableAssignmentsfiltered.map((variable) => {
          const varTypeComp = getComponent(variable.dataTypeComponentUri, _token);
          if (varTypeComp) {
            results.push(new import_vscode32.Location(
              varTypeComp.uri,
              varTypeComp.declarationRange
            ));
          }
        });
      }
    }
    const externalUserFunc = await getFunctionFromPrefix(documentPositionStateContext, lowerCurrentWord, void 0, _token);
    if (externalUserFunc && externalUserFunc.returnTypeUri) {
      const returnTypeComponent = getComponent(externalUserFunc.returnTypeUri, _token);
      if (returnTypeComponent) {
        results.push(new import_vscode32.Location(
          returnTypeComponent.uri,
          returnTypeComponent.declarationRange
        ));
      }
    }
    const applicationVariablesPrefixPattern = getValidScopesPrefixPattern(["application" /* Application */, "session" /* Session */, "request" /* Request */], false);
    const variableScopePrefixMatch = applicationVariablesPrefixPattern.exec(docPrefix);
    if (variableScopePrefixMatch) {
      const currentScope = Scope.valueOf(variableScopePrefixMatch[1]);
      const applicationDocVariables = await getApplicationVariables(document2.uri);
      const applicationDocVariablesfiltered = applicationDocVariables.filter((variable) => {
        return variable.scope === currentScope && equalsIgnoreCase(variable.identifier, currentWord) && variable.dataTypeComponentUri;
      });
      applicationDocVariablesfiltered.map((variable) => {
        const varTypeComp = getComponent(variable.dataTypeComponentUri, _token);
        if (varTypeComp) {
          results.push(new import_vscode32.Location(
            varTypeComp.uri,
            varTypeComp.declarationRange
          ));
        }
      });
    }
    const serverVariablesPrefixPattern = getValidScopesPrefixPattern(["server" /* Server */], false);
    if (serverVariablesPrefixPattern.test(docPrefix)) {
      const serverDocVariables = getServerVariables(document2.uri, _token);
      const serverDocVariablesfiltered = serverDocVariables.filter((variable) => {
        return variable.scope === "server" /* Server */ && equalsIgnoreCase(variable.identifier, currentWord) && variable.dataTypeComponentUri;
      });
      serverDocVariablesfiltered.map((variable) => {
        const varTypeComp = getComponent(variable.dataTypeComponentUri, _token);
        if (varTypeComp) {
          results.push(new import_vscode32.Location(
            varTypeComp.uri,
            varTypeComp.declarationRange
          ));
        }
      });
    }
    return results;
  }
};

// src/features/workspaceSymbolProvider.ts
init_process();
init_buffer();
var import_vscode33 = require("vscode");
var CFMLWorkspaceSymbolProvider = class {
  /**
   * Workspace-wide search for a symbol matching the given query string.
   * @param query A non-empty query string.
   * @param _token A cancellation token.
   * @returns
   */
  provideWorkspaceSymbols(query, _token) {
    let workspaceSymbols = [];
    if (query === "") {
      return workspaceSymbols;
    }
    let uri = void 0;
    const editor = import_vscode33.window.activeTextEditor;
    if (editor) {
      const document2 = editor.document;
      if (document2 && (document2.languageId === LANGUAGE_ID || document2.languageId === LANGUAGE_CFS_ID)) {
        uri = document2.uri;
      }
    }
    if (!uri) {
      const documents = import_vscode33.workspace.textDocuments;
      for (const document2 of documents) {
        if (document2.languageId === LANGUAGE_ID || document2.languageId === LANGUAGE_CFS_ID) {
          uri = document2.uri;
          break;
        }
      }
    }
    if (!uri) {
      return workspaceSymbols;
    }
    const userFunctions = searchAllFunctionNames(query);
    workspaceSymbols = workspaceSymbols.concat(
      userFunctions.map((userFunction) => {
        return new import_vscode33.SymbolInformation(
          userFunction.name + "()",
          equalsIgnoreCase(userFunction.name, "init") ? import_vscode33.SymbolKind.Constructor : import_vscode33.SymbolKind.Function,
          uriBaseName(userFunction.location.uri, COMPONENT_EXT),
          userFunction.location
        );
      })
    );
    const components = searchAllComponentNames(query, _token);
    workspaceSymbols = workspaceSymbols.concat(
      components.map((component) => {
        return new import_vscode33.SymbolInformation(
          uriBaseName(component.uri, COMPONENT_EXT),
          component.isInterface ? import_vscode33.SymbolKind.Interface : import_vscode33.SymbolKind.Class,
          "",
          new import_vscode33.Location(component.uri, new import_vscode33.Position(0, 0))
        );
      })
    );
    return workspaceSymbols;
  }
};

// src/features/autoclose.ts
init_process();
init_buffer();
var import_vscode34 = require("vscode");
async function handleContentChanges(event) {
  if (!event.contentChanges[0] || event.reason === import_vscode34.TextDocumentChangeReason.Undo || event.reason === import_vscode34.TextDocumentChangeReason.Redo) {
    return;
  }
  const editor = import_vscode34.window.activeTextEditor;
  if (!editor || editor && event.document !== editor.document) {
    return;
  }
  const cfmlSettings = import_vscode34.workspace.getConfiguration("cfml");
  if (!cfmlSettings.get("autoCloseTags.enable", true)) {
    return;
  }
  const languageId = editor.document.languageId;
  const languages3 = ["cfml"];
  const disableOnLanguage = [];
  if (languages3.indexOf("*") === -1 && languages3.indexOf(languageId) === -1 || disableOnLanguage.indexOf(languageId) !== -1) {
    return;
  }
  const contentChange = event.contentChanges[0];
  const isRightAngleBracket = checkRightAngleBracket(contentChange);
  const isForwardSlash = contentChange.text === "/";
  if (!isRightAngleBracket && !isForwardSlash) {
    return;
  }
  for (let i = 0; i < editor.selections.length; i++) {
    await closeTag(contentChange, editor, editor.selections[i], i, editor.selections.length);
  }
}
async function closeTag(contentChange, editor, selection, selectionPosn, selectionLength) {
  const isRightAngleBracket = checkRightAngleBracket(contentChange);
  const isForwardSlash = contentChange.text === "/";
  const originalPosition = selection.start.translate(0, 1);
  if (isForwardSlash) {
    const [last2chars, linePreceding] = getPrecedingCharacters(originalPosition, editor);
    if (last2chars === "</") {
      let closeTag2 = getCloseTag(linePreceding, nonClosingTags);
      if (closeTag2) {
        const nextChar = getNextChar(editor, originalPosition);
        if (nextChar === ">") {
          closeTag2 = closeTag2.substr(0, closeTag2.length - 1);
        }
        await editor.edit((editBuilder) => {
          editBuilder.insert(originalPosition, closeTag2);
        }).then(() => {
          if (nextChar === ">") {
            editor.selection = moveSelectionRight(editor.selection, 1);
          }
        });
      }
    }
  }
  if (isRightAngleBracket || isForwardSlash) {
    const textLine = editor.document.lineAt(selection.start);
    const text = textLine.text.substring(0, selection.start.character + 1);
    const result = /<([_a-zA-Z][a-zA-Z0-9:\-_.]*)(?:\s+[^<>]*?[^\s/<>=]+?)*?\s?(\/|>)$/.exec(text);
    if (result !== null && (occurrenceCount(result[0], "'") % 2 === 0 && occurrenceCount(result[0], '"') % 2 === 0 && occurrenceCount(result[0], "`") % 2 === 0)) {
      if (result[2] === ">") {
        if (nonClosingTags.indexOf(result[1].toLowerCase()) === -1) {
          await editor.edit((editBuilder) => {
            editBuilder.insert(originalPosition, "</" + result[1] + ">");
          }).then(() => {
            if (selectionLength < 2) {
              editor.selection = new import_vscode34.Selection(originalPosition, originalPosition);
            }
          });
        }
      } else {
        if (textLine.text.length <= selection.start.character + 1 || textLine.text[selection.start.character + 1] !== ">") {
          await editor.edit((editBuilder) => {
            editBuilder.insert(originalPosition, ">");
          });
        }
      }
    }
  }
}
function getPrecedingCharacters(originalPosition, editor) {
  const range = new import_vscode34.Range(new import_vscode34.Position(Math.max(originalPosition.line - 1e3, 0), 0), originalPosition);
  const text = editor.document.getText(range);
  let last2chars = "";
  if (text.length > 2) {
    last2chars = text.substr(text.length - 2);
  }
  return [last2chars, text];
}
function checkRightAngleBracket(contentChange) {
  return contentChange.text === ">" || checkRightAngleBracketInVSCode1Dot8(contentChange);
}
function checkRightAngleBracketInVSCode1Dot8(contentChange) {
  return contentChange.text.endsWith(">") && contentChange.range.start.character === 0 && contentChange.range.start.line === contentChange.range.end.line && !contentChange.range.end.isEqual(new import_vscode34.Position(0, 0));
}
function getNextChar(editor, position) {
  const nextPosition = position.translate(0, 1);
  const text = editor.document.getText(new import_vscode34.Range(position, nextPosition));
  return text;
}
var TAG_RE = /<(\/?[a-zA-Z][a-zA-Z0-9:_.-]*)(?![\s\S]*<\/?[a-zA-Z])/;
function getCloseTag(text, excludedTags) {
  const s = text[text.length - 1] === "/" && text[text.length - 2] === "<" ? text.slice(0, -2) : text[text.length - 1] === "<" ? text.slice(0, -1) : text;
  let m = s.match(TAG_RE);
  while (m && (m[1][0] === "/" || excludedTags.indexOf(m[1].toLowerCase()) !== -1)) {
    const s2 = s.slice(0, m.index);
    if (m[1][0] === "/") {
      const m2 = s2.match(RegExp(`<${m[1].slice(1)}.*$`, "m"));
      if (!m2) {
        return "";
      }
      m = s.slice(0, m2.index).match(TAG_RE);
    } else {
      m = s.slice(0, m.index).match(TAG_RE);
    }
  }
  if (!m) {
    return null;
  }
  return (text[text.length - 1] === "/" && text[text.length - 2] === "<" ? m[1] : text[text.length - 1] === "<" ? "/" + m[1] : "</" + m[1]) + ">";
}
function moveSelectionRight(selection, shift) {
  const newPosition = selection.active.translate(0, shift);
  return new import_vscode34.Selection(newPosition, newPosition);
}
function occurrenceCount(source, find) {
  return source.split(find).length - 1;
}

// src/cfmlMain.ts
var LANGUAGE_ID = "cfml";
var LANGUAGE_CFS_ID = "cfs";
var DOCUMENT_SELECTOR = [
  {
    language: LANGUAGE_ID,
    scheme: "file"
  },
  {
    language: LANGUAGE_CFS_ID,
    scheme: "file"
  },
  {
    language: LANGUAGE_ID,
    scheme: "untitled"
  }
];
var extensionContext;
var bulkCaching = false;
function getConfigurationTarget(target) {
  let configTarget;
  switch (target) {
    case "Global":
      configTarget = import_vscode35.ConfigurationTarget.Global;
      break;
    case "Workspace":
      configTarget = import_vscode35.ConfigurationTarget.Workspace;
      break;
    case "WorkspaceFolder":
      configTarget = import_vscode35.ConfigurationTarget.WorkspaceFolder;
      break;
    default:
      configTarget = import_vscode35.ConfigurationTarget.Global;
  }
  return configTarget;
}
function shouldExcludeDocument(documentUri) {
  const fileSettings = import_vscode35.workspace.getConfiguration("files", documentUri);
  const fileExcludes = fileSettings.get("exclude", []);
  const fileExcludeGlobs = [];
  for (let fileExcludeGlob in fileExcludes) {
    if (fileExcludes[fileExcludeGlob]) {
      if (fileExcludeGlob.endsWith("/")) {
        fileExcludeGlob += "**";
      }
      fileExcludeGlobs.push(fileExcludeGlob);
    }
  }
  const relativePath = import_vscode35.workspace.asRelativePath(documentUri);
  return (0, import_micromatch.some)(relativePath, fileExcludeGlobs);
}
function activate(context) {
  extensionContext = context;
  const languageConfiguration = {
    indentationRules: {
      increaseIndentPattern: new RegExp(`<(?!\\?|(?:${nonIndentingTags.join("|")})\\b|[^>]*\\/>)([-_.A-Za-z0-9]+)(?=\\s|>)\\b[^>]*>(?!.*<\\/\\1>)|<!--(?!.*-->)|\\{[^}"']*$`, "i"),
      decreaseIndentPattern: new RegExp(`^\\s*(<\\/[-_.A-Za-z0-9]+\\b[^>]*>|-?-->|\\}|<(${decreasingIndentingTags.join("|")})\\b[^>]*>)`, "i")
    },
    onEnterRules: [
      {
        // e.g. /** | */
        beforeText: /^\s*\/\*\*(?!\/)([^*]|\*(?!\/))*$/,
        afterText: /^\s*\*\/$/,
        action: { indentAction: import_vscode35.IndentAction.IndentOutdent, appendText: " * " }
      },
      {
        // e.g. /** ...|
        beforeText: /^\s*\/\*\*(?!\/)([^*]|\*(?!\/))*$/,
        action: { indentAction: import_vscode35.IndentAction.None, appendText: " * " }
      },
      {
        // e.g.  * ...|
        beforeText: /^(\t|( {2}))* \*( ([^*]|\*(?!\/))*)?$/,
        action: { indentAction: import_vscode35.IndentAction.None, appendText: "* " }
      },
      {
        // e.g.  */|
        beforeText: /^(\t|( {2}))* \*\/\s*$/,
        action: { indentAction: import_vscode35.IndentAction.None, removeText: 1 }
      },
      {
        // e.g. <cfloop> | </cfloop>
        beforeText: new RegExp(`<(?!(?:${nonIndentingTags.join("|")})\\b)([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$`, "i"),
        afterText: new RegExp(`^(<\\/([_:\\w][_:\\w-.\\d]*)\\s*>|<(?:${decreasingIndentingTags.join("|")})\\b)`, "i"),
        action: { indentAction: import_vscode35.IndentAction.IndentOutdent }
      }
    ]
  };
  import_vscode35.languages.setLanguageConfiguration(LANGUAGE_ID, languageConfiguration);
  import_vscode35.languages.setLanguageConfiguration(LANGUAGE_CFS_ID, languageConfiguration);
  context.subscriptions.push(import_vscode35.commands.registerCommand("cfml.refreshGlobalDefinitionCache", refreshGlobalDefinitionCache));
  context.subscriptions.push(import_vscode35.commands.registerCommand("cfml.refreshWorkspaceDefinitionCache", refreshWorkspaceDefinitionCache));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.toggleLineComment", toggleComment(0 /* Line */, void 0)));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.insertSnippet", insertSnippet));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.toggleBlockComment", toggleComment(1 /* Block */, void 0)));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.openActiveApplicationFile", showApplicationDocument));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.goToMatchingTag", goToMatchingTag));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.openCfDocs", CFDocsService.openCfDocsForCurrentWord));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.openEngineDocs", CFDocsService.openEngineDocsForCurrentWord));
  context.subscriptions.push(import_vscode35.commands.registerTextEditorCommand("cfml.foldAllFunctions", foldAllFunctions));
  context.subscriptions.push(import_vscode35.languages.registerHoverProvider(DOCUMENT_SELECTOR, new CFMLHoverProvider()));
  context.subscriptions.push(import_vscode35.languages.registerDocumentSymbolProvider(DOCUMENT_SELECTOR, new CFMLDocumentSymbolProvider()));
  context.subscriptions.push(import_vscode35.languages.registerSignatureHelpProvider(DOCUMENT_SELECTOR, new CFMLSignatureHelpProvider(), "(", ","));
  context.subscriptions.push(import_vscode35.languages.registerDocumentLinkProvider(DOCUMENT_SELECTOR, new CFMLDocumentLinkProvider()));
  context.subscriptions.push(import_vscode35.languages.registerWorkspaceSymbolProvider(new CFMLWorkspaceSymbolProvider()));
  context.subscriptions.push(import_vscode35.languages.registerCompletionItemProvider(DOCUMENT_SELECTOR, new CFMLCompletionItemProvider(), "."));
  context.subscriptions.push(import_vscode35.languages.registerCompletionItemProvider(DOCUMENT_SELECTOR, new DocBlockCompletions(), "*", "@", "."));
  context.subscriptions.push(import_vscode35.languages.registerDefinitionProvider(DOCUMENT_SELECTOR, new CFMLDefinitionProvider()));
  context.subscriptions.push(import_vscode35.languages.registerTypeDefinitionProvider(DOCUMENT_SELECTOR, new CFMLTypeDefinitionProvider()));
  context.subscriptions.push(import_vscode35.languages.registerColorProvider(DOCUMENT_SELECTOR, new CFMLDocumentColorProvider()));
  context.subscriptions.push(import_vscode35.workspace.onDidSaveTextDocument(async (document2) => {
    if (!document2) {
      return;
    }
    const documentUri = document2.uri;
    if (shouldExcludeDocument(documentUri)) {
      return;
    }
    if (isCfcFile(document2, void 0)) {
      const cfmlCompletionSettings = import_vscode35.workspace.getConfiguration("cfml.suggest", document2.uri);
      const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
      await cacheComponentFromDocument(document2, false, replaceComments, void 0);
    } else if (resolveBaseName(document2.fileName) === "Application.cfm") {
      const documentStateContext = getDocumentStateContext(document2, false, true, void 0);
      const thisApplicationVariables = await parseVariableAssignments(documentStateContext, documentStateContext.docIsScript, void 0, void 0);
      const thisApplicationFilteredVariables = thisApplicationVariables.filter((variable) => {
        return ["application" /* Application */, "session" /* Session */, "request" /* Request */].includes(variable.scope);
      });
      setApplicationVariables(document2.uri, thisApplicationFilteredVariables);
    }
  }));
  const componentWatcher = import_vscode35.workspace.createFileSystemWatcher(COMPONENT_FILE_GLOB, false, true, false);
  componentWatcher.onDidCreate((componentUri) => {
    if (shouldExcludeDocument(componentUri)) {
      return;
    }
    import_vscode35.workspace.openTextDocument(componentUri).then(async (document2) => {
      const cfmlCompletionSettings = import_vscode35.workspace.getConfiguration("cfml.suggest", document2.uri);
      const replaceComments = cfmlCompletionSettings.get("replaceComments", true);
      await cacheComponentFromDocument(document2, false, replaceComments, void 0);
    });
  });
  componentWatcher.onDidDelete((componentUri) => {
    if (shouldExcludeDocument(componentUri)) {
      return;
    }
    clearCachedComponent(componentUri);
    const fileName = uriBaseName(componentUri);
    if (fileName === "Application.cfc") {
      removeApplicationVariables(componentUri);
    }
  });
  context.subscriptions.push(componentWatcher);
  const applicationCfmWatcher = import_vscode35.workspace.createFileSystemWatcher(APPLICATION_CFM_GLOB, false, true, false);
  context.subscriptions.push(applicationCfmWatcher);
  applicationCfmWatcher.onDidCreate((applicationUri) => {
    if (shouldExcludeDocument(applicationUri)) {
      return;
    }
    import_vscode35.workspace.openTextDocument(applicationUri).then(async (document2) => {
      const documentStateContext = getDocumentStateContext(document2, false, true, void 0);
      const thisApplicationVariables = await parseVariableAssignments(documentStateContext, documentStateContext.docIsScript, void 0, void 0);
      const thisApplicationFilteredVariables = thisApplicationVariables.filter((variable) => {
        return ["application" /* Application */, "session" /* Session */, "request" /* Request */].includes(variable.scope);
      });
      setApplicationVariables(applicationUri, thisApplicationFilteredVariables);
    });
  });
  applicationCfmWatcher.onDidDelete((applicationUri) => {
    if (shouldExcludeDocument(applicationUri)) {
      return;
    }
    removeApplicationVariables(applicationUri);
  });
  context.subscriptions.push(import_vscode35.workspace.onDidChangeConfiguration((evt) => {
    if (evt.affectsConfiguration("cfml.globalDefinitions") || evt.affectsConfiguration("cfml.cfDocs") || evt.affectsConfiguration("cfml.engine")) {
      import_vscode35.commands.executeCommand("cfml.refreshGlobalDefinitionCache");
    }
  }));
  const cfmlSettings = import_vscode35.workspace.getConfiguration("cfml");
  const autoCloseTagExtId = "formulahendry.auto-close-tag";
  const autoCloseTagExt = import_vscode35.extensions.getExtension(autoCloseTagExtId);
  const enableAutoCloseTags = cfmlSettings.get("autoCloseTags.enable", true);
  if (autoCloseTagExt) {
    const autoCloseTagsSettings = import_vscode35.workspace.getConfiguration("auto-close-tag", null);
    const autoCloseLanguages = autoCloseTagsSettings.get("activationOnLanguage");
    const autoCloseExcludedTags = autoCloseTagsSettings.get("excludedTags");
    if (enableAutoCloseTags) {
      if (!autoCloseLanguages.includes(LANGUAGE_ID)) {
        autoCloseLanguages.push(LANGUAGE_ID);
        autoCloseTagsSettings.update(
          "activationOnLanguage",
          autoCloseLanguages,
          getConfigurationTarget(cfmlSettings.get("autoCloseTags.configurationTarget"))
        );
      }
      nonClosingTags.filter((tagName) => {
        return !autoCloseExcludedTags.includes(tagName);
      }).forEach((tagName) => {
        autoCloseExcludedTags.push(tagName);
      });
      autoCloseTagsSettings.update(
        "excludedTags",
        autoCloseExcludedTags,
        getConfigurationTarget(cfmlSettings.get("autoCloseTags.configurationTarget"))
      );
    } else {
      const index = autoCloseLanguages.indexOf(LANGUAGE_ID);
      if (index !== -1) {
        autoCloseLanguages.splice(index, 1);
        autoCloseTagsSettings.update(
          "activationOnLanguage",
          autoCloseLanguages,
          getConfigurationTarget(cfmlSettings.get("autoCloseTags.configurationTarget"))
        );
      }
    }
  } else if (enableAutoCloseTags) {
    import_vscode35.workspace.onDidChangeTextDocument(async (event) => {
      await handleContentChanges(event);
    });
  }
  import_vscode35.commands.executeCommand("cfml.refreshGlobalDefinitionCache");
  import_vscode35.commands.executeCommand("cfml.refreshWorkspaceDefinitionCache");
  const api = {
    isBulkCaching() {
      return bulkCaching;
    }
  };
  return api;
}
function setBulkCaching(value) {
  bulkCaching = value;
}
function getBulkCaching() {
  return bulkCaching;
}
function deactivate() {
}
/*! Bundled license information:

@esbuild-plugins/node-globals-polyfill/Buffer.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
//# sourceMappingURL=extension.js.map
